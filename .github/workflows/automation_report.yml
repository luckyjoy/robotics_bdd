name: Robotics BDD Simulation CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 7 * * *'

jobs:
  run-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          echo "Installing pytest, pytest-bdd, allure-pytest, pytest-html..."
          pip install pytest pytest-bdd allure-pytest pytest-html

      - name: Clean previous allure-results
        run: |
          echo "Cleaning allure-results folder..."
          if [ -d "allure-results" ]; then rm -rf allure-results; fi
        shell: bash

      - name: Copy platform-specific support files
        run: |
          echo "Copying supports files for $RUNNER_OS..."
          mkdir -p allure-results
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            cp supports/ubuntu.* allure-results/ 2>/dev/null || echo "No Ubuntu support files found"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            copy supports\windows.* allure-results\ 2>NUL || echo "No Windows support files found"
          fi
        shell: bash

      - name: Run tests
        run: |
          echo "Running pytest navigation tests..."
          pytest -m navigation --alluredir=allure-results | tee pytest.log
        shell: bash

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results
          retention-days: 7

  deploy-pages:
    runs-on: ubuntu-latest
    needs: run-tests
    # NOTE: We can no longer use the 'github-pages' environment with peaceiris/actions-gh-pages
    # as it bypasses the standard GitHub Pages deployment flow.
    # The permissions are sufficient to push to the gh-pages branch.
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository (fetch full history)
        uses: actions/checkout@v4
        with:
          # Fetch full history is necessary for the gh-pages deploy action
          fetch-depth: 0 

      # --- FIX: Download all history from the target branch (gh-pages) ---
      # This step checks out the history branch into the 'site' folder
      - name: Checkout gh-pages branch (for history)
        uses: actions/checkout@v4
        with:
          ref: gh-pages # Your target GitHub Pages branch (often gh-pages or main/master)
          path: site
          clean: false # Do not delete the 'site' folder content

      - name: Download Linux Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ubuntu-latest
          path: allure-results/ubuntu-latest

      - name: Download Windows Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-windows-latest
          path: allure-results/windows-latest

      - name: Setup Allure CLI
        run: |
          echo "Setting up Allure CLI..."
          ALLURE_VERSION=2.25.0
          curl -L -o allure.tgz "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.tgz"
          mkdir -p allure-commandline
          tar -xzf allure.tgz -C allure-commandline --strip-components 1
          echo "$PWD/allure-commandline/bin" >> $GITHUB_PATH

      - name: Generate Allure Reports
        run: |
          echo "Generating Allure reports..."
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          SITE_DIR="site"
          mkdir -p "$SITE_DIR/latest"
          
          for OS in ubuntu-latest windows-latest; do
            VERSIONED_REPORT_DIR="allure-report-${BUILD_NUMBER}-${OS}"
            mkdir -p "$VERSIONED_REPORT_DIR"
            
            # Generate the new report
            allure generate "allure-results/$OS" --output "$VERSIONED_REPORT_DIR" --clean

            # Copy the new report into the site directory, merging with existing history
            mkdir -p "$SITE_DIR/$BUILD_NUMBER/$OS"
            cp -r "$VERSIONED_REPORT_DIR"/* "$SITE_DIR/$BUILD_NUMBER/$OS/"
            
            mkdir -p "$SITE_DIR/latest/$OS"
            cp -r "$VERSIONED_REPORT_DIR"/* "$SITE_DIR/latest/$OS/"

            # Update build info
            date -u +"%Y-%m-%d %H:%M:%S UTC" > "$SITE_DIR/$BUILD_NUMBER/$OS/build-info.txt"
            cp "$SITE_DIR/$BUILD_NUMBER/$OS/build-info.txt" "$SITE_DIR/latest/$OS/build-info.txt"
          done

      - name: Rebuild index.html (Now guaranteed to find all historical build folders)
        run: |
          SITE_DIR="site"
          echo "<html><body><h1>Allure Reports</h1><ul>" > "$SITE_DIR/index.html"

          # Latest reports
          for OS in ubuntu-latest windows-latest; do
            if [ -d "$SITE_DIR/latest/$OS" ]; then
              TS=$(cat "$SITE_DIR/latest/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
              echo "<li><a href='latest/$OS/'>Latest Report ($OS)</a> - ${TS}</li>" >> "$SITE_DIR/index.html"
            fi
          done

          echo "<h2>Report History</h2>" >> "$SITE_DIR/index.html"
          
          # Use find for reliable directory detection
          HISTORICAL_BUILDS=$(find "$SITE_DIR" -maxdepth 1 -type d -regextype posix-egrep -regex ".*\/[0-9]+$" | xargs -n 1 basename | sort -nr)
          
          if [ -z "$HISTORICAL_BUILDS" ]; then
              echo "<p>No historical builds found in the '$SITE_DIR' directory.</p>" >> "$SITE_DIR/index.html"
          else
              for BUILD in $HISTORICAL_BUILDS; do
                for OS in ubuntu-latest windows-latest; do
                  if [ -d "$SITE_DIR/$BUILD/$OS" ]; then
                    TS=$(cat "$SITE_DIR/$BUILD/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
                    echo "<li><a href='${BUILD}/${OS}/'>Build #${BUILD} ($OS)</a> - ${TS}</li>" >> "$SITE_DIR/index.html"
                  fi
                done
              done
          fi

          echo "</ul></body></html>" >> "$SITE_DIR/index.html"

      # --- CRITICAL FIX: Replace the standard deployment with peaceiris/actions-gh-pages ---
      # This action preserves the entire directory structure.
      - name: Deploy to GitHub Pages (Preserving History)
        uses: peaceiris/actions-gh-pages@v3
        with:
          # Use the default token generated by GitHub
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # The source directory containing all reports and index.html
          publish_dir: site
          # The branch GitHub Pages serves from (usually gh-pages)
          publish_branch: gh-pages 
          # Keep all existing files that are NOT overwritten by the current upload
          keep_files: true 
          # The commit message
          commit_message: "Deploy Allure Reports - Build ${{ github.run_number }}"

      # The final step for adding badges remains the same
      - name: Add workflow badges to summary
        run: |
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          OWNER=${GITHUB_REPOSITORY_OWNER}

          echo "### Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest-blue)](https://${OWNER}.github.io/${REPO_NAME}/latest/ubuntu-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest-blue)](https://${OWNER}.github.io/${REPO_NAME}/latest/windows-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](https://${OWNER}.github.io/${REPO_NAME}/)" >> $GITHUB_STEP_SUMMARY