name: Robotics BDD Simulation CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 7 * * *'

jobs:
  run-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          echo "Installing required Python packages..."
          pip install pytest pytest-bdd allure-pytest pytest-html

      # -----------------------------
      # Clean previous results
      # -----------------------------
      - name: Clean allure-results (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "Cleaning allure-results folder on Linux/macOS..."
          if [ -d "allure-results" ]; then
            rm -rf allure-results
          fi

      - name: Clean allure-results (Windows)
        if: runner.os == 'Windows'
        run: |
          Write-Host "Cleaning allure-results folder on Windows..."
          if (Test-Path "allure-results") { Remove-Item -Recurse -Force allure-results }

      # -----------------------------
      # Run tests
      # -----------------------------
      - name: Run pytest navigation tests
        run: |
          echo "Running pytest navigation tests..."
          pytest -m navigation --alluredir=allure-results

      # -----------------------------
      # Copy environment files
      # -----------------------------
      - name: Copy supports files (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "Copying supports files for Linux/macOS..."
          cp supports/ubuntu.properties allure-results/environment.properties || true
          cp supports/categories.json allure-results/ || true

      - name: Copy supports files (Windows)
        if: runner.os == 'Windows'
        run: |
          Write-Host "Copying supports files for Windows..."
          Copy-Item supports\windows.properties allure-results\environment.properties -ErrorAction SilentlyContinue
          Copy-Item supports\categories.json allure-results\ -ErrorAction SilentlyContinue

      # -----------------------------
      # Upload artifacts
      # -----------------------------
      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results
          retention-days: 7

  deploy-pages:
    runs-on: ubuntu-latest
    needs: run-tests
    timeout-minutes: 30
    environment: github-pages
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -----------------------------
      # Download artifacts from both OSes
      # -----------------------------
      - name: Download Linux Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ubuntu-latest
          path: allure-results/ubuntu-latest

      - name: Download Windows Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-windows-latest
          path: allure-results/windows-latest

      # -----------------------------
      # Setup Allure CLI
      # -----------------------------
      - name: Setup Allure CLI
        run: |
          echo "Setting up Allure CLI..."
          ALLURE_VERSION=2.25.0
          curl -L -o allure.tgz "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.tgz"
          mkdir -p allure-commandline
          tar -xzf allure.tgz -C allure-commandline --strip-components 1
          echo "$PWD/allure-commandline/bin" >> $GITHUB_PATH

      # -----------------------------
      # Generate Allure Reports
      # -----------------------------
      - name: Generate Allure Reports
        run: |
          echo "Generating Allure reports..."
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          SITE_DIR="site"
          mkdir -p "$SITE_DIR/$BUILD_NUMBER"
          mkdir -p "$SITE_DIR/latest"

          for OS in ubuntu-latest windows-latest; do
            echo "Processing $OS..."
            VERSIONED_REPORT_DIR="allure-report-${BUILD_NUMBER}-${OS}"
            mkdir -p "$VERSIONED_REPORT_DIR"
            allure generate "allure-results/$OS" --output "$VERSIONED_REPORT_DIR" --clean

            mkdir -p "$SITE_DIR/$BUILD_NUMBER/$OS"
            cp -r "$VERSIONED_REPORT_DIR"/* "$SITE_DIR/$BUILD_NUMBER/$OS/"
            mkdir -p "$SITE_DIR/latest/$OS"
            cp -r "$VERSIONED_REPORT_DIR"/* "$SITE_DIR/latest/$OS/"

            date -u +"%Y-%m-%d %H:%M:%S UTC" > "$SITE_DIR/$BUILD_NUMBER/$OS/build-info.txt"
            cp "$SITE_DIR/$BUILD_NUMBER/$OS/build-info.txt" "$SITE_DIR/latest/$OS/build-info.txt"
          done

      # -----------------------------
      # Rebuild index.html
      # -----------------------------
      - name: Rebuild Index
        run: |
          echo "Rebuilding index.html..."
          SITE_DIR="site"
          echo "<html><body><h1>Allure Reports</h1><ul>" > "$SITE_DIR/index.html"

          # Latest reports per OS
          for OS in ubuntu-latest windows-latest; do
            if [ -d "$SITE_DIR/latest/$OS" ]; then
              TS=$(cat "$SITE_DIR/latest/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
              echo "<li><a href='latest/$OS/'>${OS} Latest Report</a> - ${TS}</li>" >> "$SITE_DIR/index.html"
            fi
          done

          # Historical builds
          for dir in $(ls -1v $SITE_DIR | grep -E '^[0-9]+$' | sort -nr); do
            for OS in ubuntu-latest windows-latest; do
              if [ -d "$SITE_DIR/$dir/$OS" ]; then
                TS=$(cat "$SITE_DIR/$dir/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
                echo "<li><a href='${dir}/${OS}/'>Build #${dir} ($OS)</a> - ${TS}</li>" >> "$SITE_DIR/index.html"
              fi
            done
          done

          echo "</ul></body></html>" >> "$SITE_DIR/index.html"

      # -----------------------------
      # Deploy to GitHub Pages
      # -----------------------------
      - uses: actions/configure-pages@v5
      - uses: actions/upload-pages-artifact@v3
        with:
          path: site
      - uses: actions/deploy-pages@v4

      # -----------------------------
      # Add Workflow Badges
      # -----------------------------
      - name: Add Workflow Badges
        run: |
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          echo "### Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/latest/ubuntu-latest/)](https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/latest/ubuntu-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/latest/windows-latest/)](https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/latest/windows-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/)](https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/)" >> $GITHUB_STEP_SUMMARY
