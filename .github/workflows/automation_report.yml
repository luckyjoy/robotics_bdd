name: Robotics BDD Simulation CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 7 * * *'

jobs:
  run-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    timeout-minutes: 45

    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install pytest pytest-bdd allure-pytest pytest-html

      # -----------------------------
      # Run multiple pytest markers
      # -----------------------------
      - name: Run Pick and Place Tests
        run: |
          mkdir -p allure-results/pick_and_place
          pytest -m pick_and_place --alluredir=allure-results/pick_and_place | tee pick_and_place.log

      - name: Run Safety Tests
        run: |
          mkdir -p allure-results/safety
          pytest -m safety --alluredir=allure-results/safety | tee safety.log

      - name: Run Navigation Tests
        run: |
          mkdir -p allure-results/navigation
          pytest -m navigation --alluredir=allure-results/navigation | tee navigation.log

      # Copy support files
      - name: Copy Allure Support Files
        run: |
          cp -r supports/*.properties supports/*.json allure-results/ 2>/dev/null || true

      # -----------------------------
      # Upload OS-specific Allure Results
      # -----------------------------
      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results
          retention-days: 7

  deploy-pages:
    runs-on: ubuntu-latest
    needs: run-tests
    timeout-minutes: 45
    environment:
      name: github-pages

    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -----------------------------
      # Download artifacts from both OSes
      # -----------------------------
      - name: Download Linux Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ubuntu-latest
          path: allure-results/ubuntu-latest

      - name: Download Windows Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-windows-latest
          path: allure-results/windows-latest

      # -----------------------------
      # Merge Allure Results per OS
      # -----------------------------
      - name: Merge Allure Results
        run: |
          mkdir -p allure-results/merged
          for OS in ubuntu-latest windows-latest; do
            cp -r "allure-results/$OS/"* allure-results/merged/
          done

      # -----------------------------
      # Setup Allure CLI
      # -----------------------------
      - name: Setup Allure CLI
        run: |
          ALLURE_VERSION=2.25.0
          curl -L -o allure.tgz "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.tgz"
          mkdir -p allure-commandline
          tar -xzf allure.tgz -C allure-commandline --strip-components 1
          echo "$PWD/allure-commandline/bin" >> $GITHUB_PATH

      # -----------------------------
      # Generate Allure Report (per OS + merged)
      # -----------------------------
      - name: Generate Allure Reports
        run: |
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          SITE_DIR="site"

          # Per OS reports
          for OS in ubuntu-latest windows-latest; do
            REPORT_DIR="$SITE_DIR/$BUILD_NUMBER/$OS"
            mkdir -p "$REPORT_DIR"
            allure generate "allure-results/$OS" --output "$REPORT_DIR" --clean
            mkdir -p "$SITE_DIR/latest/$OS"
            cp -r "$REPORT_DIR"/* "$SITE_DIR/latest/$OS/"
            date -u +"%Y-%m-%d %H:%M:%S UTC" > "$REPORT_DIR/build-info.txt"
          done

          # Merged report
          MERGED_DIR="$SITE_DIR/$BUILD_NUMBER/merged"
          mkdir -p "$MERGED_DIR"
          allure generate "allure-results/merged" --output "$MERGED_DIR" --clean
          mkdir -p "$SITE_DIR/latest/merged"
          cp -r "$MERGED_DIR"/* "$SITE_DIR/latest/merged/"
          date -u +"%Y-%m-%d %H:%M:%S UTC" > "$MERGED_DIR/build-info.txt"

      # -----------------------------
      # Rebuild index.html
      # -----------------------------
      - name: Rebuild Index
        run: |
          SITE_DIR="site"
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          echo "<html><body><h1>Allure Reports</h1><ul>" > "$SITE_DIR/index.html"

          # Latest reports
          for OS in ubuntu-latest windows-latest merged; do
            if [ -d "$SITE_DIR/latest/$OS" ]; then
              TS=$(cat "$SITE_DIR/latest/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
              echo "<li><a href='latest/$OS/'>Latest Report ($OS)</a> - ${TS}</li>" >> "$SITE_DIR/index.html"
            fi
          done

          # Historical builds
          for dir in $(ls -1v $SITE_DIR | grep -E '^[0-9]+$' | sort -nr); do
            for OS in ubuntu-latest windows-latest merged; do
              if [ -d "$SITE_DIR/$dir/$OS" ]; then
                TS=$(cat "$SITE_DIR/$dir/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
                echo "<li><a href='${dir}/${OS}/'>Build #${dir} ($OS)</a> - ${TS}</li>" >> "$SITE_DIR/index.html"
              fi
            done
          done

          echo "</ul></body></html>" >> "$SITE_DIR/index.html"

      # -----------------------------
      # Deploy to GitHub Pages
      # -----------------------------
      - uses: actions/configure-pages@v5
      - uses: actions/upload-pages-artifact@v3
        with:
          path: site
      - uses: actions/deploy-pages@v4

      # -----------------------------
      # Add workflow summary badges
      # -----------------------------
      - name: Add Workflow Badges
        run: |
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          LATEST="https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/latest/"
          HISTORICAL="https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/"

          echo "### Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "[![Latest Report](https://img.shields.io/badge/Latest-Report-blue)]($LATEST)" >> $GITHUB_STEP_SUMMARY
          echo "[![Historical Reports](https://img.shields.io/badge/Historical-Reports-green)]($HISTORICAL)" >> $GITHUB_STEP_SUMMARY
