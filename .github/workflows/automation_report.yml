name: Robotics BDD Simulation CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 7 * * *'

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pages: write
      id-token: write

    environment:
      name: github-pages

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          pip install pytest pytest-bdd allure-pytest pytest-html

      # Restore previous GitHub Pages site to preserve historical builds
      - name: Restore previous GitHub Pages site
        run: |
          SITE_DIR="site"
          REPO="https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"
          TEMP_DIR="site-old-gh"

          # Clone gh-pages branch if it exists
          git clone --branch gh-pages --single-branch $REPO $TEMP_DIR || echo "No gh-pages branch yet"

          # Copy historical builds (skip latest/ and current build)
          if [ -d "$TEMP_DIR" ]; then
            mkdir -p $SITE_DIR
            for dir in $(ls -1 $TEMP_DIR | grep -Ev 'latest|README.md'); do
              if [ "$dir" != "${GITHUB_RUN_NUMBER}" ]; then
                cp -r "$TEMP_DIR/$dir" "$SITE_DIR/$dir"
              fi
            done
          fi

      - name: Generate Allure Report
        run: |
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          SITE_DIR="site"
          ALLURE_VERSION="2.25.0"
          ALLURE_DIR="allure-commandline"

          # Download & extract Allure CLI
          curl -L -o allure.tgz "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.tgz"
          mkdir -p $ALLURE_DIR
          tar -xzf allure.tgz -C $ALLURE_DIR --strip-components 1
          export PATH="$PWD/$ALLURE_DIR/bin:$PATH"

          # Run Allure tests & save logs
          rm -rf allure-results
          pytest -m navigation --alluredir=allure-results | tee pytest.log
          cp supports/environment.properties allure-results/ 2>/dev/null || true
          cp supports/categories.json allure-results/ 2>/dev/null || true

          echo "‚ö° Generating Allure report..."
          VERSIONED_REPORT_DIR="allure-report-${BUILD_NUMBER}"
          if ! allure generate allure-results --output "$VERSIONED_REPORT_DIR" --clean; then
            echo "‚ö†Ô∏è Allure generation failed, creating fallback index.html"
            mkdir -p "$VERSIONED_REPORT_DIR"
            echo "<html><body><h1>No Allure Report available for build #$BUILD_NUMBER</h1></body></html>" > "$VERSIONED_REPORT_DIR/index.html"
          fi

          # Prepare Pages folder
          mkdir -p $SITE_DIR/latest
          mkdir -p $SITE_DIR/$BUILD_NUMBER
          cp -r $VERSIONED_REPORT_DIR/* $SITE_DIR/latest/
          cp -r $VERSIONED_REPORT_DIR/* $SITE_DIR/$BUILD_NUMBER/

          # Save build timestamp
          date -u +"%Y-%m-%d %H:%M:%S UTC" > $SITE_DIR/$BUILD_NUMBER/build-info.txt

          # Remove any README.md to prevent GitHub Pages override
          rm -f $SITE_DIR/README.md

          # Rebuild index.html with timestamps
          echo "<html><body><h1>Allure Reports</h1><ul>" > $SITE_DIR/index.html

          # Latest report with timestamp
          if [ -f "$SITE_DIR/$BUILD_NUMBER/build-info.txt" ]; then
            TS=$(cat "$SITE_DIR/$BUILD_NUMBER/build-info.txt")
          else
            TS="(no timestamp)"
          fi
          echo "<li><a href='latest/'>Latest Report</a> - ${TS}</li>" >> $SITE_DIR/index.html

          # Historical builds (skip current build)
          for dir in $(ls -1v $SITE_DIR | grep -E '^[0-9]+$' | sort -nr); do
            if [ "$dir" = "$BUILD_NUMBER" ]; then
              continue
            fi
            if [ -f "$SITE_DIR/$dir/build-info.txt" ]; then
              TS=$(cat "$SITE_DIR/$dir/build-info.txt")
            else
              TS="(no timestamp)"
            fi
            echo "<li><a href='${dir}/'>Build #${dir}</a> - ${TS}</li>" >> $SITE_DIR/index.html
          done

          echo "</ul></body></html>" >> $SITE_DIR/index.html
          echo "üìÇ Generated directories:"
          ls -R $SITE_DIR

      # Upload raw Allure results for debugging
      - name: Upload raw Allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ github.run_number }}
          path: allure-results
          retention-days: 7

      # Upload pytest log + optional artifacts
      - name: Upload test logs & artifacts
        if: always()   # run even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: test-debug-${{ github.run_number }}
          path: |
            pytest.log
            logs/
            screenshots/
          if-no-files-found: ignore
          retention-days: 7

      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5

      - name: Upload Allure Reports to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy Allure Reports to GitHub Pages
        uses: actions/deploy-pages@v4

      - name: Show GitHub Pages URL
        run: |
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          echo "‚úÖ Latest Allure Report: https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/latest/"
          echo "‚úÖ Historical Reports: https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/"
