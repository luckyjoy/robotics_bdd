name: Robotics BDD Simulation CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 7 * * *'

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pages: write
      id-token: write

    environment:
      name: github-pages

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          pip install pytest pytest-bdd allure-pytest pytest-html

      - name: Run tests and collect Allure results
        run: |
          rm -rf allure-results
          pytest -m navigation --alluredir=allure-results

      - name: Generate Allure Report
        run: |
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          VERSIONED_REPORT_DIR="allure-report-${BUILD_NUMBER}"
          SITE_DIR="site"

          ALLURE_VERSION="2.25.0"
          ALLURE_DIR="allure-commandline"
          curl -L -o allure.tgz "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.tgz"
          mkdir $ALLURE_DIR
          tar -xzf allure.tgz -C $ALLURE_DIR --strip-components 1
          export PATH="$PWD/$ALLURE_DIR/bin:$PATH"

          cp supports/environment.properties allure-results/ 2>/dev/null || true
          cp supports/categories.json allure-results/ 2>/dev/null || true

          echo "‚ö° Generating Allure report..."
          if ! allure generate allure-results --output "$VERSIONED_REPORT_DIR" --clean; then
            echo "‚ö†Ô∏è Allure generation failed, creating fallback index.html"
            mkdir -p "$VERSIONED_REPORT_DIR"
            echo "<html><body><h1>No Allure Report available for build #$BUILD_NUMBER</h1></body></html>" > "$VERSIONED_REPORT_DIR/index.html"
          fi

          # Prepare Pages folder
          mkdir -p $SITE_DIR/latest
          mkdir -p $SITE_DIR/$BUILD_NUMBER
          cp -r $VERSIONED_REPORT_DIR/* $SITE_DIR/latest/
          cp -r $VERSIONED_REPORT_DIR/* $SITE_DIR/$BUILD_NUMBER/

          # Remove any README.md to prevent GitHub Pages override
          rm -f $SITE_DIR/README.md

          # Update root index.html to list all builds
          echo "<html><body><h1>Allure Reports</h1><ul>" > $SITE_DIR/index.html
          echo "<li><a href='latest/'>Latest Report</a></li>" >> $SITE_DIR/index.html
          # List historical builds by scanning directories
          for dir in $(ls -v $SITE_DIR | grep -E '^[0-9]+$'); do
            echo "<li><a href='${dir}/'>Build #${dir}</a></li>" >> $SITE_DIR/index.html
          done
          echo "</ul></body></html>" >> $SITE_DIR/index.html

          echo "üìÇ Generated directories:"
          ls -R $SITE_DIR

      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5

      - name: Upload Allure Reports to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy Allure Reports to GitHub Pages
        uses: actions/deploy-pages@v4

      - name: Show GitHub Pages URL
        run: |
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          echo "‚úÖ Latest Allure Report: https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/latest/"
          echo "‚úÖ Historical reports: https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/${GITHUB_RUN_NUMBER}/"
