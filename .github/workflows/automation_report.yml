name: Robotics BDD Simulation CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 7 * * *'

jobs:
  run-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    timeout-minutes: 30   # Timeout per job

    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          pip install pytest pytest-bdd allure-pytest pytest-html

      # -----------------------------
      # Run tests per OS
      # -----------------------------
      - name: Run tests (Linux)
        if: runner.os == 'Linux'
        run: |
          rm -rf allure-results
          pytest -m navigation --alluredir=allure-results | tee pytest.log
          cp supports/environment.properties allure-results/ 2>/dev/null || true
          cp supports/categories.json allure-results/ 2>/dev/null || true

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: |
          Remove-Item -Recurse -Force allure-results -ErrorAction SilentlyContinue
          pytest -m navigation --alluredir=allure-results
          Copy-Item supports\environment.properties allure-results\ -ErrorAction SilentlyContinue
          Copy-Item supports\categories.json allure-results\ -ErrorAction SilentlyContinue

      # -----------------------------
      # Upload artifacts per OS
      # -----------------------------
      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results
          retention-days: 7

  deploy-pages:
    runs-on: ubuntu-latest
    needs: run-tests
    timeout-minutes: 30
    environment:
      name: github-pages   # Required for deploy-pages

    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -----------------------------
      # Download artifacts from both OSes
      # -----------------------------
      - name: Download Linux Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ubuntu-latest
          path: allure-results/ubuntu

      - name: Download Windows Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-windows-latest
          path: allure-results/windows

      # Merge results
      - name: Merge Allure Results
        run: |
          mkdir -p allure-results
          cp -r allure-results/ubuntu/* allure-results/
          cp -r allure-results/windows/* allure-results/

      # Setup Allure CLI
      - name: Setup Allure CLI
        run: |
          ALLURE_VERSION=2.25.0
          curl -L -o allure.tgz "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.tgz"
          mkdir -p allure-commandline
          tar -xzf allure.tgz -C allure-commandline --strip-components 1
          echo "$PWD/allure-commandline/bin" >> $GITHUB_PATH   # persist PATH

      # Generate Allure report
      - name: Generate Allure Report
        run: |
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          SITE_DIR="site"
          VERSIONED_REPORT_DIR="allure-report-${BUILD_NUMBER}"
          mkdir -p "$VERSIONED_REPORT_DIR"
          allure generate allure-results --output "$VERSIONED_REPORT_DIR" --clean

          mkdir -p "$SITE_DIR/$BUILD_NUMBER"
          cp -r "$VERSIONED_REPORT_DIR"/* "$SITE_DIR/$BUILD_NUMBER/"
          mkdir -p "$SITE_DIR/latest"
          cp -r "$VERSIONED_REPORT_DIR"/* "$SITE_DIR/latest/"

          date -u +"%Y-%m-%d %H:%M:%S UTC" > "$SITE_DIR/$BUILD_NUMBER/build-info.txt"

      # Rebuild index.html
      - name: Rebuild Index
        run: |
          SITE_DIR="site"
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          echo "<html><body><h1>Allure Reports</h1><ul>" > "$SITE_DIR/index.html"
          TS=$(cat "$SITE_DIR/$BUILD_NUMBER/build-info.txt")
          echo "<li><a href='latest/'>Latest Report</a> - ${TS}</li>" >> "$SITE_DIR/index.html"
          for dir in $(ls -1v $SITE_DIR | grep -E '^[0-9]+$' | sort -nr); do
            if [ "$dir" = "$BUILD_NUMBER" ]; then continue; fi
            if [ -f "$SITE_DIR/$dir/build-info.txt" ]; then
              TS=$(cat "$SITE_DIR/$dir/build-info.txt")
            else
              TS="(no timestamp)"
            fi
            echo "<li><a href='${dir}/'>Build #${dir}</a> - ${TS}</li>" >> "$SITE_DIR/index.html"
          done
          echo "</ul></body></html>" >> "$SITE_DIR/index.html"

      # Deploy to GitHub Pages
      - uses: actions/configure-pages@v5
      - uses: actions/upload-pages-artifact@v3
        with:
          path: site
      - uses: actions/deploy-pages@v4

      # Add badges to workflow summary
      - name: Add Workflow Badges
        run: |
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          LATEST="https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/latest/"
          HISTORICAL="https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/"

          echo "### Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "[![Latest Report](https://img.shields.io/badge/Latest-Report-blue)]($LATEST)" >> $GITHUB_STEP_SUMMARY
          echo "[![Historical Reports](https://img.shields.io/badge/Historical-Reports-green)]($HISTORICAL)" >> $GITHUB_STEP_SUMMARY
