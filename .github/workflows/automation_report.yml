name: Robotics BDD Simulation CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 7 * * *'

jobs:
  run-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    timeout-minutes: 30

    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          pip install pytest pytest-bdd allure-pytest pytest-html

      - name: Prepare Allure results folder
        run: |
          rm -rf allure-results || true
          mkdir -p allure-results
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            cp supports/ubuntu.properties allure-results/environment.properties
            cp supports/ubuntu.json allure-results/categories.json
          else
            cp supports/windows.properties allure-results/environment.properties
            cp supports/windows.json allure-results/categories.json
          fi

      - name: Run pytest
        run: |
          pytest -m navigation --alluredir=allure-results | tee pytest.log

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results
          retention-days: 7

  deploy-pages:
    runs-on: ubuntu-latest
    needs: run-tests
    timeout-minutes: 30
    environment:
      name: github-pages

    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Linux Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ubuntu-latest
          path: allure-results/ubuntu-latest

      - name: Download Windows Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-windows-latest
          path: allure-results/windows-latest

      - name: Setup Allure CLI
        run: |
          ALLURE_VERSION=2.25.0
          curl -L -o allure.tgz "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.tgz"
          mkdir -p allure-commandline
          tar -xzf allure.tgz -C allure-commandline --strip-components 1
          echo "$PWD/allure-commandline/bin" >> $GITHUB_PATH

      - name: Generate Allure Reports
        run: |
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          SITE_DIR="site"
          mkdir -p "$SITE_DIR/$BUILD_NUMBER"
          mkdir -p "$SITE_DIR/latest"

          for OS in ubuntu-latest windows-latest; do
            VERSIONED_REPORT_DIR="allure-report-${BUILD_NUMBER}-${OS}"
            mkdir -p "$VERSIONED_REPORT_DIR"
            allure generate "allure-results/$OS" --output "$VERSIONED_REPORT_DIR" --clean

            # Historical builds
            mkdir -p "$SITE_DIR/$BUILD_NUMBER/$OS"
            cp -r "$VERSIONED_REPORT_DIR"/* "$SITE_DIR/$BUILD_NUMBER/$OS/"

            # Latest builds
            mkdir -p "$SITE_DIR/latest/$OS"
            cp -r "$VERSIONED_REPORT_DIR"/* "$SITE_DIR/latest/$OS/"

            date -u +"%Y-%m-%d %H:%M:%S UTC" > "$SITE_DIR/$BUILD_NUMBER/$OS/build-info.txt"
            cp "$SITE_DIR/$BUILD_NUMBER/$OS/build-info.txt" "$SITE_DIR/latest/$OS/build-info.txt"
          done

      - name: Rebuild Index
        run: |
          SITE_DIR="site"
          echo "<html><body><h1>Allure Reports</h1>" > "$SITE_DIR/index.html"
          echo "<h2>Latest Reports</h2>" >> "$SITE_DIR/index.html"
          echo "<table border='1'><tr><th>OS</th><th>Link</th><th>Timestamp</th></tr>" >> "$SITE_DIR/index.html"

          for OS in ubuntu-latest windows-latest; do
            if [ -d "$SITE_DIR/latest/$OS" ]; then
              TS=$(cat "$SITE_DIR/latest/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
              echo "<tr><td>${OS}</td><td><a href='latest/$OS/'>Latest Report</a></td><td>${TS}</td></tr>" >> "$SITE_DIR/index.html"
            fi
          done

          echo "</table><h2>Historical Builds</h2>" >> "$SITE_DIR/index.html"
          echo "<table border='1'><tr><th>Build #</th><th>OS</th><th>Link</th><th>Timestamp</th></tr>" >> "$SITE_DIR/index.html"

          for dir in $(ls -1v $SITE_DIR | grep -E '^[0-9]+$' | sort -nr); do
            for OS in ubuntu-latest windows-latest; do
              if [ -d "$SITE_DIR/$dir/$OS" ]; then
                TS=$(cat "$SITE_DIR/$dir/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
                echo "<tr><td>${dir}</td><td>${OS}</td><td><a href='${dir}/${OS}/'>Build #${dir}</a></td><td>${TS}</td></tr>" >> "$SITE_DIR/index.html"
              fi
            done
          done

          echo "</table></body></html>" >> "$SITE_DIR/index.html"

      - uses: actions/configure-pages@v5
      - uses: actions/upload-pages-artifact@v3
        with:
          path: site
      - uses: actions/deploy-pages@v4

      - name: Add Workflow Badges
        run: |
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          echo "### Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "[![Latest Ubuntu Report](https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/latest/ubuntu-latest/)](https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/latest/ubuntu-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Latest Windows Report](https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/latest/windows-latest/)](https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/latest/windows-latest/)" >> $GITHUB_STEP_SUMMARY
