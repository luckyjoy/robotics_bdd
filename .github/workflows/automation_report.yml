name: Robotics BDD Simulation CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 7 * * *'

jobs:
  run-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    timeout-minutes: 30

    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          pip install pytest pytest-bdd allure-pytest pytest-html

      - name: Run tests
        run: |
          if [[ "${RUNNER_OS}" == "Linux" ]]; then
            rm -rf allure-results
            mkdir -p allure-results
            pytest -m navigation --alluredir=allure-results | tee pytest.log
            cp supports/*.properties allure-results/ 2>/dev/null || true
            cp supports/categories.json allure-results/ 2>/dev/null || true
          else
            Remove-Item -Recurse -Force allure-results -ErrorAction SilentlyContinue
            pytest -m navigation --alluredir=allure-results
            Copy-Item supports\*.properties allure-results\ -ErrorAction SilentlyContinue
            Copy-Item supports\categories.json allure-results\ -ErrorAction SilentlyContinue
          fi

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results
          retention-days: 7

  deploy-pages:
    runs-on: ubuntu-latest
    needs: run-tests
    timeout-minutes: 30
    environment:
      name: github-pages

    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ubuntu-latest
          path: allure-results/ubuntu-latest

      - name: Download Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-windows-latest
          path: allure-results/windows-latest

      - name: Setup Allure CLI
        run: |
          ALLURE_VERSION=2.25.0
          curl -L -o allure.tgz "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.tgz"
          mkdir -p allure-commandline
          tar -xzf allure.tgz -C allure-commandline --strip-components 1
          echo "$PWD/allure-commandline/bin" >> $GITHUB_PATH

      - name: Generate Allure Reports
        run: |
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          SITE_DIR="site"
          mkdir -p "$SITE_DIR/$BUILD_NUMBER"
          mkdir -p "$SITE_DIR/latest"

          # Combine both OS results per build
          for OS in ubuntu-latest windows-latest; do
            REPORT_DIR="allure-report-${BUILD_NUMBER}-${OS}"
            mkdir -p "$REPORT_DIR"
            allure generate "allure-results/$OS" --output "$REPORT_DIR" --clean

            # Copy into build number folder
            mkdir -p "$SITE_DIR/$BUILD_NUMBER/$OS"
            cp -r "$REPORT_DIR"/* "$SITE_DIR/$BUILD_NUMBER/$OS/"

            # Copy into latest folder
            mkdir -p "$SITE_DIR/latest/$OS"
            cp -r "$REPORT_DIR"/* "$SITE_DIR/latest/$OS/"
          done

          # Save build timestamp
          date -u +"%Y-%m-%d %H:%M:%S UTC" > "$SITE_DIR/$BUILD_NUMBER/build-info.txt"
          cp "$SITE_DIR/$BUILD_NUMBER/build-info.txt" "$SITE_DIR/latest/build-info.txt"

      - name: Rebuild Index
        run: |
          SITE_DIR="site"
          echo "<html><body><h1>Allure Reports</h1><ul>" > "$SITE_DIR/index.html"

          # Latest combined report
          if [ -d "$SITE_DIR/latest" ]; then
            TS=$(cat "$SITE_DIR/latest/build-info.txt" 2>/dev/null || echo "(no timestamp)")
            echo "<li><a href='latest/'>Latest Report</a> - ${TS}</li>" >> "$SITE_DIR/index.html"
          fi

          # Historical builds
          for dir in $(ls -1v $SITE_DIR | grep -E '^[0-9]+$' | sort -nr); do
            echo "<li>Build #${dir}:</li><ul>" >> "$SITE_DIR/index.html"
            for OS in ubuntu-latest windows-latest; do
              if [ -d "$SITE_DIR/$dir/$OS" ]; then
                TS=$(cat "$SITE_DIR/$dir/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
                echo "<li><a href='${dir}/${OS}/'>${OS}</a> - ${TS}</li>" >> "$SITE_DIR/index.html"
              fi
            done
            echo "</ul>" >> "$SITE_DIR/index.html"
          done

          echo "</ul></body></html>" >> "$SITE_DIR/index.html"

      - uses: actions/configure-pages@v5
      - uses: actions/upload-pages-artifact@v3
        with:
          path: site
      - uses: actions/deploy-pages@v4

      - name: Add Workflow Badges
        run: |
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          LATEST="https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/latest/"
          HISTORICAL="https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/"

          echo "### Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "[![Latest Report](https://img.shields.io/badge/Latest-Report-blue)]($LATEST)" >> $GITHUB_STEP_SUMMARY
          echo "[![Historical Reports](https://img.shields.io/badge/Historical-Reports-green)]($HISTORICAL)" >> $GITHUB_STEP_SUMMARY
