name: Robotics BDD CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

env:
  ALLURE_VERSION: 2.29.0
  SITE_DIR: site

jobs:
  test:
    name: Run tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    outputs:
      test_outcome: ${{ steps.set_outcome.outputs.test_outcome }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker Image (Linux only)
        if: matrix.os == 'ubuntu-latest'
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: robotics-bdd:ci-build
          push: false
          load: true

      - name: Run Tests
        id: run_tests
        shell: bash
        run: |
          set +e
          OS=${{ matrix.os }}
          RESULTS_DIR="allure-results/$OS"
          mkdir -p "$RESULTS_DIR"

          if [[ "$OS" == "ubuntu-latest" ]]; then
            echo "🐳 Running tests inside Docker..."
            docker run --rm -v $PWD:/workspace -w /workspace robotics-bdd:ci-build \
              pytest -v --alluredir="$RESULTS_DIR"
            EXIT_CODE=$?
          else
            echo "🪟 Running tests directly on Windows..."
            pytest -v --alluredir="$RESULTS_DIR"
            EXIT_CODE=$?
          fi

          # Detect setup/env failure (no Allure results)
          if [ ! -d "$RESULTS_DIR" ] || [ -z "$(find $RESULTS_DIR -name '*.json' 2>/dev/null)" ]; then
            echo "❌ Setup/config/environment failure."
            echo "FAIL" > outcome.txt
            exit 1
          fi

          # Detect unstable or pass
          if [ $EXIT_CODE -ne 0 ]; then
            echo "⚠️ Tests failed, marking build as UNSTABLE."
            echo "UNSTABLE" > outcome.txt
          else
            echo "✅ All tests passed."
            echo "PASS" > outcome.txt
          fi

      - name: Set Outcome
        id: set_outcome
        run: echo "test_outcome=$(cat outcome.txt)" >> $GITHUB_OUTPUT

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results/${{ matrix.os }}

  report:
    name: Generate Allure Report & Deploy
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Allure CLI
        run: |
          curl -sL -o allure-${ALLURE_VERSION}.tgz \
            https://github.com/allure-framework/allure2/releases/download/${ALLURE_VERSION}/allure-${ALLURE_VERSION}.tgz
          tar -xzf allure-${ALLURE_VERSION}.tgz
          mv allure-${ALLURE_VERSION} allure
          echo "$(pwd)/allure/bin" >> $GITHUB_PATH

      - name: Download Allure Artifacts
        uses: actions/download-artifact@v4
        with:
          path: allure-results

      - name: Restore Previous Site History
        uses: actions/download-artifact@v4
        with:
          name: allure-history
          path: ${{ env.SITE_DIR }}
        continue-on-error: true

      - name: Generate Reports per OS
        run: |
          SITE="${{ env.SITE_DIR }}"
          BUILD_NUMBER=${{ github.run_number }}
          mkdir -p "$SITE/latest"

          for OS in ubuntu-latest windows-latest; do
            RESULTS_DIR="allure-results/$OS"
            REPORT_DIR_BUILD="$SITE/$BUILD_NUMBER/$OS"
            REPORT_DIR_LATEST="$SITE/latest/$OS"
            mkdir -p "$REPORT_DIR_BUILD" "$REPORT_DIR_LATEST"

            # Copy env info and executor.json
            if [ "$OS" == "ubuntu-latest" ]; then
              cp supports/ubuntu.properties "$RESULTS_DIR/environment.properties" 2>/dev/null || true
            else
              cp supports/windows.properties "$RESULTS_DIR/environment.properties" 2>/dev/null || true
            fi
            cp supports/categories.json "$RESULTS_DIR/categories.json" 2>/dev/null || true

            # executor.json
            REPO_NAME="${GITHUB_REPOSITORY##*/}"
            echo "{\"name\":\"$OS\",\"type\":\"GitHub Actions\",\"url\":\"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\",\"reportUrl\":\"https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/latest/$OS/\",\"buildOrder\":\"${BUILD_NUMBER}\",\"buildName\":\"Build ${BUILD_NUMBER} ($OS)\",\"buildUrl\":\"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\"}" > "$RESULTS_DIR/executor.json"

            # Preserve previous history for trends
            if [ -d "$SITE/latest/$OS/history" ]; then
              mkdir -p "$RESULTS_DIR/history"
              cp -r "$SITE/latest/$OS/history/"* "$RESULTS_DIR/history/" || true
            fi

            # Generate Allure report
            ./allure/bin/allure generate "$RESULTS_DIR" -o "$REPORT_DIR_BUILD" --clean
            cp -r "$REPORT_DIR_BUILD"/* "$REPORT_DIR_LATEST/" || true
            date -u > "$REPORT_DIR_BUILD/build-time.txt"
            date -u > "$REPORT_DIR_LATEST/build-time.txt"
          done

      - name: Update Build History Index
        run: |
          SITE="${{ env.SITE_DIR }}"
          echo "<html><head><title>Allure Build History</title>
          <script src='https://cdn.jsdelivr.net/npm/chart.js'></script>
          <style>
          body{font-family:sans-serif;margin:20px;}
          ul{list-style:none;padding:0;}
          li{margin:6px 0;}
          a{text-decoration:none;color:#0366d6;}
          a:hover{text-decoration:underline;}
          </style></head><body>
          <h1>🤖 Robotics BDD Simulation CI/CD Build History</h1>
          <h2>🧩 Latest Reports</h2><hr><ul>" > "$SITE/index.html"

          for OS in ubuntu-latest windows-latest; do
            if [ -d "$SITE/latest/$OS" ]; then
              echo "<li><a href='latest/$OS/'>Latest Report ($OS)</a></li>" >> "$SITE/index.html"
            fi
          done

          echo "</ul><hr><h2>📊 Report History & Trends</h2>
          <canvas id='trendChart' width='800' height='400'></canvas><ul>" >> "$SITE/index.html"

          # Prepare trend data arrays
          LABELS=""
          PASSES=""
          FAILS=""
          UNSTABLES=""

          BUILDS=$(find "$SITE" -mindepth 1 -maxdepth 1 -type d -printf "%f\n" | grep -E '^[0-9]+$' | sort -n)
          for BUILD in $BUILDS; do
            LABELS="$LABELS'$BUILD',"

            TOTAL_PASS=0
            TOTAL_FAIL=0
            TOTAL_UNSTABLE=0
            for OS in ubuntu-latest windows-latest; do
              EXEC="$SITE/$BUILD/$OS/executor.json"
              if [ -f "$EXEC" ]; then
                STATUS=$(jq -r '.buildName' "$EXEC" | grep -oP '\(.*?\)' | tr -d '()')
                if [[ "$STATUS" == "PASS" ]]; then
                  ((TOTAL_PASS+=1))
                elif [[ "$STATUS" == "UNSTABLE" ]]; then
                  ((TOTAL_UNSTABLE+=1))
                else
                  ((TOTAL_FAIL+=1))
                fi
              fi
            done

            PASSES="$PASSES$TOTAL_PASS,"
            UNSTABLES="$UNSTABLES$TOTAL_UNSTABLE,"
            FAILS="$FAILS$TOTAL_FAIL,"

            echo "<li><a href='${BUILD}/ubuntu-latest/'>Build #${BUILD} (Ubuntu)</a> / <a href='${BUILD}/windows-latest/'>Build #${BUILD} (Windows)</a></li>" >> "$SITE/index.html"
          done

          echo "</ul>
          <script>
          const ctx=document.getElementById('trendChart').getContext('2d');
          new Chart(ctx,{
            type:'line',
            data:{labels:[${LABELS%,}],
              datasets:[
                {label:'PASS',data:[${PASSES%,}],borderColor:'green',fill:false},
                {label:'UNSTABLE',data:[${UNSTABLES%,}],borderColor:'orange',fill:false},
                {label:'FAIL',data:[${FAILS%,}],borderColor:'red',fill:false}
              ]},
            options:{responsive:true,plugins:{legend:{position:'top'}},scales:{y:{beginAtZero:true,stepSize:1}}}
          });
          </script></body></html>" >> "$SITE/index.html"

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.SITE_DIR }}

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Persist Site History Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: ${{ env.SITE_DIR }}
          retention-days: 10

      - name: Workflow Summary Badges
        run: |
          STATUS=${{ needs.test.outputs.test_outcome }}
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          BASE_URL="${PAGE_URL%/}"

          if [[ "$STATUS" == "FAIL" ]]; then
            ICON="❌"
            DESC="Failed (setup/config error)"
          elif [[ "$STATUS" == "UNSTABLE" ]]; then
            ICON="⚠️"
            DESC="Unstable (some tests failed)"
          else
            ICON="✅"
            DESC="All tests passed"
          fi

          echo "### 🤖 Robotics BDD CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "[Ubuntu Latest](${BASE_URL}/latest/ubuntu-latest/index.html) | [Windows Latest](${BASE_URL}/latest/windows-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "Build #${{ github.run_number }} — $ICON $DESC" >> $GITHUB_STEP_SUMMARY
