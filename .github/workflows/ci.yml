name: Robotics BDD CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

env:
  ALLURE_VERSION: 2.29.0
  SITE_DIR: site

jobs:
  test:
    name: Run tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    outputs:
      test_outcome: ${{ steps.run_tests.outputs.test_outcome }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker Image
        if: matrix.os == 'ubuntu-latest'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: robotics-bdd:ci-build
          load: true

      - name: Run tests
        id: run_tests
        shell: bash
        run: |
          set +e
          OS_NAME=${{ matrix.os }}
          RESULTS_DIR="allure-results/$OS_NAME"
          mkdir -p "$RESULTS_DIR"

          if [[ "$OS_NAME" == "ubuntu-latest" ]]; then
            echo "🐳 Running tests in Docker..."
            docker run --rm -v $PWD:/workspace -w /workspace robotics-bdd:ci-build \
              pytest -v --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          else
            echo "🪟 Running tests on Windows..."
            pytest -v --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          fi

          # Determine outcome
          if [ ! -d "$RESULTS_DIR" ] || [ -z "$(find $RESULTS_DIR -type f -name '*.json' 2>/dev/null)" ]; then
            echo "❌ Setup/configuration failure – no Allure results found."
            echo "test_outcome=FAIL" >> $GITHUB_OUTPUT
            exit 1
          elif [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "⚠️ Some tests failed (pytest exit code $TEST_EXIT_CODE)."
            echo "test_outcome=UNSTABLE" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "✅ All tests passed successfully."
            echo "test_outcome=PASS" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Upload Allure Results Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results/${{ matrix.os }}

  report:
    name: Generate Allure Reports & Deploy
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Wait for artifact indexing
        run: sleep 10s

      - name: Download previous site (for history & trends)
        uses: actions/download-artifact@v4
        with:
          name: allure-history
          path: previous-site
        continue-on-error: true

      - name: Restore Allure History
        run: |
          mkdir -p "${{ env.SITE_DIR }}/latest"
          if [ -d "previous-site" ]; then
            echo "♻️ Restoring previous site history..."
            cp -r previous-site/* "${{ env.SITE_DIR }}/" || true
          fi

      - name: Download Allure CLI
        run: |
          wget -q https://github.com/allure-framework/allure2/releases/download/${{ env.ALLURE_VERSION }}/allure-${{ env.ALLURE_VERSION }}.tgz
          tar -xzf allure-${{ env.ALLURE_VERSION }}.tgz
          mv allure-${{ env.ALLURE_VERSION }} allure
          echo "$(pwd)/allure/bin" >> $GITHUB_PATH

      - name: Download Allure Artifacts
        uses: actions/download-artifact@v4
        with:
          path: allure-results

      - name: Generate Allure Reports Per OS
        shell: bash
        run: |
          SITE="site"
          BUILD_NUMBER=${{ github.run_number }}
          mkdir -p "$SITE/latest"

          for OS in ubuntu-latest windows-latest; do
            RESULTS_DIR="allure-results/$OS"
            mkdir -p "$RESULTS_DIR"

            REPORT_DIR_BUILD="$SITE/$BUILD_NUMBER/$OS"
            REPORT_DIR_LATEST="$SITE/latest/$OS"
            mkdir -p "$REPORT_DIR_BUILD" "$REPORT_DIR_LATEST"

            # Copy env info and categories
            if [ "$OS" == "ubuntu-latest" ]; then
              cp supports/ubuntu.properties "$RESULTS_DIR/environment.properties" 2>/dev/null || true
            else
              cp supports/windows.properties "$RESULTS_DIR/environment.properties" 2>/dev/null || true
            fi
            cp supports/categories.json "$RESULTS_DIR/categories.json" 2>/dev/null || true

            # executor.json metadata
            REPO_NAME="${GITHUB_REPOSITORY##*/}"
            echo "{\"name\":\"$OS\",\"type\":\"GitHub Actions\",\"url\":\"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\",\"reportUrl\":\"https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/latest/$OS/\",\"buildOrder\":\"${BUILD_NUMBER}\",\"buildName\":\"Build ${BUILD_NUMBER} ($OS)\",\"buildUrl\":\"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\"}" > "$RESULTS_DIR/executor.json"

            # Preserve previous history
            if [ -d "$SITE/latest/$OS/history" ]; then
              mkdir -p "$RESULTS_DIR/history"
              cp -r "$SITE/latest/$OS/history/"* "$RESULTS_DIR/history/" || true
            fi

            # Generate Allure report
            ./allure/bin/allure generate "$RESULTS_DIR" -o "$REPORT_DIR_BUILD" --clean
            cp -r "$REPORT_DIR_BUILD"/* "$REPORT_DIR_LATEST/" || true
            date -u > "$REPORT_DIR_BUILD/build-time.txt"
            date -u > "$REPORT_DIR_LATEST/build-time.txt"
          done

      - name: Fix Allure Paths
        shell: bash
        run: |
          find site -type f -name 'index.html' | while read FILE; do
            perl -pi -e 's|src="/|src="./|g' "$FILE"
            perl -pi -e 's|href="/|href="./|g' "$FILE"
          done

      - name: Rebuild index.html with Trend Charts
        shell: bash
        run: |
          SITE="site"
          NOW=$(TZ='America/Los_Angeles' date)

          echo "<html><head><title>Allure Report History</title>
          <script src='https://cdn.jsdelivr.net/npm/chart.js'></script>
          <style>
          body{font-family:sans-serif;margin:20px;}
          ul{list-style:none;padding:0;}
          li{margin:6px 0;}
          a{text-decoration:none;color:#0366d6;}
          a:hover{text-decoration:underline;}
          </style></head><body>
          <h1>🤖 Robotics BDD CI/CD Build History</h1>
          <h2>🧩 Latest Allure Reports</h2><hr><ul>" > "$SITE/index.html"

          for OS in ubuntu-latest windows-latest; do
            if [ -d "$SITE/latest/$OS" ]; then
              TS=$(cat "$SITE/latest/$OS/build-time.txt" 2>/dev/null || echo "")
              TS_DISPLAY=$(TZ='America/Los_Angeles' date -d "$TS" '+%a %b %d %H:%M:%S %Z %Y' 2>/dev/null || echo "$TS")
              echo "<li><strong><a href='latest/$OS/'>Latest Report ($OS)</a></strong> - Last run: $TS_DISPLAY</li>" >> "$SITE/index.html"
            else
              echo "<li><strong>$OS:</strong> (No report found)</li>" >> "$SITE/index.html"
            fi
          done

          echo "</ul><hr><h2>📊 Report History & Trends</h2>" >> "$SITE/index.html"
          BUILDS=$(find "$SITE" -mindepth 1 -maxdepth 1 -type d -regex '.*/[0-9]+' | sort -n)
          echo "<canvas id='trendChart' width='800' height='400'></canvas><ul>" >> "$SITE/index.html"

          LABELS=""
          PASS_COUNTS=""
          FAIL_COUNTS=""
          UNSTABLE_COUNTS=""

          for BUILD in $BUILDS; do
            TOTAL_PASS=0
            TOTAL_FAIL=0
            TOTAL_UNSTABLE=0

            for OS in ubuntu-latest windows-latest; do
              FILE="$SITE/$BUILD/$OS/executor.json"
              if [ -f "$FILE" ]; then
                STATUS=$(jq -r '.buildName' "$FILE")
                if [[ "$STATUS" == *PASS* ]]; then
                  ((TOTAL_PASS+=1))
                elif [[ "$STATUS" == *Unstable* ]]; then
                  ((TOTAL_UNSTABLE+=1))
                else
                  ((TOTAL_FAIL+=1))
                fi
              fi
            done

            LABELS="$LABELS'$BUILD',"
            PASS_COUNTS="$PASS_COUNTS$TOTAL_PASS,"
            FAIL_COUNTS="$FAIL_COUNTS$TOTAL_FAIL,"
            UNSTABLE_COUNTS="$UNSTABLE_COUNTS$TOTAL_UNSTABLE,"

            echo "<li><a href='${BUILD}/ubuntu-latest/'>Build_Ubuntu #${BUILD}</a> / <a href='${BUILD}/windows-latest/'>Build_Windows #${BUILD}</a></li>" >> "$SITE/index.html"
          done

          echo "</ul>
          <script>
          const ctx = document.getElementById('trendChart').getContext('2d');
          new Chart(ctx,{
            type:'line',
            data:{
              labels:[${LABELS%,}],
              datasets:[
                {label:'PASS', data:[${PASS_COUNTS%,}], borderColor:'green', fill:false},
                {label:'FAIL', data:[${FAIL_COUNTS%,}], borderColor:'red', fill:false},
                {label:'UNSTABLE', data:[${UNSTABLE_COUNTS%,}], borderColor:'orange', fill:false}
              ]
            },
            options:{responsive:true, plugins:{legend:{position:'top'}}, scales:{y:{beginAtZero:true, stepSize:1}}}
          });
          </script>
          <hr><p><em>Generated automatically on $NOW</em></p></body></html>" >> "$SITE/index.html"

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.SITE_DIR }}

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Upload Allure History Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: ${{ env.SITE_DIR }}
          retention-days: 10

      - name: Add Workflow Summary (Badges)
        run: |
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          BASE_URL="${PAGE_URL%/}"
          TEST_STATUS=${{ needs.test.outputs.test_outcome }}

          if [[ "$TEST_STATUS" == "FAIL" ]]; then
            STATUS_ICON="❌"
            STATUS_TEXT="Failed (setup/config error)"
          elif [[ "$TEST_STATUS" == "UNSTABLE" ]]; then
            STATUS_ICON="⚠️"
            STATUS_TEXT="Unstable (some tests failed)"
          else
            STATUS_ICON="✅"
            STATUS_TEXT="All tests passed"
          fi

          echo "### 🤖 Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest_Build-blue)](${BASE_URL}/latest/ubuntu-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest_Build-blue)](${BASE_URL}/latest/windows-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](${BASE_URL}/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build #${{ github.run_number }} | Status: $STATUS_ICON $STATUS_TEXT" >> $GITHUB_STEP_SUMMARY
