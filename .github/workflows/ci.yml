name: ü§ñ Robotics BDD Simulation CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

env:
  ALLURE_VERSION: 2.29.0
  SITE_DIR: site

jobs:
  test:
    name: üß™ Run Tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    outputs:
      test_outcome: ${{ steps.outcome.outputs.result }}
      build_number: ${{ github.run_number }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Build Docker image (Linux only)
        if: matrix.os == 'ubuntu-latest'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: robotics-bdd:ci-build
          load: true

      - name: Run tests with Allure
        id: run_tests
        shell: bash
        run: |
          mkdir -p allure-results
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "üê≥ Running tests in Docker..."
            docker run --rm -v $PWD:/workspace -w /workspace robotics-bdd:ci-build \
              pytest -v --alluredir=allure-results
            EXIT_CODE=$?
          else
            echo "ü™ü Running tests on Windows..."
            pytest -v --alluredir=allure-results
            EXIT_CODE=$?
          fi
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT

      - name: Generate Allure report
        run: |
          wget -q https://github.com/allure-framework/allure2/releases/download/${ALLURE_VERSION}/allure-${ALLURE_VERSION}.tgz
          tar -xzf allure-${ALLURE_VERSION}.tgz
          mv allure-${ALLURE_VERSION} allure
          ./allure/bin/allure generate allure-results --clean -o allure-report

      - name: Determine overall outcome
        id: outcome
        run: |
          CODE=${{ steps.run_tests.outputs.exit_code }}
          if [ "$CODE" -eq 0 ]; then
            echo "result=PASS" >> $GITHUB_OUTPUT
          elif [ "$CODE" -gt 0 ]; then
            echo "result=UNSTABLE" >> $GITHUB_OUTPUT
          else
            echo "result=FAIL" >> $GITHUB_OUTPUT
          fi

      - name: Upload Allure report artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ matrix.os }}
          path: allure-report/

  report:
    name: üìä Generate Dashboard & Deploy
    runs-on: ubuntu-latest
    needs: test
    env:
      SITE_DIR: site

    steps:
      - uses: actions/checkout@v4

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          path: allure-downloads

      - name: Restore previously deployed site (keep old builds)
        run: |
          mkdir -p previous
          gh run download --name "allure-history" --dir previous || true
          if [ -d previous/${SITE_DIR}/builds ]; then
            echo "‚ôªÔ∏è Restoring previous build history..."
            mkdir -p ${SITE_DIR}/builds
            cp -r previous/${SITE_DIR}/builds/* ${SITE_DIR}/builds/ || true
          else
            echo "‚ö†Ô∏è No previous site found ‚Äî starting fresh."
          fi

      - name: Merge new build reports
        run: |
          BUILD=${{ needs.test.outputs.build_number }}
          mkdir -p ${SITE_DIR}/builds/${BUILD}
          for OS_DIR in allure-downloads/*; do
            OS_NAME=$(basename "$OS_DIR" | sed 's/allure-report-//')
            mkdir -p "${SITE_DIR}/builds/${BUILD}/${OS_NAME}"
            cp -r "$OS_DIR"/* "${SITE_DIR}/builds/${BUILD}/${OS_NAME}/"
          done
          rm -rf ${SITE_DIR}/latest
          cp -r ${SITE_DIR}/builds/${BUILD} ${SITE_DIR}/latest

      - name: Generate index.html (history + trend)
        run: |
          mkdir -p ${SITE_DIR}
          INDEX=${SITE_DIR}/index.html
          NOW=$(TZ='America/Los_Angeles' date)
          echo "<html><head><title>ü§ñ Robotics BDD Dashboard</title>
          <script src='https://cdn.jsdelivr.net/npm/chart.js'></script>
          <style>
          body{font-family:sans-serif;margin:20px;}
          a{color:#0366d6;text-decoration:none;}
          a:hover{text-decoration:underline;}
          </style></head><body>
          <h1>ü§ñ Robotics BDD Simulation CI/CD</h1>
          <h2>üìä Report History & Trends</h2><hr><ul>" > $INDEX

          LABELS="";PASS="";FAIL="";UNSTABLE=""

          for B in $(find ${SITE_DIR}/builds -mindepth 1 -maxdepth 1 -type d | sort -V); do
            N=$(basename "$B")
            echo "<li>Build #$N ‚Üí" >> $INDEX
            for O in $(ls "$B"); do
              echo " <a href='builds/$N/$O/index.html'>$O Report</a>" >> $INDEX
            done
            echo "</li>" >> $INDEX

            STATUS_FILE="$B/status.txt"
            STATUS="UNSTABLE"
            if grep -q "PASS" "$STATUS_FILE" 2>/dev/null; then STATUS="PASS"; fi
            if grep -q "FAIL" "$STATUS_FILE" 2>/dev/null; then STATUS="FAIL"; fi

            LABELS="$LABELS'$N',"
            if [ "$STATUS" == "PASS" ]; then
              PASS="$PASS 1,"; FAIL="$FAIL 0,"; UNSTABLE="$UNSTABLE 0,"
            elif [ "$STATUS" == "FAIL" ]; then
              PASS="$PASS 0,"; FAIL="$FAIL 1,"; UNSTABLE="$UNSTABLE 0,"
            else
              PASS="$PASS 0,"; FAIL="$FAIL 0,"; UNSTABLE="$UNSTABLE 1,"
            fi
          done

          echo "</ul><canvas id='trend' width='900' height='400'></canvas>
          <script>
          const ctx=document.getElementById('trend').getContext('2d');
          new Chart(ctx,{
            type:'line',
            data:{
              labels:[$LABELS],
              datasets:[
                {label:'PASS',data:[$PASS],borderColor:'green',fill:false},
                {label:'FAIL',data:[$FAIL],borderColor:'red',fill:false},
                {label:'UNSTABLE',data:[$UNSTABLE],borderColor:'orange',fill:false}
              ]},
            options:{responsive:true,plugins:{legend:{position:'top'}},scales:{y:{beginAtZero:true}}}});
          </script>
          <hr><p><em>Generated: $NOW</em></p></body></html>" >> $INDEX

      - name: Upload artifact for GitHub Pages (Source: GitHub Actions)
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.SITE_DIR }}

      - name: Deploy Allure Dashboard
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Save history for next run
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: ${{ env.SITE_DIR }}
          retention-days: 10

      - name: Add Workflow Summary (badges)
        run: |
          STATUS=${{ needs.test.outputs.test_outcome }}
          if [[ "$STATUS" == "PASS" ]]; then ICON="‚úÖ"; TEXT="Pass (Everything succeeded)"; fi
          if [[ "$STATUS" == "UNSTABLE" ]]; then ICON="‚ö†Ô∏è"; TEXT="Unstable (Some tests failed)"; fi
          if [[ "$STATUS" == "FAIL" ]]; then ICON="‚ùå"; TEXT="Fail (Setup/config/env issue)"; fi

          echo "### ü§ñ Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "Build #${{ github.run_number }} | $ICON $TEXT" >> $GITHUB_STEP_SUMMARY
          echo "[üìä View Report Dashboard](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
