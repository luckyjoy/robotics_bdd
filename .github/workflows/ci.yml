name: Robotics BDD CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

env:
  ALLURE_VERSION: 2.29.0
  SITE_DIR: site

jobs:
  # ===================================================================
  # JOB 1: RUN TESTS ON LINUX (DOCKER) & WINDOWS (PYTEST)
  # ===================================================================
  test:
    name: Run tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    outputs:
      test_outcome: ${{ steps.run_tests.outputs.test_outcome }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker Image (Linux only)
        if: matrix.os == 'ubuntu-latest'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: robotics-bdd:ci-build
          load: true

      - name: Run tests & Determine Outcome
        id: run_tests
        shell: bash
        run: |
          set +e
          OS_NAME=${{ matrix.os }}
          RESULTS_DIR="allure-results/$OS_NAME"
          mkdir -p "$RESULTS_DIR"

          # (Requirement 2) Run tests differently based on OS
          if [[ "$OS_NAME" == "ubuntu-latest" ]]; then
            echo "🐳 Running tests in Docker..."
            docker run --rm -v $PWD:/workspace -w /workspace robotics-bdd:ci-build \
              pytest -m sensors --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          else
            echo "🪟 Running tests directly on Windows..."
            pytest -m sensors --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          fi

          # (Requirement 3) Set job outcome based on test results
          if [ ! -d "$RESULTS_DIR" ] || [ -z "$(find $RESULTS_DIR -type f -name '*.json' 2>/dev/null)" ]; then
            echo "❌ No Allure results found — setup or configuration failure."
            echo "test_outcome=FAIL" >> $GITHUB_OUTPUT
            exit 1 # Fail the step if results are missing
          fi

          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "⚠️ Some tests failed (pytest exit code $TEST_EXIT_CODE)."
            echo "test_outcome=UNSTABLE" >> $GITHUB_OUTPUT
          else
            echo "✅ All tests passed successfully."
            echo "test_outcome=PASS" >> $GITHUB_OUTPUT
          fi
          # Do not fail the step for test failures, so the report job always runs
          exit 0

      - name: Upload Allure Results Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results/${{ matrix.os }}

  # ===================================================================
  # JOB 2: GENERATE & DEPLOY ALLURE REPORT
  # ===================================================================
  report:
    name: Generate Allure Reports & Deploy
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download previous site (for history)
        uses: actions/checkout@v4
        with:
          ref: gh-pages # Branch where GitHub Pages deploys
          path: previous-site
        continue-on-error: true # Don't fail if the branch doesn't exist yet

      # (Requirement 6) Fix: Restore ENTIRE previous site to find all build folders
      - name: Restore Allure History
        run: |
          mkdir -p "${{ env.SITE_DIR }}"
          if [ -d "previous-site" ] && [ "$(ls -A previous-site)" ]; then
            echo "♻️ Restoring previous build site to preserve history..."
            cp -r previous-site/* "${{ env.SITE_DIR }}/"
          else
            echo "No previous site found. A new history will be created."
          fi

      - name: Download Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/${{ env.ALLURE_VERSION }}/allure-${{ env.ALLURE_VERSION }}.tgz
          tar -xzf allure-${{ env.ALLURE_VERSION }}.tgz
          mv allure-${{ env.ALLURE_VERSION }} allure-commandline
          echo "$(pwd)/allure-commandline/bin" >> $GITHUB_PATH

      - name: Download Allure Artifacts
        uses: actions/download-artifact@v4
        with:
          path: allure-results

      - name: Generate Allure Reports
        shell: bash
        run: |
          SITE_DIR="${{ env.SITE_DIR }}"
          BUILD_NUMBER=${{ github.run_number }}
          mkdir -p "$SITE_DIR/latest"

          for OS in ubuntu-latest windows-latest; do
            RESULTS_DIR="allure-results/allure-results-$OS"
            REPORT_DIR_BUILD="$SITE_DIR/$BUILD_NUMBER/$OS"
            REPORT_DIR_LATEST="$SITE_DIR/latest/$OS"
            mkdir -p "$RESULTS_DIR" "$REPORT_DIR_BUILD" "$REPORT_DIR_LATEST"

            # (Requirement 5) Fix: Copy history from restored site to generate trends
            if [ -d "$SITE_DIR/latest/$OS/history" ]; then
              mkdir -p "$RESULTS_DIR/history"
              echo "♻️ Copying history for $OS to generate new trend chart..."
              cp -r "$SITE_DIR/latest/$OS/history/"* "$RESULTS_DIR/history/"
            fi

            # Add environment and executor info to the report
            if [ "$OS" == "ubuntu-latest" ]; then
              cp supports/ubuntu.properties "$RESULTS_DIR/environment.properties" 2>/dev/null || true
            else
              cp supports/windows.properties "$RESULTS_DIR/environment.properties" 2>/dev/null || true
            fi
            
            REPO_NAME="${GITHUB_REPOSITORY##*/}"
            echo "{\"name\":\"$OS\",\"type\":\"GitHub Actions\",\"url\":\"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\",\"reportUrl\":\"https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/latest/$OS/\",\"buildOrder\":\"${BUILD_NUMBER}\",\"buildName\":\"Build ${BUILD_NUMBER} ($OS)\",\"buildUrl\":\"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\"}" > "$RESULTS_DIR/executor.json"

            allure generate "$RESULTS_DIR" -o "$REPORT_DIR_BUILD" --clean
            cp -r "$REPORT_DIR_BUILD"/* "$REPORT_DIR_LATEST/"
          done

      - name: Rebuild History Index Page
        shell: bash
        run: |
          SITE_DIR="${{ env.SITE_DIR }}"
          echo "<html><head><title>Allure Reports History</title>" > "$SITE_DIR/index.html"
          echo "<style>body{font-family:sans-serif;margin:40px;} h1,h2{border-bottom:1px solid #ccc;padding-bottom:5px;} ul{list-style:none;padding:0;} li{margin:10px 0;}</style>" >> "$SITE_DIR/index.html"
          echo "</head><body><h1>🤖 Robotics BDD Simulation CI/CD</h1>" >> "$SITE_DIR/index.html"
          echo "<h2>Latest Reports</h2><ul>" >> "$SITE_DIR/index.html"
          echo "<li><a href='latest/ubuntu-latest/'>Latest Report (Ubuntu)</a></li>" >> "$SITE_DIR/index.html"
          echo "<li><a href='latest/windows-latest/'>Latest Report (Windows)</a></li>" >> "$SITE_DIR/index.html"
          echo "</ul><h2>Report History</h2><ul>" >> "$SITE_DIR/index.html"
          
          # Find all numbered build directories and list them, newest first
          find "$SITE_DIR" -mindepth 1 -maxdepth 1 -type d -printf "%f\n" | grep -E '^[0-9]+$' | sort -nr | while read BUILD; do
            echo "<li><b>Build #$BUILD</b> &rarr; <a href='${BUILD}/ubuntu-latest/'>Ubuntu Report</a> / <a href='${BUILD}/windows-latest/'>Windows Report</a></li>" >> "$SITE_DIR/index.html"
          done
          
          echo "</ul></body></html>" >> "$SITE_DIR/index.html"

      # (Requirement 1) Use GitHub Actions to build and deploy the report artifact
      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.SITE_DIR }}

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Add Workflow Summary (Badges)
        run: |
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          BASE_URL="${PAGE_URL%/}"
          TEST_STATUS=${{ needs.test.outputs.test_outcome }}

          if [[ "$TEST_STATUS" == "FAIL" ]]; then
            STATUS_ICON="❌"
            STATUS_TEXT="Failed (setup/config error)"
          elif [[ "$TEST_STATUS" == "UNSTABLE" ]]; then
            STATUS_ICON="⚠️"
            STATUS_TEXT="Unstable (some tests failed)"
          else
            STATUS_ICON="✅"
            STATUS_TEXT="All tests passed"
          fi

          echo "### 🤖 Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest_Build-blue)](${BASE_URL}/latest/ubuntu-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest_Build-blue)](${BASE_URL}/latest/windows-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](${BASE_URL}/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build #${{ github.run_number }} | Status: $STATUS_ICON $STATUS_TEXT" >> $GITHUB_STEP_SUMMARY
