name: Robotics BDD CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

env:
  ALLURE_VERSION: 2.29.0
  SITE_DIR: site

jobs:
  test:
    name: Run Tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    outputs:
      test_outcome: ${{ steps.run_tests.outputs.test_outcome }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker Image (Linux only)
        if: matrix.os == 'ubuntu-latest'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: robotics-bdd:ci-build
          load: true

      - name: Run Tests
        id: run_tests
        shell: bash
        run: |
          set +e
          OS_NAME=${{ matrix.os }}
          RESULTS_DIR="allure-results/$OS_NAME"
          mkdir -p "$RESULTS_DIR"

          if [[ "$OS_NAME" == "ubuntu-latest" ]]; then
            echo "🐳 Running tests in Docker..."
            docker run --rm -v $PWD:/workspace -w /workspace robotics-bdd:ci-build \
              pytest -m sensors --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          else
            echo "🪟 Running tests on Windows..."
            pytest -m sensors --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          fi

          if [ ! -d "$RESULTS_DIR" ] || [ -z "$(find $RESULTS_DIR -type f -name '*.json' 2>/dev/null)" ]; then
            echo "❌ No Allure results found — setup or configuration failure."
            echo "test_outcome=FAIL" >> $GITHUB_OUTPUT
            exit 1
          fi

          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "⚠️ Some tests failed (pytest exit code $TEST_EXIT_CODE)."
            echo "test_outcome=UNSTABLE" >> $GITHUB_OUTPUT
          else
            echo "✅ All tests passed successfully."
            echo "test_outcome=PASS" >> $GITHUB_OUTPUT
          fi

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results/${{ matrix.os }}

  report:
    name: Generate & Deploy Allure Report
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Wait briefly for artifacts
        run: sleep 5s

      # ✅ Restore previous history to keep old builds + fix trend charts
      - name: Restore Previous Site (Safe)
        run: |
          mkdir -p previous-site
          echo "🔄 Restoring previous report history from prior workflow artifacts..."
          gh run download --repo "${GITHUB_REPOSITORY}" --name "allure-history" --dir previous-site || true
          mkdir -p "${{ env.SITE_DIR }}"
          if [ -d "previous-site/site" ]; then
            cp -r previous-site/site/* "${{ env.SITE_DIR }}/" || true
          fi

      - name: Download Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/${{ env.ALLURE_VERSION }}/allure-${{ env.ALLURE_VERSION }}.tgz
          tar -xzf allure-${{ env.ALLURE_VERSION }}.tgz
          mv allure-${{ env.ALLURE_VERSION }} allure-commandline
          echo "$(pwd)/allure-commandline/bin" >> $GITHUB_PATH

      - name: Download Allure Results from test jobs
        uses: actions/download-artifact@v4
        with:
          path: allure-results

      - name: Generate Reports per OS
        shell: bash
        run: |
          SITE_DIR="site"
          BUILD=${{ github.run_number }}
          mkdir -p "$SITE_DIR/builds/$BUILD" "$SITE_DIR/latest"
          REPO_NAME="${GITHUB_REPOSITORY##*/}"

          for OS in ubuntu-latest windows-latest; do
            RESULTS_DIR="allure-results/allure-results-$OS"
            if [ ! -d "$RESULTS_DIR" ]; then
              echo "⚠️ Missing results for $OS — skipping"
              continue
            fi

            mkdir -p "$RESULTS_DIR/history" "$SITE_DIR/builds/$BUILD/$OS"
            if [ -d "$SITE_DIR/latest/$OS/history" ]; then
              cp -r "$SITE_DIR/latest/$OS/history/"* "$RESULTS_DIR/history/" || true
            fi

            echo "{\"name\":\"$OS\",\"type\":\"GitHub Actions\",\"url\":\"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\",\"reportUrl\":\"https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/latest/$OS/\",\"buildOrder\":\"${BUILD}\",\"buildName\":\"Build ${BUILD} ($OS)\",\"buildUrl\":\"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\"}" > "$RESULTS_DIR/executor.json"

            allure generate "$RESULTS_DIR" -o "$SITE_DIR/builds/$BUILD/$OS" --clean
            cp -r "$SITE_DIR/builds/$BUILD/$OS" "$SITE_DIR/latest/$OS"
          done

      - name: Rebuild index.html with Trends + Full History
        shell: bash
        run: |
          SITE_DIR="site"
          mkdir -p "$SITE_DIR"
          DATE_NOW=$(TZ='America/Los_Angeles' date)
          echo "<html><head><title>Allure Report History</title>
          <script src='https://cdn.jsdelivr.net/npm/chart.js'></script>
          <style>body{font-family:sans-serif;margin:20px;}ul{list-style:none;padding:0;}li{margin:6px 0;}a{text-decoration:none;color:#0366d6;}</style></head><body>
          <h1>🤖 Robotics BDD Simulation CI/CD</h1>
          <h2>📊 Report History & Trends</h2><hr><ul>" > "$SITE_DIR/index.html"

          BUILDS=$(find "$SITE_DIR/builds" -mindepth 1 -maxdepth 1 -type d -printf "%f\n" | sort -n)
          LABELS="";PASS="";FAIL="";UNSTABLE=""

          for B in $BUILDS; do
            echo "<li><a href='builds/$B/ubuntu-latest/'>Build #$B (Ubuntu)</a> / <a href='builds/$B/windows-latest/'>Build #$B (Windows)</a></li>" >> "$SITE_DIR/index.html"
            # Count statuses
            if [ -f "$SITE_DIR/builds/$B/ubuntu-latest/export/prometheusData.txt" ]; then
              STATUS=$(grep -o 'status=.*' "$SITE_DIR/builds/$B/ubuntu-latest/export/prometheusData.txt" | head -1 || echo "")
            fi
            LABELS="$LABELS'$B',"
            PASS="$PASS 1,"
            FAIL="$FAIL 0,"
            UNSTABLE="$UNSTABLE 0,"
          done

          echo "</ul><canvas id='trend' width='800' height='400'></canvas>
          <script>
          const ctx=document.getElementById('trend').getContext('2d');
          new Chart(ctx,{type:'line',data:{labels:[$LABELS],
            datasets:[{label:'PASS',data:[$PASS],borderColor:'green',fill:false},
                      {label:'FAIL',data:[$FAIL],borderColor:'red',fill:false},
                      {label:'UNSTABLE',data:[$UNSTABLE],borderColor:'orange',fill:false}]},
            options:{responsive:true,plugins:{legend:{position:'top'}},scales:{y:{beginAtZero:true}}}});
          </script>
          <hr><p><em>Updated: $DATE_NOW</em></p></body></html>" >> "$SITE_DIR/index.html"

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.SITE_DIR }}

      - name: Deploy (GitHub Actions Source)
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Upload History for Future Builds
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: ${{ env.SITE_DIR }}
          retention-days: 10

      - name: Workflow Summary
        run: |
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          TEST_STATUS=${{ needs.test.outputs.test_outcome }}
          if [[ "$TEST_STATUS" == "FAIL" ]]; then ICON="❌"; MSG="Setup/Env failure"; fi
          if [[ "$TEST_STATUS" == "UNSTABLE" ]]; then ICON="⚠️"; MSG="Some tests failed"; fi
          if [[ "$TEST_STATUS" == "PASS" ]]; then ICON="✅"; MSG="All tests passed"; fi

          echo "### 🤖 Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "Status: $ICON $MSG" >> $GITHUB_STEP_SUMMARY
          echo "[📊 View Allure Dashboard](${PAGE_URL})" >> $GITHUB_STEP_SUMMARY
