name: CI - Robotics BDD Reports

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build and Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Allure CLI
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            echo "Installing Allure via Chocolatey..."
            choco install allure-commandline -y
          else
            echo "Installing Allure via npm..."
            sudo apt-get update
            sudo apt-get install -y default-jre
            npm install -g allure-commandline --save-dev
          fi

      - name: Run tests (placeholder)
        run: |
          mkdir -p allure-results
          echo "Dummy results for $env:RUNNER_OS" > allure-results/sample.txt
        shell: pwsh

      - name: Generate Allure Report
        run: |
          mkdir -p site/${{ matrix.os }}
          allure generate allure-results -o site/${{ matrix.os }} --clean
          date '+%Y-%m-%d %H:%M:%S' > site/${{ matrix.os }}/build-info.txt
        shell: bash

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-report
          path: site/${{ matrix.os }}

  deploy:
    name: Deploy Allure Reports to GitHub Pages
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: site

      - name: Move artifacts into latest structure
        run: |
          mkdir -p site/latest
          mv site/ubuntu-latest-report site/latest/ubuntu-latest || true
          mv site/windows-latest-report site/latest/windows-latest || true

      - name: Rebuild index.html
        shell: bash
        run: |
          set -Eeuo pipefail
          SITE_DIR="site"
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          BASE_URL="https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}"

          mkdir -p "$SITE_DIR"
          : > "$SITE_DIR/index.html"

          {
            echo '<!doctype html>'
            echo '<html lang="en">'
            echo '<head>'
            echo '  <meta charset="utf-8">'
            echo '  <title>Allure Reports - Robotics BDD</title>'
            echo '  <meta name="viewport" content="width=device-width, initial-scale=1">'
            echo '  <style>'
            echo '    body{font-family:Inter,system-ui,-apple-system,"Segoe UI",Roboto,Arial,sans-serif;line-height:1.45;margin:24px}'
            echo '    a{color:#0a66c2;text-decoration:none}'
            echo '    a:hover{text-decoration:underline}'
            echo '    ul{margin:0;padding:0;list-style:disc inside}'
            echo '    hr{margin:16px 0}'
            echo '    .muted{color:#6b7280}'
            echo '  </style>'
            echo '</head>'
            echo '<body>'
            echo '  <h1>Robotics BDD Test Reports</h1>'
            echo '  <hr>'
            echo '  <h2>Latest Reports</h2>'
            echo '  <ul>'
          } >> "$SITE_DIR/index.html"

          for OS in ubuntu-latest windows-latest; do
            if [ -d "$SITE_DIR/latest/$OS" ]; then
              TS=$(cat "$SITE_DIR/latest/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
              printf '    <li><a href="%s/latest/%s/index.html">Latest Report (%s)</a> - Last run: %s</li>\n' "$BASE_URL" "$OS" "$OS" "$TS" >> "$SITE_DIR/index.html"
            fi
          done

          {
            echo '  </ul>'
            echo '  <hr>'
            echo '  <h2>All Historical Builds</h2>'
            echo '  <ul>'
          } >> "$SITE_DIR/index.html"

          mapfile -t HIST_BUILDS < <(
            find "$SITE_DIR" -maxdepth 1 -type d -regextype posix-egrep -regex ".*/[0-9]+$" -printf "%f\n" | sort -nr
          )

          if [ "${#HIST_BUILDS[@]}" -eq 0 ]; then
            echo '    <p class="muted">No historical builds found.</p>' >> "$SITE_DIR/index.html"
          else
            for BUILD in "${HIST_BUILDS[@]}"; do
              for OS in ubuntu-latest windows-latest; do
                if [ -d "$SITE_DIR/$BUILD/$OS" ]; then
                  TS=$(cat "$SITE_DIR/$BUILD/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
                  printf '    <li><a href="%s/%s/%s/index.html">Build #%s (%s)</a> - %s</li>\n' "$BASE_URL" "$BUILD" "$OS" "$BUILD" "$OS" "$TS" >> "$SITE_DIR/index.html"
                fi
              done
            done
          fi

          {
            echo '  </ul>'
            echo '</body>'
            echo '</html>'
          } >> "$SITE_DIR/index.html"

          touch "$SITE_DIR/.nojekyll"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: site

      - name: ðŸ“˜ Deploy Summary
        run: |
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          BASE_URL="https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}"

          echo "## Robotics BDD Simulation CI/CD Report Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [Ubuntu Latest Report](${BASE_URL}/latest/ubuntu-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "- [Windows Latest Report](${BASE_URL}/latest/windows-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "- [Report History](${BASE_URL}/index.html)" >> $GITHUB_STEP_SUMMARY
