name: 🤖 Robotics BDD Simulation CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  SITE_DIR: reports/allure-site

jobs:
  test-linux:
    name: 🐧 Ubuntu (Docker + Allure)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build & Run Docker Tests
        run: |
          docker build -t robotics-bdd .
          mkdir -p reports/allure-results
          docker run --rm \
            -v ${{ github.workspace }}/reports:/app/reports \
            robotics-bdd bash -c "
              pytest --alluredir=/app/reports/allure-results || echo 'TEST_FAILED' > /tmp/test_status
            "

      - name: Determine build status
        id: linux_status
        run: |
          if [ -f /tmp/test_status ]; then
            echo "status=UNSTABLE" >> $GITHUB_OUTPUT
          else
            echo "status=PASS" >> $GITHUB_OUTPUT
          fi

      - name: Generate Allure Report
        run: |
          allure generate reports/allure-results --clean -o reports/allure-report || true

      - name: Upload Allure Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-ubuntu
          path: reports/allure-report

  test-windows:
    name: 🪟 Windows (Pytest + Allure)
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install allure-pytest

      - name: Run tests
        run: |
          pytest --alluredir=allure-results || echo "TEST_FAILED" > test_status.txt

      - name: Determine build status
        id: win_status
        run: |
          if (Test-Path test_status.txt) {
            echo "status=UNSTABLE" >> $env:GITHUB_OUTPUT
          } else {
            echo "status=PASS" >> $env:GITHUB_OUTPUT
          }

      - name: Generate Allure Report
        run: |
          allure generate allure-results --clean -o allure-report || exit 0

      - name: Upload Allure Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-windows
          path: allure-report

  deploy:
    name: 📊 Merge History + Deploy Site
    needs: [test-linux, test-windows]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout main
        uses: actions/checkout@v4

      - name: Download Allure Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./reports

      - name: Restore Allure History
        uses: actions/cache@v4
        with:
          path: ./reports/allure-history
          key: allure-history
          restore-keys: allure-history

      - name: Merge reports and preserve trend
        run: |
          mkdir -p $SITE_DIR/latest
          mkdir -p reports/allure-results/history
          if [ -d "./reports/allure-history" ]; then
            cp -r ./reports/allure-history/* ./reports/allure-results/history/ || true
          fi
          allure generate ./reports/allure-results --clean -o $SITE_DIR/latest/combined
          cp -r $SITE_DIR/latest/combined/history ./reports/allure-history || true

      - name: Generate Report Index (with History)
        run: |
          BUILD_NO=${{ github.run_number }}
          NOW=$(date +"%a %b %d %T %Z %Y")
          mkdir -p $SITE_DIR
          INDEX="$SITE_DIR/index.html"
          echo "🤖 Robotics BDD Simulation CI/CD Build History" > $INDEX
          echo "" >> $INDEX
          echo "🧩 Latest Allure Reports" >> $INDEX
          echo "    Latest Report (ubuntu-latest) - Build #$BUILD_NO - $NOW" >> $INDEX
          echo "    Latest Report (windows-latest) - Build #$BUILD_NO - $NOW" >> $INDEX
          echo "" >> $INDEX
          echo "📊 Report History" >> $INDEX
          echo "" >> $INDEX

          mkdir -p build_history
          echo "$BUILD_NO|$NOW" >> build_history/build_log.txt
          tac build_history/build_log.txt | while read line; do
            num=$(echo "$line" | cut -d"|" -f1)
            time=$(echo "$line" | cut -d"|" -f2-)
            echo "    Build #$num - $time" >> $INDEX
          done

      # ✅ Upload Pages Artifact (Source: GitHub Actions)
      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.SITE_DIR }}

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # ✅ Keep site and trend data for next build
      - name: Upload Allure History Artifact (for Next Build)
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: ${{ env.SITE_DIR }}
          retention-days: 14

      - name: Add Workflow Summary (Badges)
        run: |
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          BASE_URL="${PAGE_URL%/}"
          STATUS_ICON="✅"
          STATUS_TEXT="Pass"

          echo "### 🤖 Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest_Build-blue)](${BASE_URL}/latest/ubuntu-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest_Build-blue)](${BASE_URL}/latest/windows-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](${BASE_URL}/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build #${GITHUB_RUN_NUMBER} | Status: $STATUS_ICON $STATUS_TEXT" >> $GITHUB_STEP_SUMMARY
