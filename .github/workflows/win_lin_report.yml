name: Robotics BDD CI/CD

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test-and-report:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    env:
      SITE_DIR: site
      HISTORY_DIR: _history

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      # ------------------------
      # Linux: run Docker container
      # ------------------------
      - name: Run tests in Docker (Linux only)
        if: runner.os == 'Linux'
        run: |
          docker build -t robotics-bdd .
          docker run --rm -v $PWD:/workspace -w /workspace robotics-bdd pytest -v --alluredir=allure-results/ubuntu-latest || echo "❌ Tests failed, but continue"

      # ------------------------
      # Windows: run pytest directly
      # ------------------------
      - name: Run tests (Windows only)
        if: runner.os == 'Windows'
        run: |
          pytest -v --alluredir=allure-results/windows-latest || echo "❌ Tests failed, but continue"

      # ------------------------
      # Ensure Allure CLI on Linux
      # ------------------------
      - name: Install Allure CLI (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip wget openjdk-11-jre
          wget https://github.com/allure-framework/allure2/releases/download/2.27.2/allure-2.27.2.zip
          unzip allure-2.27.2.zip -d /opt/
          sudo ln -s /opt/allure-2.27.2/bin/allure /usr/bin/allure
          allure --version

      # ------------------------
      # Install Allure CLI (Windows only)
      # ------------------------
      - name: Install Allure CLI (Windows only)
        if: runner.os == 'Windows'
        run: |
          pip install allure-pytest-binary
          allure --version

      # ------------------------
      # Generate Allure Reports (if results exist)
      # ------------------------
      - name: Generate Allure Report
        run: |
          OS_NAME=${{ matrix.os }}
          RESULTS_DIR="allure-results/$OS_NAME"

          if [ -d "$RESULTS_DIR" ] && [ "$(ls -A $RESULTS_DIR/*.json 2>/dev/null)" ]; then
            echo "✅ Allure results found for $OS_NAME, generating report..."
            mkdir -p "$SITE_DIR/latest/$OS_NAME"
            
            # Copy previous trend history if exists
            if [ -d "$SITE_DIR/latest/$OS_NAME/history" ]; then
              cp -r "$SITE_DIR/latest/$OS_NAME/history" "$RESULTS_DIR/history"
            fi

            allure generate "$RESULTS_DIR" -o "$SITE_DIR/latest/$OS_NAME" --clean
            allure open "$SITE_DIR/latest/$OS_NAME" --port 0 || echo "Trend & Executors view available"
          else
            echo "❌ No Allure results found for $OS_NAME, skipping report generation."
          fi
        shell: bash

      # ------------------------
      # Disable Jekyll and Upload Pages
      # ------------------------
      - name: Disable Jekyll
        run: touch ${{ env.SITE_DIR }}/.nojekyll

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.SITE_DIR }}

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Add Workflow Summary with Badges
        run: |
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          BASE_URL="${PAGE_URL%/}"
          echo "### 🤖 Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest_Build-blue)](${BASE_URL}/latest/ubuntu-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest_Build-blue)](${BASE_URL}/latest/windows-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](${BASE_URL}/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build #${GITHUB_RUN_NUMBER} | Status: ✅ Tests completed (failed tests will not block report generation)" >> $GITHUB_STEP_SUMMARY
