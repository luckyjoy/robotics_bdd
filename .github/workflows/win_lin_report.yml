name: Robotics BDD CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

env:
  ALLURE_VERSION: 2.29.0
  SITE_DIR: site
  
jobs:
  test:
    name: Run tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    outputs:
      test_outcome: ${{ steps.run_tests.outputs.test_outcome }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker Image
        if: matrix.os == 'ubuntu-latest'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: robotics-bdd:ci-build
          load: true

      - name: Run tests
        id: run_tests
        shell: bash
        run: |
          set +e

          OS_NAME=${{ matrix.os }}
          RESULTS_DIR="allure-results/$OS_NAME"
          rm -rf "$RESULTS_DIR"
          mkdir -p "$RESULTS_DIR"

          if [[ "$OS_NAME" == "ubuntu-latest" ]]; then
            echo "🐳 Running tests in Docker..."
            docker run --rm -v $PWD:/workspace -w /workspace robotics-bdd:ci-build \
              pytest -m sensors --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          else
            echo "🪟 Running tests on Windows..."
            pytest -m sensors --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          fi

          # Detect setup/config/env failure
          if [ ! -d "$RESULTS_DIR" ] || [ -z "$(find $RESULTS_DIR -type f -name '*.json' 2>/dev/null)" ]; then
            echo "❌ No Allure results found — setup or configuration failure."
            echo "test_outcome=FAILED" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Detect pytest failures
          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "⚠️ Some tests failed (pytest exit code $TEST_EXIT_CODE)."
            echo "test_outcome=UNSTABLE" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "✅ All tests passed successfully."
            echo "test_outcome=PASSED" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Copy executor.json
        if: always()
        shell: bash  
        run: |
          SRC_EXECUTOR="supports/executor.json"
          DST_DIR="allure-results/${{ matrix.os }}"
          if [ -f "$SRC_EXECUTOR" ]; then
            cp "$SRC_EXECUTOR" "$DST_DIR/"
          fi

      - name: Upload Allure Results Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results/${{ matrix.os }}

  report:
    name: Generate Allure Report and Deploy
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/${{ env.ALLURE_VERSION }}/allure-${{ env.ALLURE_VERSION }}.tgz
          tar -xzf allure-${{ env.ALLURE_VERSION }}.tgz
          mv allure-${{ env.ALLURE_VERSION }} allure-commandline
          echo "$(pwd)/allure-commandline/bin" >> $GITHUB_PATH

      - name: Download Allure Artifacts
        uses: actions/download-artifact@v4
        with:
          path: allure-results

      - name: Consolidate Artifacts to Target Folders
        shell: bash
        run: |
          mkdir -p final-allure-results
          if [ -d allure-results/allure-results-ubuntu-latest ]; then
            mv allure-results/allure-results-ubuntu-latest final-allure-results/ubuntu-latest
          fi
          if [ -d allure-results/allure-results-windows-latest ]; then
            mv allure-results/allure-results-windows-latest final-allure-results/windows-latest
          fi
          rm -rf allure-results
          mv final-allure-results allure-results

      - name: Determine Combined Test Status
        id: test_status_check
        shell: bash
        run: |
          echo "Upstream status: ${{ needs.test.outputs.test_outcome }}"
          STATUS="${{ needs.test.outputs.test_outcome }}"

          # If Allure results missing, mark as failed
          if [ -z "$(find allure-results -type f -name '*.json' 2>/dev/null)" ]; then
            STATUS="FAILED"
          fi

          echo "status=$STATUS" >> $GITHUB_OUTPUT

      - name: Generate Allure Reports (History & PDT Setup)
        shell: bash
        run: |
          echo "Generating Allure reports..."
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          SITE_DIR="site"
          
          # History Fix: We no longer wipe $SITE_DIR so history can be preserved across subsequent builds
          mkdir -p "$SITE_DIR/latest"

          for OS in ubuntu-latest windows-latest; do
            RESULTS_DIR="allure-results/$OS"
            REPORT_DIR_BUILD="$SITE_DIR/$BUILD_NUMBER/$OS" # FIX: Save to a numbered sub-directory for history
            REPORT_DIR_LATEST="$SITE_DIR/latest/$OS"
            
            mkdir -p "$REPORT_DIR_BUILD"

            # 1. Copy Allure trend history from the previous LATEST report
            if [ -d "$REPORT_DIR_LATEST/history" ]; then
              echo "Copying Allure trend history from $REPORT_DIR_LATEST/history..."
              mkdir -p "$RESULTS_DIR/history"
              cp -r "$REPORT_DIR_LATEST/history"/* "$RESULTS_DIR/history/" || true
            fi

            # 2. Generate the Allure report into the build-numbered directory
            allure generate "$RESULTS_DIR" -o "$REPORT_DIR_BUILD" --clean

            # 3. Add executor.json
            mkdir -p "$REPORT_DIR_BUILD/widgets"
            echo '{"buildOrder":'"$BUILD_NUMBER"', "reportName":"'"$OS Report"'"}' > "$REPORT_DIR_BUILD/widgets/executor.json"
            
            # 4. Copy the newly generated report to the LATEST directory
            mkdir -p "$REPORT_DIR_LATEST"
            cp -r "$REPORT_DIR_BUILD"/* "$REPORT_DIR_LATEST/"
            
            # 5. PDT FIX: Explicitly save UTC time to file for conversion in next step
            echo "$(date -u)" > "$REPORT_DIR_LATEST/build-info.txt"
            echo "$(date -u)" > "$REPORT_DIR_BUILD/build-info.txt" # Also save to the historical copy
            echo "Report generated for $OS in build $BUILD_NUMBER at $REPORT_DIR_BUILD"
          done

      - name: Fix Allure Paths
        shell: bash
        run: |
          for OS in ubuntu-latest windows-latest; do
            # Fix paths in both the latest and build-numbered reports
            for REPORT_DIR in "site/latest/$OS" "site/${GITHUB_RUN_NUMBER}/${OS}"; do
              if [ -f "$REPORT_DIR/index.html" ]; then
                perl -pi -e 's|src="/|src="./|g' "$REPORT_DIR/index.html"
                perl -pi -e 's|href="/|href="./|g' "$REPORT_DIR/index.html"
              fi
            done
          done

      - name: Rebuild index.html (History & PDT Fix)
        shell: bash
        run: |
            SITE_DIR="site"
            
            # --- Get current time for footer in LA time (PDT/PST) ---
            CURRENT_LA_TIME=$(TZ='America/Los_Angeles' date)

            mkdir -p "$SITE_DIR"
            echo "<html><head><title>Allure Reports History</title>
            <style>
            body{font-family:sans-serif;margin:20px;}
            ul{list-style:none;padding:0;}
            li{margin:6px 0;}
            a{text-decoration:none;color:#0366d6;}
            a:hover{text-decoration:underline;}
            </style></head><body>
            <h1>🤖 Robotics BDD Simulation CI/CD Build History</h1>
            <h2>🧩 Latest Allure Reports</h2><hr><ul>" > "$SITE_DIR/index.html"

            # --- Latest Reports ---        
            for OS in ubuntu-latest windows-latest; do
              if [ -d "$SITE_DIR/latest/$OS" ]; then
                TS_UTC=$(cat "$SITE_DIR/latest/$OS/build-info.txt" 2>/dev/null || echo "")
                
                # PDT FIX: Convert UTC time string to LA time string (PDT/PST)
                if [ -n "$TS_UTC" ]; then
                  # Pipe the UTC date through 'TZ' to convert to Los Angeles Timezone
                  TS_DISPLAY=$(date -d "$TS_UTC" -u +'%a %b %d %H:%M:%S UTC %Y' | TZ='America/Los_Angeles' date)
                  if [ -z "$TS_DISPLAY" ]; then
                    TS_DISPLAY=$TS_UTC
                  fi
                else
                  TS_DISPLAY="(no timestamp)"
                fi

                echo "<li><strong><a href='latest/$OS/'>Latest Report ($OS)</a></strong> - Last run: $TS_DISPLAY</li>" >> "$SITE_DIR/index.html"
              else
                echo "<li><strong>$OS:</strong> (No report found)</li>" >> "$SITE_DIR/index.html"
              fi
            done

            # --- Historical Reports ---
            echo "</ul><hr><h2>📊 Report History</h2><ul>" >> "$SITE_DIR/index.html"

            # HISTORY FIX: Find all numbered directories (previous builds)
            BUILDS=$(find "$SITE_DIR" -maxdepth 1 -type d -regex ".*/[0-9]\+" -printf "%f\n" 2>/dev/null | sort -nr)

            if [ -z "$BUILDS" ]; then
              echo "<li>No previous builds found.</li>" >> "$SITE_DIR/index.html"
            else
              for BUILD in $BUILDS; do
                for OS in ubuntu-latest windows-latest; do
                  if [ -d "$SITE_DIR/$BUILD/$OS" ]; then
                    TS_UTC=$(cat "$SITE_DIR/$BUILD/$OS/build-info.txt" 2>/dev/null || echo "")

                    # PDT FIX: Convert UTC time string to LA time string (PDT/PST)
                    if [ -n "$TS_UTC" ]; then
                      TS_DISPLAY=$(date -d "$TS_UTC" -u +'%a %b %d %H:%M:%S UTC %Y' | TZ='America/Los_Angeles' date)
                      if [ -z "$TS_DISPLAY" ]; then
                        TS_DISPLAY=$TS_UTC
                      fi
                    else
                      TS_DISPLAY="(no timestamp)"
                    fi
                    
                    echo "<li><a href='${BUILD}/${OS}/'>Build #${BUILD} ($OS)</a> - ${TS_DISPLAY}</li>" >> "$SITE_DIR/index.html"
                  fi
                done
              done
            fi

            # Use the pre-calculated LA time for the 'Generated automatically on' footer
            echo "</ul><hr><p><em>Generated automatically on $CURRENT_LA_TIME</em></p></body></html>" >> "$SITE_DIR/index.html"

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Add Workflow Summary (Badges)
        run: |
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          BASE_URL="${PAGE_URL%/}"
          TEST_STATUS=${{ steps.test_status_check.outputs.status }}

          if [[ "$TEST_STATUS" == "FAILED" ]]; then
            STATUS_ICON="❌"
            STATUS_TEXT="Failed (setup/config error)"
          elif [[ "$TEST_STATUS" == "UNSTABLE" ]]; then
            STATUS_ICON="⚠️"
            STATUS_TEXT="Unstable (some tests failed)"
          else
            STATUS_ICON="✅"
            STATUS_TEXT="All tests passed"
          fi

          echo "### 🤖 Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest_Build-blue)](${BASE_URL}/latest/ubuntu-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest_Build-blue)](${BASE_URL}/latest/windows-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](${BASE_URL}/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build #${GITHUB_RUN_NUMBER} | Status: $STATUS_ICON $STATUS_TEXT" >> $GITHUB_STEP_SUMMARY