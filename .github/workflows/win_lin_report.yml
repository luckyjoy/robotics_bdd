name: Robotics BDD Simulation CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 7 * * *' # Daily at 07:00 UTC

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  checks: read
  pull-requests: read
  statuses: read
  pages: none
  id-token: none

jobs:
  run-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    permissions:
      contents: write

    outputs:
      proceed: ${{ steps.verify_allure.outputs.proceed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python with dependency caching
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          echo "Installing dependencies from requirements.txt..."
          pip install -r requirements.txt

      - name: Clean previous allure-results
        shell: bash
        run: |
          echo "Cleaning allure-results folder..."
          if [ -d "allure-results" ]; then rm -rf allure-results; fi

      - name: Prepare Allure environment
        shell: bash
        run: |
          echo "Creating Allure directories and environment files for $RUNNER_OS..."
          mkdir -p allure-results
          cp supports/categories.json allure-results/categories.json 2>/dev/null || echo "No categories.json found."

          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "Using Ubuntu environment.properties..."
            cp supports/ubuntu.properties allure-results/environment.properties 2>/dev/null || echo "No Ubuntu environment found."
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "Using Windows environment.properties..."
            cp supports/windows.properties allure-results/environment.properties 2>/dev/null || echo "No Windows environment found."
          fi

          echo "Generating executor.json..."
          cat <<EOF > allure-results/executor.json
          {
            "name": "GitHub Actions - $RUNNER_OS",
            "type": "github",
            "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "buildOrder": ${GITHUB_RUN_NUMBER},
            "buildName": "Build #${GITHUB_RUN_NUMBER} ($RUNNER_OS)",
            "reportName": "Robotics BDD Simulation CI/CD - $RUNNER_OS",
            "buildUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "reportUrl": "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/latest/${RUNNER_OS}/"
          }
          EOF

      - name: Run tests (Docker for Linux, native on Windows)
        id: run_pytest
        continue-on-error: true
        shell: bash
        run: |
          echo "Running tests for $RUNNER_OS..."
          mkdir -p allure-results

          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "Running tests inside Docker container..."
            docker build -t robotics-bdd-sim -f Dockerfile .
            docker run --rm \
              -v $PWD/allure-results:/app/allure-results \
              -v $PWD:/app \
              robotics-bdd-sim \
              bash -c "pytest -m "navigation or sensors or walking" --alluredir=allure-results || echo 'Tests failed, continuing for report generation.'"
          else
            echo "Running pytest natively on Windows..."
            pytest -m "navigation or sensors or walking" --alluredir=allure-results || echo 'Tests failed, continuing for report generation.'
          fi

      - name: Verify Allure Results existence
        id: verify_allure
        shell: bash
        run: |
          echo "Checking for allure-results directory and contents..."
          if [ -d "allure-results" ] && [ "$(ls -A allure-results/*.json 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "Allure results found. Proceeding to report generation."
            echo "proceed=true" >> $GITHUB_OUTPUT
          else
            echo "No Allure results found. Skipping report generation."
            echo "proceed=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Allure Results
        if: steps.verify_allure.outputs.proceed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results
          retention-days: 7

      - name: Mark job as failed if tests failed
        if: steps.run_pytest.outcome == 'failure'
        run: exit 1

  deploy-pages:
    if: always() && needs.run-tests.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    needs: run-tests
    permissions:
      contents: write
    env:
      ALLURE_VERSION: 2.25.0

    steps:
      - name: Checkout repository (Primary branch)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout gh-pages history
        shell: bash
        run: |
          echo "Attempting to clone gh-pages branch to access report history..."
          git clone --depth 1 --branch gh-pages "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}" _history || true

      - name: Download Linux Allure Results
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ubuntu-latest
          path: allure-results/ubuntu-latest

      - name: Download Windows Allure Results
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: allure-results-windows-latest
          path: allure-results/windows-latest

      - name: Cache Allure CLI
        id: cache-allure
        uses: actions/cache@v4
        with:
          path: allure-commandline
          key: ${{ runner.os }}-allure-${{ env.ALLURE_VERSION }}

      - name: Setup Allure CLI
        if: steps.cache-allure.outputs.cache-hit != 'true'
        run: |
          echo "Setting up Allure CLI..."
          curl -L -o allure.tgz "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${{ env.ALLURE_VERSION }}/allure-commandline-${{ env.ALLURE_VERSION }}.tgz"
          mkdir -p allure-commandline
          tar -xzf allure.tgz -C allure-commandline --strip-components 1
      
      - name: Add Allure to PATH
        run: echo "$PWD/allure-commandline/bin" >> $GITHUB_PATH

      - name: Generate Allure Reports
        shell: bash
        run: |
          echo "Generating Allure reports..."
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          SITE_DIR="site"
          HISTORY_DIR="_history"

          rm -rf "$SITE_DIR"
          if [ -d "$HISTORY_DIR" ]; then
              mv "$HISTORY_DIR" "$SITE_DIR"
          fi
          
          mkdir -p "$SITE_DIR/latest"

          for OS in ubuntu-latest windows-latest; do
            RESULTS_DIR="allure-results/$OS"
            HISTORY_SOURCE_DIR="$SITE_DIR/latest/$OS/history"
            REPORT_DIR="allure-report-${BUILD_NUMBER}-${OS}"

            if [ -d "$HISTORY_SOURCE_DIR" ]; then
              echo "Copying Allure trend history from $HISTORY_SOURCE_DIR..."
              cp -r "$HISTORY_SOURCE_DIR" "$RESULTS_DIR/history"
            fi

            allure generate "$RESULTS_DIR" -o "$REPORT_DIR" --clean

            mkdir -p "$SITE_DIR/$BUILD_NUMBER/$OS"
            cp -r "$REPORT_DIR"/* "$SITE_DIR/$BUILD_NUMBER/$OS/"

            mkdir -p "$SITE_DIR/latest/$OS"
            cp -r "$REPORT_DIR"/* "$SITE_DIR/latest/$OS/"

            date -u +"%Y-%m-%d %H:%M:%S UTC" > "$SITE_DIR/$BUILD_NUMBER/$OS/build-info.txt"
            cp "$SITE_DIR/$BUILD_NUMBER/$OS/build-info.txt" "$SITE_DIR/latest/$OS/build-info.txt"
          done

      - name: Rebuild index.html
        shell: bash
        run: |
          SITE_DIR="site"
          REPO="${GITHUB_REPOSITORY##*/}"
          OWNER="${GITHUB_REPOSITORY_OWNER}"

          echo "<html><head><title>Allure Reports History</title>
          <style>
          body{font-family:sans-serif;margin:20px;}
          ul{list-style:none;padding:0;}
          li{margin:6px 0;}
          a{text-decoration:none;color:#0366d6;}
          a:hover{text-decoration:underline;}
          </style></head><body><h1>Allure Reports History</h1><hr><ul>" > "$SITE_DIR/index.html"

          for OS in ubuntu-latest windows-latest; do
            if [ -d "$SITE_DIR/latest/$OS" ]; then
              TS=$(cat "$SITE_DIR/latest/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
              echo "<li><strong><a href='latest/$OS/'>Latest Report ($OS)</a></strong> - Last run: $TS</li>" >> "$SITE_DIR/index.html"
            fi
          done

          echo "</ul><hr><h2>Historical Builds</h2><ul>" >> "$SITE_DIR/index.html"
          BUILDS=$(find "$SITE_DIR" -maxdepth 1 -type d -name "[0-9]*" | xargs -n 1 basename | sort -nr)

          for BUILD in $BUILDS; do
            for OS in ubuntu-latest windows-latest; do
              if [ -d "$SITE_DIR/$BUILD/$OS" ]; then
                TS=$(cat "$SITE_DIR/$BUILD/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
                echo "<li><a href='${BUILD}/${OS}/'>Build #${BUILD} ($OS)</a> - ${TS}</li>" >> "$SITE_DIR/index.html"
              fi
            done
          done

          echo "</ul></body></html>" >> "$SITE_DIR/index.html"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: site
          publish_branch: gh-pages
          commit_message: "Deploy Allure Reports - Build ${{ github.run_number }}"

      - name: Add workflow badges to summary
        run: |
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          OWNER=${GITHUB_REPOSITORY_OWNER}

          echo "### Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest_Build-blue)](https://${OWNER}.github.io/${REPO_NAME}/latest/ubuntu-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest_Build-blue)](https://${OWNER}.github.io/${REPO_NAME}/latest/windows-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](https://${OWNER}.github.io/${REPO_NAME}/)" >> $GITHUB_STEP_SUMMARY
