name: ü§ñ Robotics BDD Simulation CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  ALLURE_VERSION: 2.29.0
  SITE_DIR: site

jobs:
  test:
    name: Run Tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          pip install -r requirements.txt || true
          pip install pytest allure-pytest || true

      - name: Run tests and generate Allure results
        shell: bash
        run: |
          mkdir -p allure-results/${{ matrix.os }}
          if pytest tests/ --alluredir=allure-results/${{ matrix.os }}; then
            echo "TEST_FAILURE=false" >> $GITHUB_ENV
          else
            echo "TEST_FAILURE=true" >> $GITHUB_ENV
          fi
        continue-on-error: true

      - name: Copy executor.json
        if: always()
        shell: bash
        run: |
          SRC_EXECUTOR="supports/executor.json"
          DST_DIR="allure-results/${{ matrix.os }}"
          if [ -f "$SRC_EXECUTOR" ]; then
            cp "$SRC_EXECUTOR" "$DST_DIR/"
          fi

      - name: Upload Allure results artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results/${{ matrix.os }}

  report:
    name: Generate Allure Report and Deploy
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Allure results from all jobs
        uses: actions/download-artifact@v4
        with:
          path: allure-results

      - name: Merge Allure results and generate report
        run: |
          mkdir -p $SITE_DIR
          for OS in ubuntu-latest windows-latest; do
            if [ -d "allure-results/${OS}" ]; then
              mkdir -p "${SITE_DIR}/latest/${OS}"
              # Copy previous history if exists for trend tracking
              if [ -d "${SITE_DIR}/latest/${OS}/history" ]; then
                cp -r "${SITE_DIR}/latest/${OS}/history" "allure-results/${OS}/" || true
              fi
              allure generate "allure-results/${OS}" -o "${SITE_DIR}/latest/${OS}" --clean
              cp -r "${SITE_DIR}/latest/${OS}/history" "${SITE_DIR}/${GITHUB_RUN_NUMBER}/${OS}/" || true
              date > "${SITE_DIR}/latest/${OS}/build-info.txt"
            fi
          done

      - name: Determine build status
        id: build_status
        run: |
          UBUNTU_FAIL=false
          WINDOWS_FAIL=false

          if [ -f allure-results/ubuntu-latest/status.txt ]; then
            grep -q "true" allure-results/ubuntu-latest/status.txt && UBUNTU_FAIL=true
          fi
          if [ -f allure-results/windows-latest/status.txt ]; then
            grep -q "true" allure-results/windows-latest/status.txt && WINDOWS_FAIL=true
          fi

          if [ "$UBUNTU_FAIL" = "true" ] || [ "$WINDOWS_FAIL" = "true" ]; then
            echo "result=UNSTABLE" >> $GITHUB_OUTPUT
          else
            echo "result=PASSED" >> $GITHUB_OUTPUT
          fi

      - name: Generate index.html with trends
        run: |
          echo "<html><head><title>Allure Reports History</title>
          <style>
          body{font-family:sans-serif;margin:20px;}
          ul{list-style:none;padding:0;}
          li{margin:6px 0;}
          a{text-decoration:none;color:#0366d6;}
          a:hover{text-decoration:underline;}
          </style></head><body><h1>Allure Reports History</h1><hr><ul>" > "$SITE_DIR/index.html"

          for OS in ubuntu-latest windows-latest; do
            if [ -d "$SITE_DIR/latest/$OS" ]; then
              TS=$(cat "$SITE_DIR/latest/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
              echo "<li><strong><a href='latest/$OS/'>Latest Report ($OS)</a></strong> - Last run: $TS</li>" >> "$SITE_DIR/index.html"
            fi
          done

          echo "</ul><hr><h2>Historical Builds</h2><ul>" >> "$SITE_DIR/index.html"
          BUILDS=$(find "$SITE_DIR" -maxdepth 1 -type d -name "[0-9]*" | xargs -n 1 basename | sort -nr)
          for BUILD in $BUILDS; do
            for OS in ubuntu-latest windows-latest; do
              if [ -d "$SITE_DIR/$BUILD/$OS" ]; then
                TS=$(cat "$SITE_DIR/$BUILD/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
                echo "<li><a href='${BUILD}/${OS}/'>Build #${BUILD} ($OS)</a> - ${TS}</li>" >> "$SITE_DIR/index.html"
              fi
            done
          done
          echo "</ul></body></html>" >> "$SITE_DIR/index.html"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ env.SITE_DIR }}

      - name: Set final build result
        if: always()
        run: |
          RESULT=${{ steps.build_status.outputs.result }}
          if [ "$RESULT" = "PASSED" ]; then
            echo "‚úÖ All tests passed successfully."
          elif [ "$RESULT" = "UNSTABLE" ]; then
            echo "‚ö†Ô∏è Some tests failed."
          else
            echo "‚ùå Build failed."
            exit 1
          fi