name: ü§ñ Robotics BDD Simulation CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

env:
  ALLURE_VERSION: 2.29.0
  SITE_DIR: site

jobs:
  test:
    name: Run Tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Set up Docker Buildx (Linux only)
        if: matrix.os == 'ubuntu-latest'
        uses: docker/setup-buildx-action@v3

      - name: Install dependencies
        run: |
          pip install -r requirements.txt || true

      - name: Build Docker Image (Linux only)
        if: matrix.os == 'ubuntu-latest'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: robotics-bdd:ci-build
          load: true

      - name: Run tests and prepare results
        shell: bash
        continue-on-error: true
        run: |
          set +e # Do not exit immediately on error
          OS_NAME=${{ matrix.os }}
          RESULTS_DIR="allure-results/$OS_NAME"
          
          echo "üßπ Cleaning up old results..."
          rm -rf "$RESULTS_DIR"
          mkdir -p "$RESULTS_DIR"

          # Run tests based on the OS
          if [[ "$OS_NAME" == "ubuntu-latest" ]]; then
            echo "üê≥ Running tests in Docker..."
            docker run --rm -m navigation "$PWD:/workspace" -w /workspace robotics-bdd:ci-build \
              pytest -m navigation --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          else
            echo "ü™ü Running tests on Windows..."
            pytest  --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          fi

          # Copy executor info
          if [ -f "supports/executor.json" ]; then
            cp "supports/executor.json" "$RESULTS_DIR/"
          fi

          # Determine and save outcome
          if [ ! -d "$RESULTS_DIR" ] || [ -z "$(ls -A $RESULTS_DIR/*.json 2>/dev/null)" ]; then
            echo "FAILED" > "$RESULTS_DIR/outcome.txt"
            echo "::error::Test run failed: No Allure results were generated."
            exit 1 # Fail the step
          elif [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "UNSTABLE" > "$RESULTS_DIR/outcome.txt"
            echo "::warning::Test run unstable: Pytest returned a non-zero exit code."
          else
            echo "PASSED" > "$RESULTS_DIR/outcome.txt"
            echo "Test run passed."
          fi

      - name: Upload Allure results artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results/${{ matrix.os }}


  
  report:
    name: Generate Allure Report and Deploy
    runs-on: ubuntu-latest
    needs: test
    if: always() # Always run this job to generate a report

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Allure results from all jobs
        uses: actions/download-artifact@v4
        with:
          path: allure-results
          # This action downloads artifacts into subdirectories named after the artifact

      - name: Generate separate Allure reports
        run: |
          mkdir -p $SITE_DIR
          for OS in ubuntu-latest windows-latest; do
            SRC_DIR="allure-results/allure-results-${OS}" # Correct source directory path
            
            if [ -d "$SRC_DIR" ]; then
              echo "Processing report for $OS from $SRC_DIR"
              # The rest of your report generation logic can go here
              # For example, running allure generate:
              # allure generate "$SRC_DIR" -o "${SITE_DIR}/latest/${OS}" --clean
            else
              echo "::warning::Result directory for $OS not found at $SRC_DIR."
            fi
          done

      - name: Determine overall build status
        id: build_status
        run: |
          FINAL_STATUS="PASSED" # Assume success unless proven otherwise
          
          for OS in ubuntu-latest windows-latest; do
            # Use the correct path created by the download action
            OUTCOME_FILE="allure-results/allure-results-${OS}/outcome.txt"
            
            if [ ! -f "$OUTCOME_FILE" ]; then
              echo "::error::Outcome file for $OS not found! Marking build as FAILED."
              FINAL_STATUS="FAILED"
              break # A single missing outcome fails the entire build
            fi

            STATUS=$(cat "$OUTCOME_FILE")
            echo "Outcome for $OS: $STATUS"
            
            if [[ "$STATUS" == "FAILED" ]]; then
              FINAL_STATUS="FAILED"
              break # A single hard failure stops evaluation
            elif [[ "$STATUS" == "UNSTABLE" ]]; then
              FINAL_STATUS="UNSTABLE" # Mark as unstable, but continue checking for failures
            fi
          done
          
          echo "Final determined status: $FINAL_STATUS"
          echo "result=$FINAL_STATUS" >> $GITHUB_OUTPUT

      # The 'Deploy to GitHub Pages' and 'Set final build result' steps remain the same
      - name: Deploy to GitHub Pages (placeholder)
        run: echo "Status is ${{ steps.build_status.outputs.result }}. Would deploy now."

      - name: Set final build result
        if: always()
        run: |
          RESULT=${{ steps.build_status.outputs.result }}
          if [ "$RESULT" = "PASSED" ]; then
            echo "‚úÖ All tests passed successfully."
          elif [ "$RESULT" = "UNSTABLE" ]; then
            echo "‚ö†Ô∏è Some tests failed, marking the build as unstable."
            # Exit with 0 so the GitHub Check status is green, but the log shows a warning
          else
            echo "‚ùå Build failed. Check the test execution or report generation logs."
            exit 1
          fi