name: ü§ñ Robotics BDD Simulation CI/CD

on:
  push:
    branches:
      - main

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  run-tests:
    name: Run tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    outputs:
      has_results: ${{ steps.results_check.outputs.has_results }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest pytest-bdd

      - name: Prepare Allure results directory
        run: mkdir -p allure-results/${{ matrix.os }}

      - name: Run Tests (Linux: Docker, Windows: Pytest)
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "üê≥ Running tests inside Docker..."
            docker run --rm \
              -v ${{ github.workspace }}:/app \
              -w /app \
              python:3.11-slim bash -c "
                pip install -r requirements.txt pytest pytest-bdd allure-pytest &&
                pytest -v --alluredir=allure-results/ubuntu-latest || true
              "
          else
            echo "ü™ü Running pytest on Windows host..."
            pytest -v --alluredir=allure-results/windows-latest
            if ($LASTEXITCODE -ne 0) { Write-Host 'Tests failed but continuing...' }
          fi

      - name: Verify Allure Results
        id: results_check
        shell: bash
        run: |
          if [ -z "$(find allure-results/${{ matrix.os }} -type f -name '*.json' 2>/dev/null)" ]; then
            echo "‚ùå No Allure results for ${{ matrix.os }}"
            echo "has_results=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Allure results found for ${{ matrix.os }}"
            echo "has_results=true" >> $GITHUB_OUTPUT
          fi

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results/${{ matrix.os }}

  deploy-allure:
    needs: run-tests
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    env:
      ALLURE_VERSION: 2.29.0
      SITE_DIR: site
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/${ALLURE_VERSION}/allure-${ALLURE_VERSION}.tgz
          tar -xzf allure-${ALLURE_VERSION}.tgz
          sudo mv allure-${ALLURE_VERSION}/bin/allure /usr/local/bin/allure

      - name: Download Allure Artifacts
        uses: actions/download-artifact@v4
        with:
          path: allure-results

      - name: Check if any results exist
        id: check-results
        run: |
          if [ -z "$(find allure-results -type f -name '*.json' 2>/dev/null)" ]; then
            echo "‚ùå No test results found ‚Äî skipping Allure deployment."
            echo "proceed=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Test results detected ‚Äî proceeding with report generation."
            echo "proceed=true" >> $GITHUB_OUTPUT

      - name: Stop if no results
        if: steps.check-results.outputs.proceed == 'false'
        run: exit 0

      - name: Generate Allure Reports
        run: |
          mkdir -p $SITE_DIR/latest
          for OS in ubuntu-latest windows-latest; do
            SRC_DIR="allure-results/$OS"
            DEST_DIR="$SITE_DIR/latest/$OS"
            if [ -d "$SRC_DIR" ] && [ "$(ls -A $SRC_DIR)" ]; then
              allure generate "$SRC_DIR" -o "$DEST_DIR" --clean
              mkdir -p "$DEST_DIR/widgets"
              cp supports/executor.json "$DEST_DIR/widgets/" 2>/dev/null || true
              cp supports/categories.json "$DEST_DIR/widgets/" 2>/dev/null || true
              echo '{"buildOrder":'"$GITHUB_RUN_NUMBER"', "reportName":"'"$OS Report"'"}' > "$DEST_DIR/widgets/executor.json"
            else
              echo "‚ö†Ô∏è No results found for $OS"
            fi
          done

      # --------------------------------------------------------
      # FIX PATHS
      # --------------------------------------------------------
      - name: Fix Allure Paths
        run: |
          for OS in ubuntu-latest windows-latest; do
            REPORT_DIR="$SITE_DIR/latest/$OS"
            if [ -f "$REPORT_DIR/index.html" ]; then
              perl -pi -e 's|src="/|src="./|g' "$REPORT_DIR/index.html"
              perl -pi -e 's|href="/|href="./|g' "$REPORT_DIR/index.html"
            fi
          done

      # --------------------------------------------------------
      # CREATE LANDING PAGE
      # --------------------------------------------------------
      - name: Create Landing Page
        run: |
          mkdir -p $SITE_DIR
          echo "<html><head><title>Allure Reports</title>
          <style>body{font-family:sans-serif;margin:20px;}a{color:#0366d6;text-decoration:none;}a:hover{text-decoration:underline;}</style>
          </head><body><h1>ü§ñ Robotics BDD Simulation CI/CD</h1><hr><ul>" > $SITE_DIR/index.html
          for OS in ubuntu-latest windows-latest; do
            if [ -f "$SITE_DIR/latest/$OS/index.html" ]; then
              echo "<li><a href='latest/$OS/index.html'>Latest Report ($OS)</a></li>" >> $SITE_DIR/index.html
            else
              echo "<li>No report found for $OS</li>" >> $SITE_DIR/index.html
            fi
          done
          echo "</ul><hr><p>Allure Trends & Executor data are available under each report's widgets/history tabs.</p></body></html>" >> $SITE_DIR/index.html

      - name: Disable Jekyll
        run: touch $SITE_DIR/.nojekyll

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Add Workflow Summary (Badges)
        run: |
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          BASE_URL="${PAGE_URL%/}"
          echo "### ü§ñ Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest_Build-blue)](${BASE_URL}/latest/ubuntu-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest_Build-blue)](${BASE_URL}/latest/windows-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](${BASE_URL}/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build #${GITHUB_RUN_NUMBER} | Status: ‚úÖ All tests completed" >> $GITHUB_STEP_SUMMARY
