name: Robotics BDD CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

env:
  ALLURE_VERSION: 2.29.0
  SITE_DIR: site
  RESULTS_DIR: allure-results

jobs:
  test:
    name: Run tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    outputs:
      test_outcome: ${{ steps.run_tests.outputs.test_outcome }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker Image (Linux only)
        if: matrix.os == 'ubuntu-latest'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: robotics-bdd:ci-build
          load: true

      - name: Run tests
        id: run_tests
        shell: bash
        run: |
          set +e
          OS_NAME=${{ matrix.os }}
          RESULTS_DIR="allure-results/$OS_NAME"
          mkdir -p "$RESULTS_DIR"

          if [[ "$OS_NAME" == "ubuntu-latest" ]]; then
            echo "üê≥ Running tests in Docker..."
            docker run --rm -v $PWD:/workspace -w /workspace robotics-bdd:ci-build \
              pytest -v -m navigation --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          else
            echo "ü™ü Running tests on Windows..."
            pytest -v -m navigation --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          fi

          if [ ! -d "$RESULTS_DIR" ] || [ -z "$(find $RESULTS_DIR -type f -name '*.json')" ]; then
            echo "‚ùå No Allure results found ‚Äî setup/configuration failure."
            echo "test_outcome=FAIL" >> $GITHUB_OUTPUT
            exit 1
          fi

          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "‚ö†Ô∏è Some tests failed (pytest exit code $TEST_EXIT_CODE)."
            echo "test_outcome=UNSTABLE" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "‚úÖ All tests passed successfully."
            echo "test_outcome=PASS" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Upload Allure Results Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results/${{ matrix.os }}
          retention-days: 30

  report:
    name: üìä Generate & Deploy Allure Report
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - uses: actions/checkout@v4

      - name: Download Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/${{ env.ALLURE_VERSION }}/allure-${{ env.ALLURE_VERSION }}.tgz
          tar -xzf allure-${{ env.ALLURE_VERSION }}.tgz
          mv allure-${{ env.ALLURE_VERSION }} allure-commandline
          echo "$(pwd)/allure-commandline/bin" >> $GITHUB_PATH

      # --- Download Previous Site for History & Builds ---
      - name: Download Previous Site Artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-history-archive
          path: previous-site
        continue-on-error: true

      # --- Download latest test results from both OSes ---
      - name: Download Allure Results
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.RESULTS_DIR }}

      # --- Merge history for trend charts ---
      - name: Restore History
        run: |
          mkdir -p "${{ env.RESULTS_DIR }}/history"
          if [ -d "previous-site/latest/history" ]; then
            echo "‚ôªÔ∏è Restoring previous history..."
            cp -r previous-site/latest/history/* "${{ env.RESULTS_DIR }}/history/" || true
          fi

      # --- Generate Allure Report ---
      - name: Generate Allure Report
        run: |
          allure generate "${{ env.RESULTS_DIR }}" --clean -o allure-report

      # --- Append new build into /builds folder and avoid recursive copy ---
      - name: Merge Previous Builds & Preserve index.html
        run: |
          SITE_DIR="${{ env.SITE_DIR }}"
          mkdir -p "$SITE_DIR/builds"

          # Copy previous builds if exist
          if [ -d "previous-site/builds" ]; then
            echo "üîÅ Restoring previous builds..."
            cp -r previous-site/builds/* "$SITE_DIR/builds/"
          fi

          # Copy new build
          BUILD_ID=${{ github.run_number }}
          BUILD_PATH="$SITE_DIR/builds/$BUILD_ID"
          mkdir -p "$BUILD_PATH"

          # Copy allure-report files except builds folder itself
          shopt -s extglob
          cp -r allure-report/!(builds) "$BUILD_PATH/" || true
          shopt -u extglob

          # Update latest symlink
          rm -rf "$SITE_DIR/latest"
          cp -r "$BUILD_PATH" "$SITE_DIR/latest"

          # Remove any symlinks to avoid deploy issues
          find "$SITE_DIR" -type l -exec rm -f {} \;

          # Preserve previous index.html for reference
          if [ -f "previous-site/index.html" ]; then
            cp previous-site/index.html "$SITE_DIR/index_prev.html"
          fi

      # --- Rebuild index.html dynamically ---
      - name: Update Build History Index
        run: |
          SITE_DIR="${{ env.SITE_DIR }}"
          INDEX="$SITE_DIR/index.html"
          mkdir -p "$SITE_DIR"
          CURRENT_LA_TIME=$(TZ='America/Los_Angeles' date)

          echo "<html><head><title>Allure Report History</title>
          <script src='https://cdn.jsdelivr.net/npm/chart.js'></script>
          <style>body{font-family:sans-serif;margin:20px;}a{text-decoration:none;color:#0366d6;}a:hover{text-decoration:underline;}</style>
          </head><body><h1>ü§ñ Robotics BDD CI/CD History</h1>
          <p>Generated on $CURRENT_LA_TIME</p><hr><ul>" > "$INDEX"

          BUILDS=$(find "$SITE_DIR/builds" -mindepth 1 -maxdepth 1 -type d | sort -V)
          LABELS=""
          PASS_COUNTS=""
          FAIL_COUNTS=""
          for BUILD_DIR in $BUILDS; do
            BUILD_NUM=$(basename "$BUILD_DIR")
            echo "<li><a href='builds/${BUILD_NUM}/index.html'>Build #${BUILD_NUM}</a></li>" >> "$INDEX"
            if [ -f "$BUILD_DIR/history/history-trend.json" ]; then
              PASS=$(jq '[.data[] | select(.status=="passed")] | length' "$BUILD_DIR/history/history-trend.json" 2>/dev/null || echo 0)
              FAIL=$(jq '[.data[] | select(.status=="failed")] | length' "$BUILD_DIR/history/history-trend.json" 2>/dev/null || echo 0)
              LABELS="$LABELS'$BUILD_NUM',"
              PASS_COUNTS="$PASS_COUNTS$PASS,"
              FAIL_COUNTS="$FAIL_COUNTS$FAIL,"
            fi
          done

          echo "</ul><canvas id='trendChart' width='800' height='400'></canvas>
          <script>
          const ctx=document.getElementById('trendChart').getContext('2d');
          new Chart(ctx,{type:'line',data:{
            labels:[${LABELS%,}],
            datasets:[
              {label:'Pass',data:[${PASS_COUNTS%,}],borderColor:'green',fill:false},
              {label:'Fail',data:[${FAIL_COUNTS%,}],borderColor:'red',fill:false}
            ]},
            options:{responsive:true,plugins:{legend:{position:'top'}},scales:{y:{beginAtZero:true}}}});
          </script>" >> "$INDEX"

          # Append previous index backup if any
          if [ -f "$SITE_DIR/index_prev.html" ]; then
            echo "<hr><details><summary>Previous Index Snapshot</summary>" >> "$INDEX"
            tail -n +1 "$SITE_DIR/index_prev.html" >> "$INDEX"
            echo "</details>" >> "$INDEX"
          fi

          echo "</body></html>" >> "$INDEX"

      # --- Upload updated site as artifact ---
      - name: Upload Updated Report Archive
        uses: actions/upload-artifact@v4
        with:
          name: allure-history-archive
          path: ${{ env.SITE_DIR }}
          retention-days: 30

      # --- Deploy reports directly from workspace ---
      - name: Deploy Allure Reports
        uses: actions/deploy-pages@v4
        with:
          artifact_name: allure-history-archive

      # --- Add workflow summary badges ---
      - name: Add Workflow Summary (Badges)
        run: |
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          BASE_URL="${PAGE_URL%/}"
          TEST_STATUS=${{ needs.test.outputs.test_outcome }}

          if [[ "$TEST_STATUS" == "FAIL" ]]; then
            STATUS_ICON="‚ùå"
            STATUS_TEXT="Failed (setup/config error)"
          elif [[ "$TEST_STATUS" == "UNSTABLE" ]]; then
            STATUS_ICON="‚ö†Ô∏è"
            STATUS_TEXT="Unstable (some tests failed)"
          else
            STATUS_ICON="‚úÖ"
            STATUS_TEXT="All tests passed"
          fi

          echo "### ü§ñ Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest_Build-blue)](${BASE_URL}/latest/ubuntu-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest_Build-blue)](${BASE_URL}/latest/windows-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](${BASE_URL}/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build #${{ github.run_number }} | Status: $STATUS_ICON $STATUS_TEXT" >> $GITHUB_STEP_SUMMARY
