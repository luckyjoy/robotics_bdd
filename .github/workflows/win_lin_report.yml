name: Robotics BDD Simulation CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 7 * * *'  # 07:00 UTC daily
  workflow_dispatch:

permissions:
  contents: write
  actions: read
  checks: read
  pull-requests: read
  statuses: read
  pages: write
  id-token: write

concurrency:
  group: robotics-bdd-${{ github.ref }}
  cancel-in-progress: false

jobs:
  run-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        python: [ '3.10' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -------------------------- LINUX --------------------------
      - name: Build Docker Image (Linux only)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          set -Eeuo pipefail
          docker build -t robotics-runner-${{ matrix.os }}:${{ github.run_id }} .

      - name: Run tests inside Docker container (Linux)
        if: matrix.os == 'ubuntu-latest'
        continue-on-error: true
        shell: bash
        run: |
          set -Eeuo pipefail
          rm -rf allure-results
          mkdir allure-results
          docker run \
            --name bdd-tests-${{ matrix.os }} \
            -v ${{ github.workspace }}/allure-results:/app/allure-results \
            robotics-runner-${{ matrix.os }}:${{ github.run_id }} \
            pytest -m navigation --alluredir /app/allure-results

      - name: Cleanup Docker (Linux only)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          set -Eeuo pipefail
          docker rm -f bdd-tests-${{ matrix.os }} || true
          docker rmi robotics-runner-${{ matrix.os }}:${{ github.run_id }} || true

      # ------------------------- WINDOWS -------------------------
      - name: Set up Python (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path 'requirements.txt') {
            pip install -r requirements.txt
          } else {
            pip install pytest allure-pytest
          }

      - name: Run tests & collect Allure (Windows)
        if: matrix.os == 'windows-latest'
        continue-on-error: true
        shell: pwsh
        run: |
          if (Test-Path 'allure-results') { Remove-Item -Recurse -Force 'allure-results' }
          New-Item -ItemType Directory -Force 'allure-results' | Out-Null
          pytest -m navigation --alluredir 'allure-results'

      # --------------------- ALLURE METADATA ---------------------
      - name: Inject Allure Metadata (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p allure-results
          cp supports/categories.json allure-results/ 2>/dev/null || true
          cat > allure-results/executor.json <<'JSON'
          {
            "name": "GitHub Actions",
            "type": "github",
            "url": "https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}",
            "buildOrder": "${GITHUB_RUN_NUMBER}",
            "buildName": "Run ${GITHUB_RUN_NUMBER}",
            "buildUrl": "https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}",
            "reportUrl": "https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY}/latest/ubuntu-latest/",
            "reportName": "Allure Report (Ubuntu)"
          }
          JSON
          if [ -f supports/ubuntu.properties ]; then
            cp supports/ubuntu.properties allure-results/environment.properties
          else
            printf "OS=Ubuntu\nRunner=%s\n" "$RUNNER_OS" > allure-results/environment.properties
          fi

      - name: Inject Allure Metadata (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force 'allure-results' | Out-Null
          Copy-Item 'supports\categories.json' 'allure-results\' -ErrorAction SilentlyContinue
          $executor = @{
            name      = "GitHub Actions"
            type      = "github"
            url       = "https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
            buildOrder= ${GITHUB_RUN_NUMBER}
            buildName = "Run ${GITHUB_RUN_NUMBER}"
            buildUrl  = "https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
            reportUrl = "https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY}/latest/windows-latest/"
            reportName= "Allure Report (Windows)"
          } | ConvertTo-Json -Compress
          Set-Content 'allure-results\executor.json' $executor
          if (Test-Path 'supports\windows.properties') {
            Copy-Item 'supports\windows.properties' 'allure-results\environment.properties'
          } else {
            Set-Content 'allure-results\environment.properties' "OS=Windows`nRunner=$env:RUNNER_OS"
          }

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results
          retention-days: 7

  # -------------------------- DEPLOY PAGES --------------------------
  deploy-pages:
    runs-on: ubuntu-latest
    needs: run-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout gh-pages history
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          repository: ${{ github.repository }}
          ref: gh-pages
          path: _history
          token: ${{ secrets.GITHUB_TOKEN }}
          clean: false

      - name: Ensure history dir exists if gh-pages is empty
        shell: bash
        run: mkdir -p _history

      - name: Download Linux Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ubuntu-latest
          path: allure-results/ubuntu-latest

      - name: Download Windows Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-windows-latest
          path: allure-results/windows-latest

      - name: Cache Allure CLI
        id: cache-allure
        uses: actions/cache@v3
        with:
          path: allure-commandline
          key: allure-cli-${{ runner.os }}-2.25.0

      - name: Setup Allure CLI (download if cache miss)
        if: ${{ steps.cache-allure.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          ALLURE_VERSION=2.25.0
          curl -L -o allure.tgz "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.tgz"
          mkdir -p allure-commandline
          tar -xzf allure.tgz -C allure-commandline --strip-components 1
          echo "$PWD/allure-commandline/bin" >> "$GITHUB_PATH"

      - name: Add Allure CLI to PATH (cache-hit safe)
        shell: bash
        run: echo "$PWD/allure-commandline/bin" >> "$GITHUB_PATH"

      - name: Check Allure CLI
        shell: bash
        run: |
          set -Eeuo pipefail
          which allure || { echo "Allure not on PATH"; exit 1; }
          allure --version

      # Generate reports with trend history
      - name: Generate Allure Reports (with Trend history)
        shell: bash
        run: |
          set -Eeuo pipefail
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          SITE_DIR="site"
          HISTORY_DIR="_history"

          rm -rf "$SITE_DIR"
          mkdir -p "$SITE_DIR/latest"

          find "$HISTORY_DIR" -maxdepth 1 -type d -regextype posix-egrep -regex ".*/[0-9]+$" -exec cp -r {} "$SITE_DIR/" \; || true

          PREV_BUILD=$(
            find "$SITE_DIR" -maxdepth 1 -type d -regextype posix-egrep -regex ".*/[0-9]+$" |
            xargs -n 1 basename | sort -nr | awk -v curr="$BUILD_NUMBER" '$1 < curr {print; exit}'
          )

          echo "Current build: ${BUILD_NUMBER}"
          echo "Previous build: ${PREV_BUILD:-<none>}"

          for OS in ubuntu-latest windows-latest; do
            RESULTS_DIR="allure-results/${OS}"
            VERSIONED_REPORT_DIR="allure-report-${BUILD_NUMBER}-${OS}"
            mkdir -p "${RESULTS_DIR}"

            if [[ -n "${PREV_BUILD:-}" && -d "${SITE_DIR}/${PREV_BUILD}/${OS}/history" ]]; then
              mkdir -p "${RESULTS_DIR}/history"
              cp -r "${SITE_DIR}/${PREV_BUILD}/${OS}/history/"* "${RESULTS_DIR}/history/" || true
            fi

            allure generate "${RESULTS_DIR}" --output "${VERSIONED_REPORT_DIR}" --clean

            mkdir -p "${SITE_DIR}/latest/${OS}"
            mkdir -p "${SITE_DIR}/${BUILD_NUMBER}/${OS}"

            cp -r "${VERSIONED_REPORT_DIR}/"* "${SITE_DIR}/${BUILD_NUMBER}/${OS}/"
            cp -r "${VERSIONED_REPORT_DIR}/"* "${SITE_DIR}/latest/${OS}/"

            date -u +"%Y-%m-%d %H:%M:%S UTC" > "${SITE_DIR}/${BUILD_NUMBER}/${OS}/build-info.txt"
            cp "${SITE_DIR}/${BUILD_NUMBER}/${OS}/build-info.txt" "${SITE_DIR}/latest/${OS}/build-info.txt"
          done

      # âœ… Fixed HTML index generation
      - name: Rebuild index.html
        shell: bash
        run: |
          set -Eeuo pipefail
          SITE_DIR="site"

          mkdir -p "$SITE_DIR"
          : > "$SITE_DIR/index.html"

          {
            echo '<!doctype html>'
            echo '<html lang="en">'
            echo '<head>'
            echo '  <meta charset="utf-8">'
            echo '  <title>Allure Reports - Robotics BDD</title>'
            echo '  <meta name="viewport" content="width=device-width, initial-scale=1">'
            echo '  <style>body{font-family:Inter,system-ui,-apple-system,"Segoe UI",Roboto,Arial,sans-serif;line-height:1.45;margin:24px} a{color:#0a66c2;text-decoration:none} a:hover{text-decoration:underline} ul{margin:0;padding:0;list-style:disc inside} hr{margin:16px 0} .muted{color:#6b7280}</style>'
            echo '</head><body>'
            echo '<h1>Robotics BDD Test Reports</h1><hr><h2>Latest Reports</h2><ul>'
          } >> "$SITE_DIR/index.html"

          for OS in ubuntu-latest windows-latest; do
            if [ -d "$SITE_DIR/latest/$OS" ]; then
              TS=$(cat "$SITE_DIR/latest/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
              printf '<li><a href="latest/%s/index.html">Latest Report (%s)</a> - Last run: %s</li>\n' "$OS" "$OS" "$TS" >> "$SITE_DIR/index.html"
            fi
          done

          echo '</ul><hr><h2>All Historical Builds</h2><ul>' >> "$SITE_DIR/index.html"

          mapfile -t HIST_BUILDS < <(
            find "$SITE_DIR" -maxdepth 1 -type d -regextype posix-egrep -regex ".*/[0-9]+$" -printf "%f\n" | sort -nr
          )

          if [ "${#HIST_BUILDS[@]}" -eq 0 ]; then
            echo '<p class="muted">No historical builds found.</p>' >> "$SITE_DIR/index.html"
          else
            for BUILD in "${HIST_BUILDS[@]}"; do
              for OS in ubuntu-latest windows-latest; do
                if [ -d "$SITE_DIR/$BUILD/$OS" ]; then
                  TS=$(cat "$SITE_DIR/$BUILD/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
                  printf '<li><a href="%s/%s/index.html">Build #%s (%s)</a> - %s</li>\n' "$BUILD" "$OS" "$BUILD" "$OS" "$TS" >> "$SITE_DIR/index.html"
                fi
              done
            done
          fi

          echo '</ul></body></html>' >> "$SITE_DIR/index.html"
          touch "$SITE_DIR/.nojekyll"

      # Verify the generated index links
      - name: Verify index links
        shell: bash
        run: |
          set -Eeuo pipefail
          f="site/index.html"
          test -s "$f"

          must_have_link() {
            local label="$1" href_base="$2"
            local pat="href=\"${href_base}(/index\\.html)?\""
            if ! grep -qE "$pat" "$f"; then
              echo "::error::Missing link for ${label}: expected ${pat}"
              echo "---- index.html preview ----"
              grep -n "<li>" "$f" | head -20 || true
              exit 1
            fi
          }

          [ -d site/latest/ubuntu-latest ]  && must_have_link "latest ubuntu"  "latest/ubuntu-latest"
          [ -d site/latest/windows-latest ] && must_have_link "latest windows" "latest/windows-latest"

          last_build=$(find site -maxdepth 1 -type d -regextype posix-egrep -regex '.*/[0-9]+$' -printf '%f\n' | sort -nr | head -1 || true)
          if [ -n "$last_build" ]; then
            [ -d "site/$last_build/ubuntu-latest" ]  && must_have_link "build $last_build ubuntu"  "$last_build/ubuntu-latest"
            [ -d "site/$last_build/windows-latest" ] && must_have_link "build $last_build windows" "$last_build/windows-latest"
          fi

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: site
          publish_branch: gh-pages
          force_orphan: true
          commit_message: "Deploy Allure Reports - Build ${{ github.run_number }}"

      - name: Add workflow badges to summary
        shell: bash
        run: |
          echo "### Robotics BDD Simulation CI/CD Report Links" >> "$GITHUB_STEP_SUMMARY"
          echo "- [Ubuntu Latest Report](https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY}/latest/ubuntu-latest/)" >> "$GITHUB_STEP_SUMMARY"
          echo "- [Windows Latest Report](https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY}/latest/windows-latest/)" >> "$GITHUB_STEP_SUMMARY"
          echo "- [Report History](https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY}/)" >> "$GITHUB_STEP_SUMMARY"
