name: Robotics BDD CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

env:
  ALLURE_VERSION: 2.29.0
  SITE_DIR: site
  
jobs:
  test:
    name: Run tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    outputs:
      test_outcome: ${{ steps.run_tests.outputs.test_outcome }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker Image
        if: matrix.os == 'ubuntu-latest'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: robotics-bdd:ci-build
          load: true

      - name: Run tests
        id: run_tests
        shell: bash
        run: |
          set +e
          OS_NAME=${{ matrix.os }}
          RESULTS_DIR="allure-results/$OS_NAME"
          mkdir -p "$RESULTS_DIR"

          if [[ "$OS_NAME" == "ubuntu-latest" ]]; then
            echo "🐳 Running tests in Docker..."
            docker run --rm -v $PWD:/workspace -w /workspace robotics-bdd:ci-build \
              pytest -v -m navigation --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          else
            echo "🪟 Running tests on Windows..."
            pytest -v -m navigation --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          fi

          if [ ! -d "$RESULTS_DIR" ] || [ -z "$(find $RESULTS_DIR -type f -name '*.json' 2>/dev/null)" ]; then
            echo "❌ No Allure results found — setup or configuration failure."
            echo "test_outcome=FAILED" >> $GITHUB_OUTPUT
            exit 1
          fi

          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "⚠️ Some tests failed (pytest exit code $TEST_EXIT_CODE)."
            echo "test_outcome=UNSTABLE" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "✅ All tests passed successfully."
            echo "test_outcome=PASSED" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Copy executor.json
        if: always()
        shell: bash  
        run: |
          SRC_EXECUTOR="supports/executor.json"
          DST_DIR="allure-results/${{ matrix.os }}"
          mkdir -p "$DST_DIR"
          if [ -f "$SRC_EXECUTOR" ]; then
            cp "$SRC_EXECUTOR" "$DST_DIR/"
          else
            echo '{"name":"GitHub Actions","type":"github","buildName":"Robotics BDD Simulation","buildUrl":"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' > "$DST_DIR/executor.json"
          fi

      - name: Upload Allure Results Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results/${{ matrix.os }}
          retention-days: 5

  report:
    name: Generate Allure Report and Deploy
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/${{ env.ALLURE_VERSION }}/allure-${{ env.ALLURE_VERSION }}.tgz
          tar -xzf allure-${{ env.ALLURE_VERSION }}.tgz
          mv allure-${{ env.ALLURE_VERSION }} allure-commandline
          echo "$(pwd)/allure-commandline/bin" >> $GITHUB_PATH

      - name: Download Allure Artifacts
        uses: actions/download-artifact@v4
        with:
          path: allure-results

      - name: Preserve Previous Build History
        shell: bash
        run: |
          git fetch origin gh-pages || true
          if git show-ref --quiet refs/heads/gh-pages; then
            echo "📜 Restoring existing gh-pages history..."
            git clone --depth 1 --branch gh-pages "https://github.com/${{ github.repository }}.git" old_site || true
            mkdir -p site
            cp -r old_site/* site/ || true
          else
            echo "🆕 No previous gh-pages branch found."
          fi

      - name: Consolidate Artifacts to Target Folders
        shell: bash
        run: |
          mkdir -p allure-results/ubuntu-latest
          mkdir -p allure-results/windows-latest
          if [ -d allure-results/allure-results-ubuntu-latest ]; then
            mv allure-results/allure-results-ubuntu-latest/* allure-results/ubuntu-latest/
            rm -rf allure-results/allure-results-ubuntu-latest
          fi
          if [ -d allure-results/allure-results-windows-latest ]; then
            mv allure-results/allure-results-windows-latest/* allure-results/windows-latest/
            rm -rf allure-results/allure-results-windows-latest
          fi

      - name: Determine Combined Test Status
        id: test_status_check
        shell: bash
        run: |
          STATUS="PASSED"
          for ART in allure-results/*; do
            if [ ! -d "$ART" ] || [ -z "$(find "$ART" -type f -name '*.json')" ]; then
              STATUS="FAILED"
              break
            fi
          done
          echo "status=$STATUS" >> $GITHUB_OUTPUT

      - name: Generate Allure Reports (History & Executor Fix)
        shell: bash
        run: |
          BUILD_NUMBER=${{ github.run_number }}
