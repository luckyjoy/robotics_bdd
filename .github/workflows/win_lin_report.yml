name: ü§ñ Robotics BDD Simulation CI/CD

on:
  push:
    branches:
      - main

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
# --------------------------------------------------------------------
# üß™ JOB 1: Run Tests and Upload Allure Results
# --------------------------------------------------------------------
  run-tests:
    name: Run tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests with Allure
        run: |
          mkdir -p allure-results/${{ matrix.os }}
          pytest tests/ --alluredir=allure-results/${{ matrix.os }} || true

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results/${{ matrix.os }}

# --------------------------------------------------------------------
# üöÄ JOB 2: Generate + Deploy Allure Reports to GitHub Pages
# --------------------------------------------------------------------
  deploy-allure:
    name: Deploy Allure Report
    runs-on: ubuntu-latest
    needs: run-tests
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    env:
      ALLURE_VERSION: 2.29.0
      SITE_DIR: site

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download Allure Results Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-*
          merge-multiple: true
          path: allure-results

      - name: Show Downloaded Structure
        run: |
          echo "Downloaded artifact folder structure:"
          tree allure-results || ls -R allure-results

      - name: Download Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/${ALLURE_VERSION}/allure-${ALLURE_VERSION}.tgz
          tar -xzf allure-${ALLURE_VERSION}.tgz
          sudo mv allure-${ALLURE_VERSION}/bin/allure /usr/local/bin/allure

      - name: Generate Allure Reports (Ubuntu + Windows)
        run: |
          mkdir -p $SITE_DIR/latest
          
          for OS in ubuntu-latest windows-latest; do
            SRC="allure-results-${OS}"
            DEST="$SITE_DIR/latest/$OS"
            
            # Handle artifact folder names (in case of nesting)
            if [ -d "allure-results/$OS" ]; then
              SRC="allure-results/$OS"
            elif [ -d "allure-results-${OS}" ]; then
              SRC="allure-results-${OS}"
            fi

            if [ -d "$SRC" ]; then
              mkdir -p "$DEST"
              echo "‚úÖ Generating Allure report for $OS from $SRC ‚Üí $DEST"
              allure generate "$SRC" -o "$DEST" --clean
            else
              echo "‚ö†Ô∏è No Allure results for $OS, skipping."
            fi
          done

      - name: Copy Allure Metadata (Executor & Categories)
        run: |
          for OS in ubuntu-latest windows-latest; do
            REPORT_DIR="$SITE_DIR/latest/$OS"
            if [ -d "$REPORT_DIR" ]; then
              mkdir -p "$REPORT_DIR/widgets"
              if [ -f "supports/executor.json" ]; then
                cp supports/executor.json "$REPORT_DIR/widgets/executor.json"
              fi
              if [ -f "supports/categories.json" ]; then
                cp supports/categories.json "$REPORT_DIR/widgets/categories.json"
              fi
            fi
          done

      - name: Create Landing Page Index
        shell: bash
        run: |
          SITE_DIR="site"
          echo "<html><head><title>Allure Reports</title>
          <style>body{font-family:sans-serif;margin:20px;}li{margin:6px 0;}</style>
          </head><body><h1>ü§ñ Robotics BDD Simulation CI/CD (Build #${GITHUB_RUN_NUMBER})</h1><hr><ul>" > "$SITE_DIR/index.html"

          for OS in ubuntu-latest windows-latest; do
            if [ -f "$SITE_DIR/latest/$OS/index.html" ]; then
              echo "<li><a href='latest/$OS/index.html'>Latest Report ($OS)</a></li>" >> "$SITE_DIR/index.html"
            else
              echo "<li><span style='color:gray'>No report found for $OS</span></li>" >> "$SITE_DIR/index.html"
            fi
          done

          echo "</ul><hr><p>Metadata copied from <code>supports/</code>.</p></body></html>" >> "$SITE_DIR/index.html"

      - name: Fix Allure Report Paths
        run: |
          for OS in ubuntu-latest windows-latest; do
            FILE="site/latest/$OS/index.html"
            if [ -f "$FILE" ]; then
              perl -pi -e 's|src="/|src="./|g' "$FILE"
              perl -pi -e 's|href="/|href="./|g' "$FILE"
            fi
          done

      - name: Set .nojekyll
        run: touch site/.nojekyll

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Add Workflow Summary
        run: |
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          echo "### ü§ñ Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest_Build-blue)](${PAGE_URL}/latest/ubuntu-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest_Build-blue)](${PAGE_URL}/latest/windows-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](${PAGE_URL}/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build #${GITHUB_RUN_NUMBER} | Status: ‚úÖ All tests passed" >> $GITHUB_STEP_SUMMARY
