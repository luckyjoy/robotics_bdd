name: Robotics BDD CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

env:
  ALLURE_VERSION: 2.29.0

jobs:
  test:
    name: Run tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    outputs:
      outcome_ubuntu: ${{ steps.set_result.outputs.outcome_ubuntu }}
      outcome_windows: ${{ steps.set_result.outputs.outcome_windows }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest pytest-bdd

      - name: Build Docker Image (Linux only)
        if: matrix.os == 'ubuntu-latest'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: robotics-bdd:ci-build
          load: true

      - name: Run tests
        id: run_tests
        shell: bash
        run: |
          set +e
          OS_NAME=${{ matrix.os }}
          RESULTS_DIR="allure-results/$OS_NAME"
          rm -rf "$RESULTS_DIR"
          mkdir -p "$RESULTS_DIR"

          if [[ "$OS_NAME" == "ubuntu-latest" ]]; then
            echo "üê≥ Running tests in Docker..."
            docker run --rm -v $PWD:/workspace -w /workspace robotics-bdd:ci-build \
              pytest -m navigation --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          else
            echo "ü™ü Running tests on Windows..."
            pytest -m navigation --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          fi

          # Check Allure output presence
          if [ ! -d "$RESULTS_DIR" ] || [ -z "$(find $RESULTS_DIR -type f -name '*.json' 2>/dev/null)" ]; then
            echo "test_outcome=FAILED" >> $GITHUB_OUTPUT
            exit 1
          elif [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "test_outcome=UNSTABLE" >> $GITHUB_OUTPUT
          else
            echo "test_outcome=PASSED" >> $GITHUB_OUTPUT
          fi

      - name: Copy Executor Info
        if: always()
        shell: bash
        run: |
          OS_NAME=${{ matrix.os }}
          if [ -f supports/executor.json ]; then
            cp supports/executor.json allure-results/${OS_NAME}/executor.json
            echo "‚úÖ Executor info copied for ${OS_NAME}"
          fi

      - name: Set Output
        id: set_result
        run: |
          if [ "${matrix.os}" == "ubuntu-latest" ]; then
            echo "outcome_ubuntu=${{ steps.run_tests.outputs.test_outcome }}" >> $GITHUB_OUTPUT
          else
            echo "outcome_windows=${{ steps.run_tests.outputs.test_outcome }}" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload Allure Results Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results/${{ matrix.os }}

  deploy_allure:
    name: Deploy Allure Report to Pages
    needs: test
    runs-on: ubuntu-latest
    if: always()
    environment:
      name: github-pages

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/${{ env.ALLURE_VERSION }}/allure-${{ env.ALLURE_VERSION }}.tgz
          tar -xzf allure-${{ env.ALLURE_VERSION }}.tgz
          mv allure-${{ env.ALLURE_VERSION }} allure-commandline
          echo "$(pwd)/allure-commandline/bin" >> $GITHUB_PATH

      - name: Download Allure Artifacts
        uses: actions/download-artifact@v4
        with:
          path: allure-results

      - name: Consolidate Artifacts
        shell: bash
        run: |
          mkdir -p allure-results
          mv allure-results/allure-results-ubuntu-latest allure-results/ubuntu-latest || true
          mv allure-results/allure-results-windows-latest allure-results/windows-latest || true

      - name: Determine Final Status
        id: final_status
        run: |
          UB="${{ needs.test.outputs.outcome_ubuntu }}"
          WIN="${{ needs.test.outputs.outcome_windows }}"
          echo "Ubuntu: $UB"
          echo "Windows: $WIN"

          STATUS="PASSED"
          if [[ "$UB" == "FAILED" || "$WIN" == "FAILED" ]]; then
            STATUS="FAILED"
          elif [[ "$UB" == "UNSTABLE" || "$WIN" == "UNSTABLE" ]]; then
            STATUS="UNSTABLE"
          fi

          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "Final build status: $STATUS"

      - name: Generate Allure Reports
        shell: bash
        run: |
          SITE_DIR="site"
          rm -rf "$SITE_DIR"
          mkdir -p "$SITE_DIR/latest"

          for OS in ubuntu-latest windows-latest; do
            if [ -d "allure-results/$OS" ]; then
              allure generate "allure-results/$OS" -o "$SITE_DIR/latest/$OS" --clean
              echo "$(date)" > "$SITE_DIR/latest/$OS/build-info.txt"
            fi
          done

      - name: Rebuild index.html
        shell: bash
        run: |
          SITE_DIR="site"
          STATUS="${{ steps.final_status.outputs.status }}"
          ICON="‚úÖ"
          TEXT="All tests passed"
          if [[ "$STATUS" == "UNSTABLE" ]]; then
            ICON="‚ö†Ô∏è"; TEXT="Unstable (some tests failed)"
          elif [[ "$STATUS" == "FAILED" ]]; then
            ICON="‚ùå"; TEXT="Failed (setup/config error)"
          fi

          echo "<html><head><title>Allure Reports</title>
          <style>body{font-family:sans-serif;margin:20px;}ul{list-style:none;padding:0;}
          li{margin:6px 0;}a{text-decoration:none;color:#0366d6;}a:hover{text-decoration:underline;}</style>
          </head><body>
          <h1>ü§ñ Robotics BDD Simulation CI/CD</h1><hr>
          <h2>$ICON $TEXT</h2>
          <h3>üß© Latest Reports</h3><ul>" > "$SITE_DIR/index.html"

          for OS in ubuntu-latest windows-latest; do
            if [ -d "$SITE_DIR/latest/$OS" ]; then
              TS=$(cat "$SITE_DIR/latest/$OS/build-info.txt" 2>/dev/null)
              echo "<li><a href='latest/$OS/'>Latest $OS Report</a> - $TS</li>" >> "$SITE_DIR/index.html"
            fi
          done

          echo "</ul><hr><em>Generated on $(date)</em></body></html>" >> "$SITE_DIR/index.html"

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
