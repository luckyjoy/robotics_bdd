name: Robotics BDD CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

env:
  ALLURE_VERSION: 2.29.0
  # NOTE: Assuming 'supports/executor.json' exists in your repo root for history/executors
  EXECUTOR_FILE: supports/executor.json 

jobs:
  test:
    name: Run tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false 
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest pytest-bdd

      - name: Build Docker Image
        if: matrix.os == 'ubuntu-latest'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: robotics-bdd:ci-build
          load: true
      
      - name: Run tests
        id: run_tests
        shell: bash
        run: |
          set +e 
          
          OS_NAME=${{ matrix.os }}
          RESULTS_DIR="allure-results/$OS_NAME"
          mkdir -p "$RESULTS_DIR"

          if [[ "$OS_NAME" == "ubuntu-latest" ]]; then
            echo "🐳 Running tests in Docker..."
            docker run --rm -v $PWD:/workspace -w /workspace robotics-bdd:ci-build \
              pytest -v --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          else
            echo "🪟 Running tests on Windows..."
            pytest -v --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          fi
          
          set -e 

          # FAIL JOB if NO results (Setup Error)
          if [ -z "$(find $RESULTS_DIR -type f -name '*.json' 2>/dev/null)" ]; then
            echo "❌ No Allure results found for $OS_NAME. **Setup/Configuration Failure**."
            exit 1 
          else
            echo "✅ Allure results found for $OS_NAME."
            # Step succeeds, allowing artifact upload regardless of test pass/fail.
          fi

      - name: Upload Allure Results Artifact
        # This always runs if the previous step succeeded (i.e., setup worked)
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results/${{ matrix.os }}

  deploy_allure:
    name: Deploy Allure Report to Pages
    needs: test 
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download Allure CLI
        run: |
          # FIX: Correctly adds Allure binary path for Java dependencies
          wget https://github.com/allure-framework/allure2/releases/download/${{ env.ALLURE_VERSION }}/allure-${{ env.ALLURE_VERSION }}.tgz
          tar -xzf allure-${{ env.ALLURE_VERSION }}.tgz
          echo "$(pwd)/allure-${{ env.ALLURE_VERSION }}/bin" >> $GITHUB_PATH
          
      - name: Download Allure Artifacts
        uses: actions/download-artifact@v4
        with:
          path: allure-results

      - name: Consolidate Artifacts
        shell: bash
        run: |
          # The artifacts are downloaded into subdirectories, consolidate them
          mkdir -p temp-allure-results
          if [ -d allure-results/allure-results-ubuntu-latest ]; then
            mv allure-results/allure-results-ubuntu-latest temp-allure-results/ubuntu-latest
          fi
          if [ -d allure-results/allure-results-windows-latest ]; then
            mv allure-results/allure-results-windows-latest temp-allure-results/windows-latest
          fi
          rm -rf allure-results
          mv temp-allure-results allure-results
        
      - name: Check for any results
        id: check_results
        run: |
          if [ -z "$(find allure-results -type f -name '*.json' 2>/dev/null)" ]; then
            echo "proceed=false" >> $GITHUB_OUTPUT
            echo "❌ No test results found from any OS — skipping Allure deployment."
          else
            echo "proceed=true" >> $GITHUB_OUTPUT
            echo "✅ Test results detected — proceeding with report generation."
          fi
        
      - name: Stop Deployment if No Results Exist
        if: steps.check_results.outputs.proceed == 'false'
        run: exit 0
        
      # FIX (3): Determine Combined Test Status by checking artifacts for 'failed' status
      - name: Determine Combined Test Status
        id: test_status_check
        run: |
          # Check downloaded Allure JSON files for any "failed" or "broken" status
          if find allure-results -type f -name '*-testsuite.json' -exec grep -qE '"status": "(failed|broken)"' {} +; then
            echo "status=UNSTABLE" >> $GITHUB_OUTPUT
          else
            echo "status=PASSED" >> $GITHUB_OUTPUT
          fi

      - name: Generate Allure Reports
        shell: bash
        run: |
          echo "Generating Allure report..."
          SITE_DIR="site"
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          mkdir -p "$SITE_DIR/latest"
          
          for OS in ubuntu-latest windows-latest; do
            RESULTS_DIR="allure-results/$OS"
            REPORT_DIR="$SITE_DIR/latest/$OS"
            
            if [ -d "$RESULTS_DIR" ] && [ "$(ls -A $RESULTS_DIR)" ]; then
              # FIX (1, 2): Generate report for each OS to get separate views
              allure generate "$RESULTS_DIR" -o "$REPORT_DIR" --clean
              
              # FIX (1, 2): Add executor.json for trend/history data
              mkdir -p "$REPORT_DIR/widgets"
              echo '{"buildOrder":'"$BUILD_NUMBER"', "reportName":"'"$OS Report"'"}' > "$REPORT_DIR/widgets/executor.json"
              
              # FIX (1): If you have a global executor file, copy it:
              if [ -f "${{ env.EXECUTOR_FILE }}" ]; then
                cp "${{ env.EXECUTOR_FILE }}" "$REPORT_DIR/widgets/"
              fi
            fi
          done

      - name: Fix Allure Paths
        shell: bash
        run: |
          for OS in ubuntu-latest windows-latest; do
            REPORT_DIR="site/latest/$OS"
            if [ -f "$REPORT_DIR/index.html" ]; then
              perl -pi -e 's|src="/|src="./|g' "$REPORT_DIR/index.html"
              perl -pi -e 's|href="/|href="./|g' "$REPORT_DIR/index.html"
            fi
          done

      - name: Create Landing Page and Deploy
        run: |
          SITE_DIR="site"
          mkdir -p $SITE_DIR
          echo "<html><head><title>Allure Reports</title><style>body{font-family:sans-serif;margin:20px;}a{color:#0366d6;text-decoration:none;}a:hover{text-decoration:underline;}</style></head><body><h1>🤖 Robotics BDD Simulation CI/CD</h1><hr><ul>" > $SITE_DIR/index.html
          for OS in ubuntu-latest windows-latest; do
            if [ -f "$SITE_DIR/latest/$OS/index.html" ]; then
              echo "<li><a href='latest/$OS/index.html'>Latest Report ($OS)</a></li>" >> $SITE_DIR/index.html
            else
              echo "<li>No report found for $OS</li>" >> $SITE_DIR/index.html
            fi
          done
          echo "</ul><hr><p>Allure Trends & Executor data are available under each report's widgets/history tabs.</p></body></html>" >> $SITE_DIR/index.html

          touch $SITE_DIR/.nojekyll

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Add Workflow Summary (Badges)
        run: |
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          BASE_URL="${PAGE_URL%/}"
          
          TEST_STATUS=${{ steps.test_status_check.outputs.status }}
          
          # FIX (3): Use the centralized status check for the summary badge
          if [[ "$TEST_STATUS" == "UNSTABLE" ]]; then
            STATUS_ICON="⚠️"
            STATUS_TEXT="Unstable (some tests failed)"
            STATUS_COLOR="yellow"
          else
            STATUS_ICON="✅"
            STATUS_TEXT="All tests passed"
            STATUS_COLOR="brightgreen"
          fi        
          
          echo "### 🤖 Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest_Build-blue)](${BASE_URL}/latest/ubuntu-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest_Build-blue)](${BASE_URL}/latest/windows-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](${BASE_URL}/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build #${GITHUB_RUN_NUMBER} | Status: $STATUS_ICON $STATUS_TEXT" >> $GITHUB_STEP_SUMMARY