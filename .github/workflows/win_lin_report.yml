jobs:
  deploy-allure:
    name: Deploy Allure Report
    runs-on: ubuntu-latest
    needs: [test_ubuntu, test_windows]
    if: ${{ always() }}
    env:
      ALLURE_VERSION: 2.29.0
      SITE_DIR: site
    steps:
      - uses: actions/checkout@v4

      - name: Collect Allure Results
        run: |
          mkdir -p allure-results
          echo "Collecting test results from Ubuntu and Windows..."
          for OS in ubuntu-latest windows-latest; do
            if [ -d "allure-results/$OS" ]; then
              echo "Found allure-results/$OS"
            else
              echo "⚠️ allure-results/$OS not found, skipping."
            fi
          done

      - name: Copy Executor Info
        run: |
          if [ -f "$PWD/supports/executor.json" ]; then
            echo "Copying executor.json to allure-results..."
            cp "$PWD/supports/executor.json" "$PWD/allure-results/"
          else
            echo "⚠️ executor.json not found at $PWD/supports/executor.json"
          fi

      - name: Determine Build Result
        id: build_status
        run: |
          # Default
          BUILD_RESULT="pass"
          
          # If any setup/config/env error occurred in previous jobs
          if [ "${{ needs.test_ubuntu.result }}" = "failure" ] || [ "${{ needs.test_windows.result }}" = "failure" ]; then
            BUILD_RESULT="fail"
          else
            # Read test summary if available
            UB_RESULT_FILE="allure-results/ubuntu-latest/summary.json"
            WIN_RESULT_FILE="allure-results/windows-latest/summary.json"

            UB_FAILED=$(jq '.statistic.failed' "$UB_RESULT_FILE" 2>/dev/null || echo 0)
            WIN_FAILED=$(jq '.statistic.failed' "$WIN_RESULT_FILE" 2>/dev/null || echo 0)

            if [ "$UB_FAILED" -gt 0 ] || [ "$WIN_FAILED" -gt 0 ]; then
              BUILD_RESULT="unstable"
            fi
          fi

          echo "Build status determined as: $BUILD_RESULT"
          echo "result=$BUILD_RESULT" >> $GITHUB_OUTPUT

      - name: Generate Allure Reports
        run: |
          mkdir -p "$SITE_DIR/latest"
          for OS in ubuntu-latest windows-latest; do
            if [ -d "allure-results/$OS" ]; then
              mkdir -p "$SITE_DIR/latest/$OS"
              allure generate "allure-results/$OS" -o "$SITE_DIR/latest/$OS" --clean
              echo "$(date '+%Y-%m-%d %H:%M:%S %Z')" > "$SITE_DIR/latest/$OS/build-info.txt"
            fi
          done

      - name: Generate History Index
        run: |
          mkdir -p "$SITE_DIR"
          echo "<html><head><title>Allure Reports History</title>
          <style>
          body{font-family:sans-serif;margin:20px;}
          ul{list-style:none;padding:0;}
          li{margin:6px 0;}
          a{text-decoration:none;color:#0366d6;}
          a:hover{text-decoration:underline;}
          </style></head><body>
          <h1>🤖 Robotics BDD Simulation CI/CD</h1>
          <h2>🧩 Latest Allure Reports</h2><hr><ul>" > "$SITE_DIR/index.html"

          for OS in ubuntu-latest windows-latest; do
            if [ -d "$SITE_DIR/latest/$OS" ]; then
              TS=$(cat "$SITE_DIR/latest/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
              echo "<li><a href='latest/$OS/'>Latest Report ($OS)</a> - $TS</li>" >> "$SITE_DIR/index.html"
            else
              echo "<li><strong>$OS:</strong> No report found.</li>" >> "$SITE_DIR/index.html"
            fi
          done

          echo "</ul><hr><h2>📊 Report History</h2><ul>" >> "$SITE_DIR/index.html"
          BUILDS=$(find "$SITE_DIR" -maxdepth 1 -type d -regex ".*/[0-9]\+" -printf "%f\n" 2>/dev/null | sort -nr)
          if [ -z "$BUILDS" ]; then
            echo "<li>No previous builds found.</li>" >> "$SITE_DIR/index.html"
          else
            for BUILD in $BUILDS; do
              for OS in ubuntu-latest windows-latest; do
                if [ -d "$SITE_DIR/$BUILD/$OS" ]; then
                  TS=$(cat "$SITE_DIR/$BUILD/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
                  echo "<li><a href='${BUILD}/${OS}/'>Build #${BUILD} ($OS)</a> - ${TS}</li>" >> "$SITE_DIR/index.html"
                fi
              done
            done
          fi
          echo "</ul><hr><p><strong>Status:</strong> ${{ steps.build_status.outputs.result | upper }}</p>
          <p><em>Generated on $(date)</em></p></body></html>" >> "$SITE_DIR/index.html"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ env.SITE_DIR }}
