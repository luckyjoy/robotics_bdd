name: Robotics BDD CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        shell: bash
        run: |
          OS_NAME=${{ matrix.os }}
          RESULTS_DIR="allure-results/$OS_NAME"
          mkdir -p "$RESULTS_DIR"

          if [[ "$OS_NAME" == "ubuntu-latest" ]]; then
            echo "Running tests in Docker..."
            docker run --rm -v $PWD:/workspace -w /workspace robotics-bdd \
              pytest -v --alluredir="$RESULTS_DIR" || true
          else
            echo "Running tests on Windows..."
            pytest -v --alluredir="$RESULTS_DIR" || true
          fi
          
          # Detect if there are test results
          if [ -z "$(find $RESULTS_DIR -type f -name '*.json' 2>/dev/null)" ]; then
            echo "❌ No Allure results found for $OS_NAME"
            echo "has_results=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Allure results found for $OS_NAME"
            echo "has_results=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate Allure Reports
        if: steps.test.outputs.has_results == 'true'
        shell: bash
        run: |
          echo "Generating Allure report..."
          SITE_DIR="site"
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          mkdir -p "$SITE_DIR/latest"

          OS_NAME=${{ matrix.os }}
          RESULTS_DIR="allure-results/$OS_NAME"
          REPORT_DIR="$SITE_DIR/latest/$OS_NAME"

          allure generate "$RESULTS_DIR" -o "$REPORT_DIR" --clean

      - name: Fix Allure Paths
        if: steps.test.outputs.has_results == 'true'
        shell: bash
        run: |
          for OS in ubuntu-latest windows-latest; do
            REPORT_DIR="site/latest/$OS"
            if [ -f "$REPORT_DIR/index.html" ]; then
              perl -pi -e 's|src="/|src="./|g' "$REPORT_DIR/index.html"
              perl -pi -e 's|href="/|href="./|g' "$REPORT_DIR/index.html"
            fi
          done

      - name: Create Landing Page
        if: steps.test.outputs.has_results == 'true'
        shell: bash
        run: |
          SITE_DIR="site"
          mkdir -p $SITE_DIR
          echo "<html><head><title>Allure Reports</title>
          <style>body{font-family:sans-serif;margin:20px;}a{color:#0366d6;text-decoration:none;}a:hover{text-decoration:underline;}</style>
          </head><body><h1>🤖 Robotics BDD Simulation CI/CD</h1><hr><ul>" > $SITE_DIR/index.html
          for OS in ubuntu-latest windows-latest; do
            if [ -f "$SITE_DIR/latest/$OS/index.html" ]; then
              echo "<li><a href='latest/$OS/index.html'>Latest Report ($OS)</a></li>" >> $SITE_DIR/index.html
            else
              echo "<li>No report found for $OS</li>" >> $SITE_DIR/index.html
            fi
          done
          echo "</ul><hr><p>Allure Trends & Executor data are available under each report's widgets/history tabs.</p></body></html>" >> $SITE_DIR/index.html

      - name: Disable Jekyll
        if: steps.test.outputs.has_results == 'true'
        run: touch site/.nojekyll

      - name: Upload Pages Artifact
        if: steps.test.outputs.has_results == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        if: steps.test.outputs.has_results == 'true'
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Add Workflow Summary (Badges)
        if: steps.test.outputs.has_results == 'true'
        run: |
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          BASE_URL="${PAGE_URL%/}"
          echo "### 🤖 Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest_Build-blue)](${BASE_URL}/latest/ubuntu-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest_Build-blue)](${BASE_URL}/latest/windows-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](${BASE_URL}/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build #${GITHUB_RUN_NUMBER} | Status: ✅ All tests completed" >> $GITHUB_STEP_SUMMARY
