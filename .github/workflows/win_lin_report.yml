name: Robotics BDD Simulation CI/CD

on:
  push:
  pull_request:

env:
  ALLURE_VERSION: 2.29.0
  SITE_DIR: site

jobs:
  # =========================
  # 1️⃣ Run Tests on Ubuntu
  # =========================
  test_ubuntu:
    name: Run Tests (Ubuntu)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install allure-pytest

      - name: Run Tests with Allure
        run: |
          mkdir -p allure-results/ubuntu-latest
          pytest tests/ --alluredir=allure-results/ubuntu-latest || echo "TEST_FAILURE=true" >> $GITHUB_ENV

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-results
          path: allure-results/ubuntu-latest/

  # =========================
  # 2️⃣ Run Tests on Windows
  # =========================
  test_windows:
    name: Run Tests (Windows)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install allure-pytest

      - name: Run Tests with Allure
        run: |
          mkdir -p allure-results/windows-latest
          pytest tests/ --alluredir=allure-results/windows-latest || echo "TEST_FAILURE=true" >> $env:GITHUB_ENV

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-results
          path: allure-results/windows-latest/

  # =========================
  # 3️⃣ Deploy Reports + Determine Build Status
  # =========================
  deploy_allure:
    name: Deploy Allure Reports
    runs-on: ubuntu-latest
    needs: [test_ubuntu, test_windows]
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Download Test Artifacts
        uses: actions/download-artifact@v4
        with:
          path: allure-results

      - name: Install Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/${ALLURE_VERSION}/allure-${ALLURE_VERSION}.tgz
          tar -xzf allure-${ALLURE_VERSION}.tgz
          mv allure-${ALLURE_VERSION} allure-commandline
          echo "$(pwd)/allure-commandline/bin" >> $GITHUB_PATH

      - name: Copy Executor Info
        run: |
          if [ -f "$PWD/supports/executor.json" ]; then
            echo "✅ Copying executor.json to allure-results/"
            find allure-results -type d -name "ubuntu-latest" -o -name "windows-latest" | while read d; do
              cp "$PWD/supports/executor.json" "$d/"
            done
          else
            echo "⚠️ executor.json not found at supports/executor.json"
          fi

      - name: Determine Build Result
        id: build_status
        run: |
          STATUS="pass"

          # CASE 3: setup/config/env failure
          if [ "${{ needs.test_ubuntu.result }}" = "failure" ] || [ "${{ needs.test_windows.result }}" = "failure" ]; then
            STATUS="fail"
          else
            UB_FAILS=$(grep -s -o '"status":"failed"' allure-results/ubuntu-latest/*.json | wc -l || true)
            WIN_FAILS=$(grep -s -o '"status":"failed"' allure-results/windows-latest/*.json | wc -l || true)

            if [ "$UB_FAILS" -gt 0 ] || [ "$WIN_FAILS" -gt 0 ]; then
              STATUS="unstable"
            fi
          fi

          echo "Final Build Status: $STATUS"
          echo "result=$STATUS" >> $GITHUB_OUTPUT

      - name: Generate Allure Reports
        run: |
          mkdir -p "$SITE_DIR/latest"
          for OS in ubuntu-latest windows-latest; do
            if [ -d "allure-results/$OS" ]; then
              mkdir -p "$SITE_DIR/latest/$OS"
              allure generate "allure-results/$OS" -o "$SITE_DIR/latest/$OS" --clean
              echo "$(date '+%Y-%m-%d %H:%M:%S %Z')" > "$SITE_DIR/latest/$OS/build-info.txt"
            fi
          done

      - name: Create Landing Page
        run: |
          SITE_DIR="site"
          echo "<html><head><title>Allure Reports</title>
          <style>
          body{font-family:sans-serif;margin:20px;}
          ul{list-style:none;padding:0;}
          li{margin:6px 0;}
          a{text-decoration:none;color:#0366d6;}
          a:hover{text-decoration:underline;}
          </style></head><body>
          <h1>🤖 Robotics BDD Simulation CI/CD</h1>
          <h2>🧩 Latest Reports</h2><ul>" > "$SITE_DIR/index.html"

          for OS in ubuntu-latest windows-latest; do
            if [ -d "$SITE_DIR/latest/$OS" ]; then
              TS=$(cat "$SITE_DIR/latest/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
              echo "<li><a href='latest/$OS/'>Latest Report ($OS)</a> - Last run: $TS</li>" >> "$SITE_DIR/index.html"
            fi
          done

          echo "</ul><hr><h2>📊 Build Summary</h2>
          <p>Build Result: <strong>${{ steps.build_status.outputs.result }}</strong></p>
          </body></html>" >> "$SITE_DIR/index.html"

      - name: Deploy Reports to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ env.SITE_DIR }}
