jobs:
  run-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python: ['3.10']

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---------- Linux (Ubuntu) path: build & run in Docker ----------
      - name: "Diagnostic: List Files for Docker Build Context"
        if: matrix.os == 'ubuntu-latest'
        run: ls -F
        shell: bash

      - name: Build Docker Image (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: docker build -t robotics-runner-${{ matrix.os }}:${{ github.run_id }} .
        shell: bash

      - name: Run tests in Docker & collect Allure (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          rm -rf allure-results
          mkdir allure-results
          docker run \
            --name bdd-tests-${{ matrix.os }} \
            -v ${{ github.workspace }}/allure-results:/app/allure-results \
            robotics-runner-${{ matrix.os }}:${{ github.run_id }} \
            pytest --alluredir /app/allure-results
        shell: bash

      # ---------- Windows path: run natively (no Docker) ----------
      - name: Set up Python (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path 'requirements.txt') {
            pip install -r requirements.txt
          } else {
            pip install pytest allure-pytest
          }

      - name: Run tests & collect Allure (Windows native)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          if (Test-Path 'allure-results') { Remove-Item -Recurse -Force 'allure-results' }
          New-Item -ItemType Directory -Force 'allure-results' | Out-Null
          pytest --alluredir 'allure-results'

      # ---------- Inject Allure metadata (OS-specific) ----------
      - name: Inject Allure Metadata into Results Folder (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Injecting Allure support files for $RUNNER_OS..."
          mkdir -p supports
          touch supports/categories.json supports/ubuntu.properties supports/windows.properties
          cp supports/categories.json allure-results/ 2>/dev/null || echo "No categories.json file found"
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "Copying Ubuntu environment properties..."
            cp supports/ubuntu.properties allure-results/environment.properties 2>/dev/null || echo "No Ubuntu environment file found"
          fi
        shell: bash

      - name: Inject Allure Metadata into Results Folder (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force 'supports' | Out-Null
          New-Item -ItemType File -Force 'supports\categories.json' | Out-Null
          if (Test-Path 'supports\categories.json') { Copy-Item 'supports\categories.json' 'allure-results\' }
          if (Test-Path 'supports\windows.properties') {
            Copy-Item 'supports\windows.properties' 'allure-results\environment.properties'
          } else {
            # optional: seed minimal environment.properties
            Set-Content 'allure-results\environment.properties' "OS=Windows"
          }

      # ---------- Upload artifacts (same names as before) ----------
      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results
          retention-days: 7