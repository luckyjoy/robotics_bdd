name: Robotics BDD Simulation CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 15 * * *' # 8AM PDT
  workflow_dispatch:

concurrency:
  group: robotics-bdd-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-tests:
    name: Run tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      # -------------------------------------------------------------
      # Run pytest (Windows) or Docker (Linux)
      # -------------------------------------------------------------
      - name: Run tests (Docker on Linux / pytest on Windows)
        id: run_tests
        shell: bash
        run: |
          set -e
          mkdir -p allure-results

          echo "🧪 Running tests on ${{ runner.os }}..."
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            docker run --rm \
              -v $PWD:/app \
              -w /app python:3.11 \
              bash -c "pip install -r requirements.txt && pytest --alluredir=allure-results || echo 'TEST_FAILED' > allure-results/.unstable"
          else
            pip install -r requirements.txt
            pytest --alluredir=allure-results || echo 'TEST_FAILED' > allure-results/.unstable
          fi
        continue-on-error: true

      - name: Determine build stability
        id: status
        shell: bash
        run: |
          if [ -f allure-results/.unstable ]; then
            echo "BUILD_STATUS=unstable" >> $GITHUB_ENV
            echo "⚠️ Some tests failed but results are available"
          elif [ -d allure-results ] && [ "$(ls -A allure-results)" ]; then
            echo "BUILD_STATUS=passed" >> $GITHUB_ENV
            echo "✅ All tests passed"
          else
            echo "BUILD_STATUS=failed" >> $GITHUB_ENV
            echo "❌ No valid test results"
          fi

      - name: Upload Allure Results
        if: env.BUILD_STATUS != 'failed'
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results

      - name: Add build summary icon
        run: |
          if [ "${{ env.BUILD_STATUS }}" = "passed" ]; then
            ICON="✅"
          elif [ "${{ env.BUILD_STATUS }}" = "unstable" ]; then
            ICON="⚠️"
          else
            ICON="❌"
          fi
          echo "${ICON} **Build Status on ${{ runner.os }}:** ${{ env.BUILD_STATUS }}" >> $GITHUB_STEP_SUMMARY

  # -------------------------------------------------------------
  # Deploy Allure report to GitHub Pages
  # -------------------------------------------------------------
  deploy-pages:
    name: Deploy Allure Report
    needs: run-tests
    if: ${{ always() }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      ALLURE_VERSION: 2.29.0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Ubuntu Allure Results
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ubuntu-latest
          path: allure-results/ubuntu-latest

      - name: Download Windows Allure Results
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: allure-results-windows-latest
          path: allure-results/windows-latest

      - name: Merge Allure Results
        run: |
          mkdir -p merged-results
          cp -r allure-results/ubuntu-latest/* merged-results/ || true
          cp -r allure-results/windows-latest/* merged-results/ || true
          echo "Merged results generated."

      - name: Check valid results
        id: results_check
        run: |
          if [ "$(ls -A merged-results || true)" ]; then
            echo "results_exist=true" >> $GITHUB_OUTPUT
          else
            echo "results_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Stop if no valid results
        if: steps.results_check.outputs.results_exist == 'false'
        run: echo "❌ No valid test results found. Skipping report." && exit 0

      - name: Setup Allure CLI
        run: |
          curl -L -o allure.tgz "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.tgz"
          mkdir -p allure
          tar -xzf allure.tgz -C allure --strip-components 1
          echo "$PWD/allure/bin" >> $GITHUB_PATH

      - name: Prepare Allure metadata (Trend + Executor)
        run: |
          mkdir -p merged-results
          cat <<EOF > merged-results/executor.json
          {
            "name": "GitHub Actions",
            "type": "github",
            "buildOrder": ${{ github.run_number }},
            "buildName": "Build #${{ github.run_number }}",
            "buildUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "reportUrl": "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/",
            "status": "completed"
          }
          EOF

          cat <<EOF > merged-results/categories.json
          [
            {"name": "Product defects", "matchedStatuses": ["failed"]},
            {"name": "Unstable scenarios", "matchedStatuses": ["broken"]}
          ]
          EOF

      - name: Generate Allure Report
        run: |
          allure generate merged-results --clean -o site
          echo "Report generated successfully at ./site"

      - name: Preserve Trend History
        run: |
          mkdir -p site/history
          cp -r merged-results/history site/history || true

      # ✅ Re-added your original deployment and badges
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: site
          publish_branch: gh-pages
          commit_message: "Deploy Allure Reports - Build ${{ github.run_number }}"

      - name: Add workflow badges to summary
        run: |
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          OWNER=${GITHUB_REPOSITORY_OWNER}

          echo "### Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest_Build-blue)](https://${OWNER}.github.io/${REPO_NAME}/latest/ubuntu-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest_Build-blue)](https://${OWNER}.github.io/${REPO_NAME}/latest/windows-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](https://${OWNER}.github.io/${REPO_NAME}/)" >> $GITHUB_STEP_SUMMARY
