name: Robotics BDD Simulation CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ALLURE_VERSION: 2.29.0
  SITE_DIR: site
  RESULTS_DIR: allure-results

jobs:
  test:
    name: Run Tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    continue-on-error: true  # Allow test jobs to continue for UNSTABLE builds
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-bdd allure-pytest

      - name: Run Tests
        id: run_tests
        run: |
          mkdir -p ${{ env.RESULTS_DIR }}
          pytest --alluredir=${{ env.RESULTS_DIR }} || echo "‚ö†Ô∏è Tests failed"
        continue-on-error: true

      - name: Determine Build Status
        id: status
        run: |
          if [ "${{ steps.run_tests.outcome }}" = "failure" ]; then
            echo "status=UNSTABLE" >> $GITHUB_OUTPUT
          else
            echo "status=PASS" >> $GITHUB_OUTPUT
          fi

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: ${{ env.RESULTS_DIR }}

  report:
    name: Generate Allure Reports and Deploy
    runs-on: ubuntu-latest
    needs: test
    if: ${{ always() }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ‚úÖ Restore full site for Trend + History (no "Not Found" errors)
      - name: Restore Previous Allure Site (for Trend + History)
        uses: actions/download-artifact@v4
        with:
          name: allure-history
          path: previous_site
        continue-on-error: true

      - name: Merge Previous Site into Current Build
        run: |
          SITE_DIR="${{ env.SITE_DIR }}"
          mkdir -p "$SITE_DIR"
          if [ -d "previous_site" ]; then
            echo "üóÇÔ∏è Restoring previous site for trend & build history..."
            cp -r previous_site/* "$SITE_DIR/" || true
          else
            echo "‚ö†Ô∏è No previous site found (first run or expired artifact)."
          fi

      - name: Download Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/${{ env.ALLURE_VERSION }}/allure-${{ env.ALLURE_VERSION }}.tgz
          tar -xzf allure-${{ env.ALLURE_VERSION }}.tgz
          mv allure-${{ env.ALLURE_VERSION }} allure-commandline
          echo "$(pwd)/allure-commandline/bin" >> $GITHUB_PATH

      - name: Download Allure Artifacts
        uses: actions/download-artifact@v4
        with:
          path: allure-results

      # ‚úÖ Generate Allure reports with merged trend history
      - name: Generate Allure Reports Per OS
        run: |
          SITE_DIR="${{ env.SITE_DIR }}"
          mkdir -p "$SITE_DIR"

          for OS in ubuntu-latest windows-latest; do
            RESULTS_DIR="allure-results/allure-results-${OS}"
            REPORT_DIR="$SITE_DIR/${{ github.run_number }}/${OS}"
            LATEST_DIR="$SITE_DIR/latest/${OS}"
            mkdir -p "$REPORT_DIR"

            # Merge previous history (Trend fix)
            if [ -d "$LATEST_DIR/history" ]; then
              echo "üîß Merging history for $OS..."
              mkdir -p "$RESULTS_DIR/history"
              cp -r "$LATEST_DIR/history"/* "$RESULTS_DIR/history/" || true
            fi

            # Generate new report
            allure generate "$RESULTS_DIR" -o "$REPORT_DIR" --clean

            # Update 'latest' links
            rm -rf "$LATEST_DIR"
            mkdir -p "$(dirname "$LATEST_DIR")"
            cp -r "$REPORT_DIR" "$LATEST_DIR"
          done

      - name: Determine Final Build Status
        id: final_status
        run: |
          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "status=FAIL" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "status=PASS" >> $GITHUB_OUTPUT
          else
            echo "status=UNSTABLE" >> $GITHUB_OUTPUT
          fi

      - name: Rebuild index.html (History + Status)
        run: |
          SITE_DIR="${{ env.SITE_DIR }}"
          INDEX_FILE="$SITE_DIR/index.html"
          STATUS="${{ steps.final_status.outputs.status }}"
          echo "<html><head><meta charset='UTF-8'><title>ü§ñ Robotics BDD Simulation CI/CD Build History</title></head><body>" > "$INDEX_FILE"
          echo "<h1>ü§ñ Robotics BDD Simulation CI/CD Build History</h1>" >> "$INDEX_FILE"

          # Display latest builds
          echo "<h2>üß© Latest Allure Reports</h2>" >> "$INDEX_FILE"
          for OS in ubuntu-latest windows-latest; do
            TIME=$(date +"%a %b %d %T PDT %Y")
            echo "Latest Report ($OS) - Last run: $TIME --> <a href='latest/$OS/index.html'>Open</a><br>" >> "$INDEX_FILE"
          done

          # Status summary
          echo "<h2>üìã Build Status</h2>" >> "$INDEX_FILE"
          case "$STATUS" in
            PASS)
              echo "<p>‚úÖ Pass ‚Äî Everything succeeded</p>" >> "$INDEX_FILE"
              ;;
            UNSTABLE)
              echo "<p>‚ö†Ô∏è Unstable ‚Äî Environment okay but test(s) failed</p>" >> "$INDEX_FILE"
              ;;
            FAIL)
              echo "<p>‚ùå Fail ‚Äî Pre-test failure or setup issue</p>" >> "$INDEX_FILE"
              ;;
          esac

          # History section
          echo "<h2>üìä Report History</h2>" >> "$INDEX_FILE"
          BUILDS=$(find "$SITE_DIR" -mindepth 1 -maxdepth 1 -type d -printf "%f\n" | grep -E '^[0-9]+$' | sort -nr)
          for B in $BUILDS; do
            for OS in ubuntu-latest windows-latest; do
              if [ -f "$SITE_DIR/$B/$OS/index.html" ]; then
                TIME=$(date +"%a %b %d %T PDT %Y")
                echo "Build #$B ($OS) - $TIME --> <a href='$B/$OS/index.html'>Open</a><br>" >> "$INDEX_FILE"
              fi
            done
          done

          echo "</body></html>" >> "$INDEX_FILE"

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.SITE_DIR }}

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # ‚úÖ Keep site and trend data for next build
      - name: Upload Allure History Artifact (for Next Build)
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: ${{ env.SITE_DIR }}
          retention-days: 14

      - name: Add Workflow Summary (Badges)
        run: |
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          BASE_URL="${PAGE_URL%/}"
          echo "### ü§ñ Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest_Build-blue)](${BASE_URL}/latest/ubuntu-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest_Build-blue)](${BASE_URL}/latest/windows-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](${BASE_URL}/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build #${GITHUB_RUN_NUMBER} | Status: $STATUS_ICON $STATUS_TEXT" >> $GITHUB_STEP_SUMMARY
