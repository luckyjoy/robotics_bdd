name: Robotics BDD Simulation CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 7 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  checks: read
  pull-requests: read
  statuses: read
  pages: none
  id-token: none

jobs:
  run-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python with dependency caching
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          echo "Installing dependencies from requirements.txt..."
          pip install -r requirements.txt

      - name: Clean previous allure-results
        shell: bash
        run: |
          echo "Cleaning allure-results folder..."
          if [ -d "allure-results" ]; then rm -rf allure-results; fi

      - name: Prepare Allure environment
        shell: bash
        run: |
          echo "Creating Allure directories and environment files for $RUNNER_OS..."
          mkdir -p allure-results
          
          cp supports/categories.json allure-results/categories.json 2>/dev/null || echo "No categories.json found."
          
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "Using Ubuntu environment.properties..."
            cp supports/ubuntu.properties allure-results/environment.properties 2>/dev/null || echo "No Ubuntu environment found."
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "Using Windows environment.properties..."
            cp supports/windows.properties allure-results/environment.properties 2>/dev/null || echo "No Windows environment found."
          fi
          
          echo "Generating executor.json..."
          cat <<EOF > allure-results/executor.json
          {
            "name": "GitHub Actions",
            "type": "github",
            "url": "${{ github.server_url }}",
            "buildOrder": ${{ github.run_number }},
            "buildName": "Run #${{ github.run_number }}",
            "buildUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "reportName": "Robotics BDD Simulation CI/CD",
            "reportUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF

      - name: Run tests
        id: run_pytest
        continue-on-error: true
        shell: bash
        run: |
          echo "Running pytest navigation tests..."
          pytest -m navigation --alluredir=allure-results | tee pytest.log

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results
          retention-days: 7

      - name: Mark job as failed if tests failed
        if: steps.run_pytest.outcome == 'failure'
        run: exit 1

  deploy-pages:
    if: always()
    runs-on: ubuntu-latest
    needs: run-tests
    permissions:
      contents: write
    env:
      ALLURE_VERSION: 2.25.0

    steps:
      - name: Checkout repository (Primary branch)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout gh-pages history
        shell: bash
        run: |
          echo "Attempting to clone gh-pages branch to access report history..."
          git clone --depth 1 --branch gh-pages "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}" _history || true

      - name: Download Linux Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ubuntu-latest
          path: allure-results/ubuntu-latest

      - name: Download Windows Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-windows-latest
          path: allure-results/windows-latest

      - name: Cache Allure CLI
        id: cache-allure
        uses: actions/cache@v4
        with:
          path: allure-commandline
          key: ${{ runner.os }}-allure-${{ env.ALLURE_VERSION }}

      - name: Setup Allure CLI
        if: steps.cache-allure.outputs.cache-hit != 'true'
        run: |
          echo "Setting up Allure CLI..."
          curl -L -o allure.tgz "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${{ env.ALLURE_VERSION }}/allure-commandline-${{ env.ALLURE_VERSION }}.tgz"
          mkdir -p allure-commandline
          tar -xzf allure.tgz -C allure-commandline --strip-components 1
      
      - name: Add Allure to PATH
        run: echo "$PWD/allure-commandline/bin" >> $GITHUB_PATH

      - name: Generate Allure Reports
        shell: bash
        run: |
          echo "Generating Allure reports..."
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          SITE_DIR="site"
          HISTORY_DIR="_history"

          # 1. Clean up old 'site' dir and move '_history' (old gh-pages content) into 'site'
          # This robustly preserves all old build folders (e.g., #140, #141).
          rm -rf "$SITE_DIR"
          if [ -d "$HISTORY_DIR" ]; then
              mv "$HISTORY_DIR" "$SITE_DIR"
          fi
          
          # Ensure 'site' exists and contains the 'latest' folder structure
          mkdir -p "$SITE_DIR/latest"

          for OS in ubuntu-latest windows-latest; do
            RESULTS_DIR="allure-results/$OS"
            
            # Use history from the now-reinstated site dir for trend graph
            HISTORY_SOURCE_DIR="$SITE_DIR/latest/$OS/history" 
            REPORT_DIR="allure-report-${BUILD_NUMBER}-${OS}"

            if [ -d "$HISTORY_SOURCE_DIR" ]; then
              echo "Copying history from $HISTORY_SOURCE_DIR to $RESULTS_DIR"
              cp -r "$HISTORY_SOURCE_DIR" "$RESULTS_DIR/"
            else
              echo "No previous history found for $OS."
            fi
            
            # Generate new report
            allure generate "$RESULTS_DIR" -o "$REPORT_DIR" --clean

            # 2. Copy the new report into both the current build folder (#142) and 'latest',
            # overwriting the old 'latest' (which was #141).
            mkdir -p "$SITE_DIR/$BUILD_NUMBER/$OS"
            cp -r "$REPORT_DIR"/* "$SITE_DIR/$BUILD_NUMBER/$OS/"

            mkdir -p "$SITE_DIR/latest/$OS"
            cp -r "$REPORT_DIR"/* "$SITE_DIR/latest/$OS/"

            date -u +"%Y-%m-%d %H:%M:%S UTC" > "$SITE_DIR/$BUILD_NUMBER/$OS/build-info.txt"
            cp "$SITE_DIR/$BUILD_NUMBER/$OS/build-info.txt" "$SITE_DIR/latest/$OS/build-info.txt"
          done

      - name: Rebuild index.html
        shell: bash
        run: |
          SITE_DIR="site"
          REPO="${GITHUB_REPOSITORY##*/}"
          OWNER="${GITHUB_REPOSITORY_OWNER}"

          echo "<html><head><title>Allure Reports History</title><style>body{font-family:sans-serif}</style></head><body><h1>Allure Reports History</h1><hr><ul>" > "$SITE_DIR/index.html"

          for OS in ubuntu-latest windows-latest; do
            if [ -d "$SITE_DIR/latest/$OS" ]; then
              TS=$(cat "$SITE_DIR/latest/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
              echo "<li><strong><a href='latest/$OS/'>Latest Report ($OS)</a></strong> - Last run: $TS</li>" >> "$SITE_DIR/index.html"
            fi
          done

          echo "</ul><hr><h2>Historical Builds</h2><ul>" >> "$SITE_DIR/index.html"

          BUILDS=$(find "$SITE_DIR" -maxdepth 1 -type d -name "[0-9]*" | xargs -n 1 basename | sort -nr)
          for BUILD in $BUILDS; do
            for OS in ubuntu-latest windows-latest; do
              if [ -d "$SITE_DIR/$BUILD/$OS" ]; then
                TS=$(cat "$SITE_DIR/$BUILD/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
                echo "<li><a href='${BUILD}/${OS}/'>Build #${BUILD} ($OS)</a> - ${TS}</li>" >> "$SITE_DIR/index.html"
              fi
            done
          done

          echo "</ul></body></html>" >> "$SITE_DIR/index.html"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: site
          publish_branch: gh-pages
          commit_message: "Deploy Allure Reports - Build ${{ github.run_number }}"

      - name: Add workflow badges to summary
        run: |
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          OWNER=${GITHUB_REPOSITORY_OWNER}

          echo "### Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest-blue)](https://${OWNER}.github.io/${REPO_NAME}/latest/ubuntu-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest-blue)](https://${OWNER}.github.io/${REPO_NAME}/latest/windows-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](https://${OWNER}.github.io/${REPO_NAME}/)" >> $GITHUB_STEP_SUMMARY

---

## Explanation of Fixes ðŸ’¡

### 1. Fixed History Deletion (Build 140)

The previous method of copying the contents of the checked-out history folder (`_history`) into the new report directory (`site`) was prone to error and loss of files.

* **Change**: In the `Generate Allure Reports` step, I replaced the initial `cp -r` command with a cleaner **move operation (`mv`)**:
    ```bash
    rm -rf "$SITE_DIR"
    if [ -d "$HISTORY_DIR" ]; then
        mv "$HISTORY_DIR" "$SITE_DIR"
    fi
    ```
* **Effect**: This now *renames* the entire contents of the previously deployed `gh-pages` branch (`_history`) to the target deployment folder (`site`). This ensures that **all** previous build folders (including 140 and 141) are preserved intact before the new report (142) is added.

### 2. Fixed Latest Build Mismatch (142 vs 141)

* **Problem**: The Allure History page was showing the previous build (141) as the latest.
* **Solution**: By fixing the history management (Point 1), the `site` directory now contains all old builds (140, 141) and the newly generated build (142). The `Rebuild index.html` step then correctly executes and reads all folders in the `site` directory. Since build 142 is now successfully added to the `site` directory, it will be the highest number found, ensuring the links are correctly updated:
    * The `Latest Report` links point to `$SITE_DIR/latest/OS`, which is overwritten with Build 142's content.
    * The `Historical Builds` list is regenerated and correctly includes the new `Build #142` at the top of the list.