name: ðŸ¤– Robotics BDD Simulation CI/CD

on:
  push:
    branches:
      - main

# Required for Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  run-tests:
    name: Run tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install Dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests with Allure
        id: run-tests
        shell: bash   # ensure consistent behavior on Windows runner
        run: |
          mkdir -p "allure-results/${{ matrix.os }}"
          pytest tests/ --alluredir="allure-results/${{ matrix.os }}" || true

      # NEW: Upload results so deploy job can fetch them
      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results/${{ matrix.os }}
          if-no-files-found: warn
          retention-days: 14

  deploy-allure:
    name: Deploy Allure Report
    runs-on: ubuntu-latest
    needs: run-tests
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    env:
      ALLURE_VERSION: 2.29.0
      SITE_DIR: site
    steps:
      # Keep your history between runs
      - name: Restore Allure History Cache
        uses: actions/cache/restore@v4
        with:
          path: site
          key: allure-site-${{ github.ref_name }}
          enableCrossOsArchive: true

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Allure CLI
        shell: bash
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/${ALLURE_VERSION}/allure-${ALLURE_VERSION}.tgz
          tar -xzf allure-${ALLURE_VERSION}.tgz
          sudo mv allure-${ALLURE_VERSION}/bin/allure /usr/local/bin/allure

      # NEW: Download matrix artifacts into local allure-results/
      - name: Download Allure results (both OS)
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-*
          path: allure-results
          merge-multiple: true

      - name: Generate Allure Reports (Ubuntu + Windows)
        shell: bash
        run: |
          mkdir -p "${SITE_DIR}/latest"
          BUILD_NUMBER="${GITHUB_RUN_NUMBER}"
          echo "BUILD_NUMBER=${BUILD_NUMBER}" >> $GITHUB_ENV

          for OS in ubuntu-latest windows-latest; do
            if [ -d "allure-results/${OS}" ] && [ "$(ls -A "allure-results/${OS}")" ]; then
              # NOTE: use --clean (valid flag)
              allure generate "allure-results/${OS}" -o "${SITE_DIR}/latest/${OS}" --clean
              mkdir -p "${SITE_DIR}/${BUILD_NUMBER}/${OS}"
              cp -r "${SITE_DIR}/latest/${OS}/"* "${SITE_DIR}/${BUILD_NUMBER}/${OS}/"
              date +"%Y-%m-%d %H:%M:%S %Z" > "${SITE_DIR}/${BUILD_NUMBER}/${OS}/build-info.txt"
              cp "${SITE_DIR}/${BUILD_NUMBER}/${OS}/build-info.txt" "${SITE_DIR}/latest/${OS}/build-info.txt"
            fi
          done

      - name: Update Executor and Trend Data
        shell: bash
        run: |
          for OS in ubuntu-latest windows-latest; do
            if [ -d "${SITE_DIR}/latest/${OS}" ]; then
              echo '{"buildOrder":'"${GITHUB_RUN_NUMBER}"', "reportName":"'"${OS} Report"'"}' > "${SITE_DIR}/latest/${OS}/widgets/executor.json" || true
              cp -r "${SITE_DIR}/latest/${OS}/widgets" "${SITE_DIR}/widgets" || true
            fi
          done

      - name: Rebuild index.html (History Page)
        shell: bash
        run: |
          SITE_DIR="site"
          {
            echo "<html><head><title>Allure Reports History</title>"
            echo "<style>body{font-family:sans-serif;margin:20px;}ul{list-style:none;padding:0;}li{margin:6px 0;}a{text-decoration:none;color:#0366d6;}a:hover{text-decoration:underline;}</style></head><body><h1>Allure Reports History</h1><hr><ul>"
            for OS in ubuntu-latest windows-latest; do
              if [ -d "$SITE_DIR/latest/$OS" ]; then
                TS=$(cat "$SITE_DIR/latest/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
                echo "<li><strong><a href='latest/$OSeport ($OS)</a></strong> - Last run: $TS</li>"
              fi
            done
            echo "</ul><hr><h2>Historical Builds</h2><ul>"
            BUILDS=$(find "$SITE_DIR" -maxdepth 1 -type d -name "[0-9]*" -printf "%f\n" 2>/dev/null | sort -nr || true)
            for BUILD in $BUILDS; do
              for OS in ubuntu-latest windows-latest; do
                if [ -d "$SITE_DIR/$BUILD/$OS" ]; then
                  TS=$(cat "$SITE_DIR/$BUILD/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
                  echo "<li>${BUILD}/${OS}/Build #${BUILD} (${OS})</a> - ${TS}</li>"
                fi
              done
            done
            echo "</ul></body></html>"
          } > "$SITE_DIR/index.html"

      # (Optional) If you keep this step, keep it minimal. Relative paths usually suffice for Pages.
      - name: Ensure relative asset paths
        if: always()
        shell: bash
        run: |
          for OS in ubuntu-latest windows-latest; do
            REPORT_DIR="site/latest/$OS"
            if [ -f "$REPORT_DIR/index.html" ]; then
              sed -i 's/src="\//src=".\/'/g "$REPORT_DIR/index.html" || true
              sed -i 's/href="\//href=".\/'/g "$REPORT_DIR/index.html" || true
            fi
          done

      - name: Set Base URL for GitHub Pages
        shell: bash
        run: |
          touch site/.nojekyll

      # Preserve site/ for next run, so history persists
      - name: Save Allure History Cache
        uses: actions/cache/save@v4
        with:
          path: site
          key: allure-site-${{ github.ref_name }}

      # Deploy to GitHub Pages
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Add Workflow Summary (Badges)
        run: |
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          BASE_URL="${PAGE_URL%/}" 

          echo "### ðŸ¤– Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          # Explicitly append /index.html to prevent 404 errors on deep subdirectories
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest_Build-blue)](${BASE_URL}/latest/ubuntu-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest_Build-blue)](${BASE_URL}/latest/windows-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](${BASE_URL}/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build #${GITHUB_RUN_NUMBER} | Status: âœ… All tests passed" >> $GITHUB_STEP_SUMMARY