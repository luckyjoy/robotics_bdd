name: Robotics BDD Simulation CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 15 * * *'  # 8AM PDT
  workflow_dispatch:

concurrency:
  group: robotics-bdd-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-tests:
    name: Run tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      # -------------------------------------------------------------
      # Run tests (Docker on Linux / pytest on Windows)
      # -------------------------------------------------------------
      - name: Run tests
        id: run-tests
        shell: bash
        run: |
          mkdir -p allure-results
          set +e  # prevent pipeline from stopping on failure

          if [[ "${{ runner.os }}" == "Linux" ]]; then
            echo "🐳 Running tests in Docker..."
            docker run --rm \
              -v $PWD:/app -w /app python:3.11 \
              bash -c "pip install -r requirements.txt && pytest -m 'navigation or sensors or walking' --alluredir=allure-results || echo 'unstable' > allure-results/status.txt"
          else
            echo "🪟 Running tests natively on Windows..."
            pip install -r requirements.txt
            pytest -m "navigation or sensors or walking" --alluredir=allure-results || echo 'unstable' > allure-results/status.txt
          fi

          # Determine status
          EXIT_CODE=$?
          if [ -f allure-results/status.txt ]; then
            STATUS=$(cat allure-results/status.txt)
          elif [ "$(ls -A allure-results | wc -l)" -eq 0 ]; then
            STATUS="failed"
          elif [ $EXIT_CODE -ne 0 ]; then
            STATUS="unstable"
          else
            STATUS="passed"
          fi

          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "Test run status: $STATUS"

      # -------------------------------------------------------------
      # Mark build icon for summary
      # -------------------------------------------------------------
      - name: Set build icon
        id: set-icon
        shell: bash
        run: |
          STATUS="${{ steps.run-tests.outputs.status }}"
          if [ "$STATUS" = "passed" ]; then
            echo "result_icon=✅" >> $GITHUB_ENV
          elif [ "$STATUS" = "unstable" ]; then
            echo "result_icon=⚠️" >> $GITHUB_ENV
          else
            echo "result_icon=❌" >> $GITHUB_ENV
          fi

      # -------------------------------------------------------------
      # Upload Allure Results
      # -------------------------------------------------------------
      - name: Upload Allure Results
        if: ${{ steps.run-tests.outputs.status != 'failed' }}
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results

  # -------------------------------------------------------------
  # Deploy Allure Report
  # -------------------------------------------------------------
  deploy-pages:
    name: Deploy Allure Report
    needs: run-tests
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      ALLURE_VERSION: 2.29.0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Ubuntu Allure Results
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ubuntu-latest
          path: allure-results/ubuntu-latest

      - name: Download Windows Allure Results
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: allure-results-windows-latest
          path: allure-results/windows-latest

      - name: Merge Allure Results
        shell: bash
        run: |
          mkdir -p merged-results
          cp -r allure-results/ubuntu-latest/* merged-results/ || true
          cp -r allure-results/windows-latest/* merged-results/ || true

      - name: Check if results exist
        id: check-results
        shell: bash
        run: |
          if [ -d merged-results ] && [ "$(ls -A merged-results | wc -l)" -gt 0 ]; then
            echo "results_exist=true" >> $GITHUB_OUTPUT
          else
            echo "results_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Stop if no results
        if: steps.check-results.outputs.results_exist == 'false'
        run: echo "❌ No valid Allure results; skipping report." && exit 0

      - name: Setup Allure CLI
        shell: bash
        run: |
          curl -L -o allure.tgz "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.tgz"
          mkdir -p allure
          tar -xzf allure.tgz -C allure --strip-components 1
          echo "$PWD/allure/bin" >> $GITHUB_PATH

      - name: Add Allure metadata (Trend + Executor)
        shell: bash
        run: |
          mkdir -p merged-results
          cat <<EOF > merged-results/executor.json
          {
            "name": "GitHub Actions",
            "type": "CI/CD",
            "buildOrder": ${{ github.run_number }},
            "buildName": "Build #${{ github.run_number }}",
            "buildUrl": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "reportName": "Allure Report - Build #${{ github.run_number }}",
            "reportUrl": "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/latest/",
            "executor": "${{ runner.os }}"
          }
          EOF

      - name: Generate Allure Report
        shell: bash
        run: |
          allure generate merged-results --clean -o site
          mkdir -p site/history
          cp -r merged-results/history site/history || true

      # -------------------------------------------------------------
      # Deploy to GitHub Pages + badges
      # -------------------------------------------------------------
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: site
          publish_branch: gh-pages
          commit_message: "Deploy Allure Reports - Build ${{ github.run_number }}"

      - name: Add workflow badges to summary
        shell: bash
        run: |
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          OWNER=${GITHUB_REPOSITORY_OWNER}

          echo "### 🤖 Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 🧩 Latest Allure Reports" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest_Build-blue)](https://${OWNER}.github.io/${REPO_NAME}/latest/ubuntu-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest_Build-blue)](https://${OWNER}.github.io/${REPO_NAME}/latest/windows-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 📊 Report History" >> $GITHUB_STEP_SUMMARY
          echo "[![Previous Builds](https://img.shields.io/badge/All_Previous_Builds-green)](https://${OWNER}.github.io/${REPO_NAME}/latest/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build ${{ github.run_number }} | Status: ${{ env.result_icon }}" >> $GITHUB_STEP_SUMMARY
