name: Robotics BDD CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

env:
  ALLURE_VERSION: 2.29.0
  SITE_DIR: site

jobs:
  test:
    name: Run tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    outputs:
      test_outcome: ${{ steps.run_tests.outputs.test_outcome }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker Image
        if: matrix.os == 'ubuntu-latest'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: robotics-bdd:ci-build
          load: true

      - name: Run tests
        id: run_tests
        shell: bash
        run: |
          set +e
          OS_NAME=${{ matrix.os }}
          RESULTS_DIR="allure-results/$OS_NAME"
          mkdir -p "$RESULTS_DIR"

          if [[ "$OS_NAME" == "ubuntu-latest" ]]; then
            echo "🐳 Running tests in Docker..."
            docker run --rm -v $PWD:/workspace -w /workspace robotics-bdd:ci-build \
              pytest -v -m navigation --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          else
            echo "🪟 Running tests on Windows..."
            pytest -v -m navigation --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          fi

          if [ ! -d "$RESULTS_DIR" ] || [ -z "$(find $RESULTS_DIR -type f -name '*.json' 2>/dev/null)" ]; then
            echo "❌ No Allure results found — setup or configuration failure."
            echo "test_outcome=FAILED" >> $GITHUB_OUTPUT
            exit 1
          fi

          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "⚠️ Some tests failed (pytest exit code $TEST_EXIT_CODE)."
            echo "test_outcome=UNSTABLE" >> $GITHUB_OUTPUT
          else
            echo "✅ All tests passed successfully."
            echo "test_outcome=PASSED" >> $GITHUB_OUTPUT
          fi

      - name: Copy executor.json
        if: always()
        shell: bash  
        run: |
          DST_DIR="allure-results/${{ matrix.os }}"
          mkdir -p "$DST_DIR"
          echo '{' > "$DST_DIR/executor.json"
          echo '  "name": "GitHub Actions",' >> "$DST_DIR/executor.json"
          echo '  "type": "github",' >> "$DST_DIR/executor.json"
          echo '  "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",' >> "$DST_DIR/executor.json"
          echo '  "buildName": "Robotics BDD Simulation",' >> "$DST_DIR/executor.json"
          echo '  "buildUrl": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"' >> "$DST_DIR/executor.json"
          echo '}' >> "$DST_DIR/executor.json"

      - name: Upload Allure Results Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results/${{ matrix.os }}
          retention-days: 5

  report:
    name: Generate Allure Report and Deploy
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/${{ env.ALLURE_VERSION }}/allure-${{ env.ALLURE_VERSION }}.tgz
          tar -xzf allure-${{ env.ALLURE_VERSION }}.tgz
          mv allure-${{ env.ALLURE_VERSION }} allure-commandline
          echo "$(pwd)/allure-commandline/bin" >> $GITHUB_PATH

      - name: Download Allure Artifacts
        uses: actions/download-artifact@v4
        with:
          path: allure-results

      - name: Preserve Previous Build History
        shell: bash
        run: |
          git fetch origin gh-pages || true
          if git show-ref --quiet refs/heads/gh-pages; then
            echo "📜 Restoring existing gh-pages history..."
            git clone --depth 1 --branch gh-pages "https://github.com/${{ github.repository }}.git" old_site || true
            mkdir -p site
            cp -r old_site/* site/ || true
          else
            echo "🆕 No previous gh-pages branch found."
          fi

      - name: Consolidate Artifacts to Target Folders
        shell: bash
        run: |
          mkdir -p allure-results/ubuntu-latest
          mkdir -p allure-results/windows-latest
          if [ -d allure-results/allure-results-ubuntu-latest ]; then
            mv allure-results/allure-results-ubuntu-latest/* allure-results/ubuntu-latest/
            rm -rf allure-results/allure-results-ubuntu-latest
          fi
          if [ -d allure-results/allure-results-windows-latest ]; then
            mv allure-results/allure-results-windows-latest/* allure-results/windows-latest/
            rm -rf allure-results/allure-results-windows-latest
          fi

      - name: Generate Allure Reports (with executor and history)
        shell: bash
        run: |
          BUILD_NUMBER=${{ github.run_number }}
          SITE_DIR="site"
          mkdir -p "$SITE_DIR/latest"
          echo "" > "$SITE_DIR/.nojekyll"

          for OS in ubuntu-latest windows-latest; do
            RESULTS_DIR="allure-results/$OS"
            REPORT_DIR_BUILD="$SITE_DIR/$BUILD_NUMBER/$OS"
            REPORT_DIR_LATEST="$SITE_DIR/latest/$OS"
            mkdir -p "$REPORT_DIR_BUILD"

            if [ -d "$REPORT_DIR_LATEST/history" ]; then
              echo "📈 Copying trend history..."
              mkdir -p "$RESULTS_DIR/history"
              cp -r "$REPORT_DIR_LATEST/history"/* "$RESULTS_DIR/history/" || true
            fi

            allure generate "$RESULTS_DIR" -o "$REPORT_DIR_BUILD" --clean

            mkdir -p "$REPORT_DIR_BUILD/widgets"
            echo '{' > "$REPORT_DIR_BUILD/widgets/executor.json"
            echo '  "name": "GitHub Actions",' >> "$REPORT_DIR_BUILD/widgets/executor.json"
            echo '  "type": "github",' >> "$REPORT_DIR_BUILD/widgets/executor.json"
            echo '  "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",' >> "$REPORT_DIR_BUILD/widgets/executor.json"
            echo '  "buildName": "Robotics BDD Simulation CI/CD",' >> "$REPORT_DIR_BUILD/widgets/executor.json"
            echo "  \"buildOrder\": $BUILD_NUMBER," >> "$REPORT_DIR_BUILD/widgets/executor.json"
            echo '  "buildUrl": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",' >> "$REPORT_DIR_BUILD/widgets/executor.json"
            echo "  \"reportName\": \"$OS Report\"," >> "$REPORT_DIR_BUILD/widgets/executor.json"
            echo '  "executor": "GitHub Actions"' >> "$REPORT_DIR_BUILD/widgets/executor.json"
            echo '}' >> "$REPORT_DIR_BUILD/widgets/executor.json"

            mkdir -p "$REPORT_DIR_LATEST"
            cp -r "$REPORT_DIR_BUILD"/* "$REPORT_DIR_LATEST/"
            date -u > "$REPORT_DIR_LATEST/build-info.txt"
            date -u > "$REPORT_DIR_BUILD/build-info.txt"
          done

      - name: Fix Allure Paths
        shell: bash
        run: |
          find site -type f -name 'index.html' | while read FILE_PATH; do
            perl -pi -e 's|src="/|src="./|g' "$FILE_PATH"
            perl -pi -e 's|href="/|href="./|g' "$FILE_PATH"
          done

      - name: Rebuild index.html
        shell: bash
        run: |
          SITE_DIR="site"
          CURRENT_LA_TIME=$(TZ='America/Los_Angeles' date)
          mkdir -p "$SITE_DIR"
          echo "<html><head><title>Allure Reports History</title>
          <style>body{font-family:sans-serif;margin:20px;}ul{list-style:none;padding:0;}li{margin:6px 0;}a{text-decoration:none;color:#0366d6;}a:hover{text-decoration:underline;}</style></head><body>
          <h1>🤖 Robotics BDD Simulation CI/CD Build History</h1>
          <h2>🧩 Latest Allure Reports</h2><hr><ul>" > "$SITE_DIR/index.html"

          for OS in ubuntu-latest windows-latest; do
            if [ -d "$SITE_DIR/latest/$OS" ]; then
              TS_UTC=$(cat "$SITE_DIR/latest/$OS/build-info.txt" 2>/dev/null || echo "")
              TS_DISPLAY=$(date -d "$TS_UTC" -u +'%a %b %d %H:%M:%S UTC %Y' 2>/dev/null || echo "$TS_UTC")
              echo "<li><strong><a href='latest/$OS/'>Latest Report ($OS)</a></strong> - Last run: $TS_DISPLAY</li>" >> "$SITE_DIR/index.html"
            else
              echo "<li><strong>$OS:</strong> (No report found)</li>" >> "$SITE_DIR/index.html"
            fi
          done

          echo "</ul><hr><h2>📊 Report History</h2><ul>" >> "$SITE_DIR/index.html"
          BUILDS=$(find "$SITE_DIR" -maxdepth 1 -type d -regex ".*/[0-9]\+" -printf "%f\n" 2>/dev/null | sort -nr)
          if [ -z "$BUILDS" ]; then
            echo "<li>No previous builds found.</li>" >> "$SITE_DIR/index.html"
          else
            for BUILD in $BUILDS; do
              for OS in ubuntu-latest windows-latest; do
                if [ -d "$SITE_DIR/$BUILD/$OS" ]; then
                  TS_UTC=$(cat "$SITE_DIR/$BUILD/$OS/build-info.txt" 2>/dev/null || echo "")
                  TS_DISPLAY=$(date -d "$TS_UTC" -u +'%a %b %d %H:%M:%S UTC %Y' 2>/dev/null || echo "$TS_UTC")
                  echo "<li><a href='${BUILD}/${OS}/'>Build #${BUILD} ($OS)</a> - ${TS_DISPLAY}</li>" >> "$SITE_DIR/index.html"
                fi
              done
            done
          fi
          echo "</ul><hr><p><em>Generated automatically on $CURRENT_LA_TIME</em></p></body></html>" >> "$SITE_DIR/index.html"

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Add Workflow Summary (Badges)
        run: |
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          BASE_URL="${PAGE_URL%/}"
          TEST_STATUS=${{ steps.test_status_check.outputs.status }}

          if [[ "$TEST_STATUS" == "FAILED" ]]; then
            STATUS_ICON="❌"
            STATUS_TEXT="Failed"
          elif [[ "$TEST_STATUS" == "UNSTABLE" ]]; then
            STATUS_ICON="⚠️"
            STATUS_TEXT="Unstable"
          else
            STATUS_ICON="✅"
            STATUS_TEXT="Passed"
          fi

          echo "### 🤖 Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Report](https://img.shields.io/badge/Ubuntu-Latest-blue)](${BASE_URL}/latest/ubuntu-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Report](https://img.shields.io/badge/Windows-Latest-blue)](${BASE_URL}/latest/windows-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![History](https://img.shields.io/badge/All-Builds-green)](${BASE_URL}/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build #${{ github.run_number }} | Status: $STATUS_ICON $STATUS_TEXT" >> $GITHUB_STEP_SUMMARY