name: Robotics BDD CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

env:
  ALLURE_VERSION: 2.29.0
  SITE_DIR: site

jobs:
  test:
    name: Run tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    outputs:
      test_outcome: ${{ steps.run_tests.outputs.test_outcome }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker Image
        if: matrix.os == 'ubuntu-latest'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: robotics-bdd:ci-build
          load: true

      - name: Run tests
        id: run_tests
        shell: bash
        run: |
          set +e
          OS_NAME=${{ matrix.os }}
          RESULTS_DIR="allure-results/$OS_NAME"
          mkdir -p "$RESULTS_DIR"

          if [[ "$OS_NAME" == "ubuntu-latest" ]]; then
            echo "🐳 Running tests in Docker..."
            docker run --rm -v $PWD:/workspace -w /workspace robotics-bdd:ci-build \
              pytest -v -m sensors --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          else
            echo "🪟 Running tests on Windows..."
            pytest -v -m sensors --alluredir="$RESULTS_DIR"
            TEST_EXIT_CODE=$?
          fi

          if [ ! -d "$RESULTS_DIR" ] || [ -z "$(find $RESULTS_DIR -type f -name '*.json' 2>/dev/null)" ]; then
            echo "❌ No Allure results found — setup or configuration failure."
            echo "test_outcome=FAILED" >> $GITHUB_OUTPUT
            exit 1
          fi

          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "⚠️ Some tests failed (pytest exit code $TEST_EXIT_CODE)."
            echo "test_outcome=UNSTABLE" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "✅ All tests passed successfully."
            echo "test_outcome=PASSED" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Upload Allure Results Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results/${{ matrix.os }}

  report:
    name: Generate Allure Reports and Deploy
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ⬇️ *** FIX: Wait for previous artifact indexing ***
      - name: Wait for previous artifact to index
        run: sleep 15s 
        shell: bash

      # ⬇️ *** FIX: Download history to a temporary location (old_site) ***
      - name: Download previous report history
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: ${{ github.workflow }}
          branch: main
          workflow_conclusion: success
          name: allure-history # Use a dedicated artifact name for history
          path: old_site # Download to a temporary path
        continue-on-error: true # Allows the first run to succeed if no artifact exists

      # ⬇️ *** DEBUG: Check if historical data was successfully downloaded ***
      - name: Verify downloaded history structure
        run: |
          echo "Listing contents of old_site after download:"
          ls -R "old_site" || echo "old_site directory is empty or missing"
        shell: bash
      
      # ⬇️ *** FIX: Integrate Historical Reports into SITE_DIR ***
      - name: Integrate Historical Reports
        shell: bash
        run: |
          OLD_SITE="old_site"
          SITE_DIR="${{ env.SITE_DIR }}"

          mkdir -p "$SITE_DIR"

          if [ -d "$OLD_SITE" ]; then
            echo "Moving contents from $OLD_SITE to $SITE_DIR..."
            # Move all subdirectories (which are build numbers and 'latest') from old_site to site
            # This integrates the entire history structure (273, 272, latest) into the current site directory
            find "$OLD_SITE" -mindepth 1 -maxdepth 1 -exec mv {} "$SITE_DIR/" \; 2>/dev/null || true
            rm -rf "$OLD_SITE"
            echo "Contents of $SITE_DIR after integrating old reports:"
            ls -R "$SITE_DIR"
          else
            echo "No previous allure-history artifact found. Starting history fresh."
          fi

      - name: Download Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/${{ env.ALLURE_VERSION }}/allure-${{ env.ALLURE_VERSION }}.tgz
          tar -xzf allure-${{ env.ALLURE_VERSION }}.tgz
          mv allure-${{ env.ALLURE_VERSION }} allure-commandline
          echo "$(pwd)/allure-commandline/bin" >> $GITHUB_PATH

      - name: Download Allure Artifacts
        uses: actions/download-artifact@v4
        with:
          path: allure-results

      - name: Generate Allure Reports Per OS
        shell: bash
        run: |
          SITE_DIR="site"
          BUILD_NUMBER=${{ github.run_number }}
          mkdir -p "$SITE_DIR/latest"

          for OS in ubuntu-latest windows-latest; do
            RESULTS_DIR="allure-results/allure-results-$OS"
            REPORT_DIR_BUILD="$SITE_DIR/$BUILD_NUMBER/$OS"
            REPORT_DIR_LATEST="$SITE_DIR/latest/$OS"
            
            mkdir -p "$RESULTS_DIR"
            mkdir -p "$REPORT_DIR_BUILD"
            mkdir -p "$REPORT_DIR_LATEST"

            # ⬇️ *** FIX: This path is now guaranteed to exist if history was downloaded ***
            PREVIOUS_HISTORY_PATH="$REPORT_DIR_LATEST/history" 
            if [ -d "$PREVIOUS_HISTORY_PATH" ]; then
              echo "Merging history from previous report for $OS..."
              mkdir -p "$RESULTS_DIR/history"
              # Copies trend/history files from the previous build's 'latest' report into the current results
              cp -r "$PREVIOUS_HISTORY_PATH"/* "$RESULTS_DIR/history/" || true
            else
              echo "Warning: Previous history path not found at $PREVIOUS_HISTORY_PATH. This will result in an empty trend graph."
            fi

            # Add environment.properties
            echo "Create $RESULTS_DIR/environment.properties"
            if [ "$OS" == "ubuntu-latest" ]; then
              cp supports/ubuntu.properties "$RESULTS_DIR/environment.properties" 2>/dev/null || true
            else
              cp supports/windows.properties "$RESULTS_DIR/environment.properties" 2>/dev/null || true
            fi

            # Copy categories.json
            echo "Create $RESULTS_DIR/categories.json"
            cp supports/categories.json $RESULTS_DIR/categories.json 2>/dev/null || true
          
            # Add executor.json
            REPO_NAME="${GITHUB_REPOSITORY##*/}"
            echo "{\"name\":\"$OS\",\"type\":\"GitHub Actions\",\"url\":\"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\",\"reportUrl\":\"https://${GITHUB_REPOSITORY_OWNER}.github.io/${REPO_NAME}/latest/$OS/\",\"buildOrder\":\"${BUILD_NUMBER}\",\"buildName\":\"Build ${BUILD_NUMBER} ($OS)\",\"buildUrl\":\"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\"}" > "$RESULTS_DIR/executor.json"

            # Generate Allure report (creates the new history files including build 274's data)
            allure generate "$RESULTS_DIR" -o "$REPORT_DIR_BUILD" --clean

            # Copy to latest (Fixes Issue 3 by overwriting with current run's data)
            mkdir -p "$REPORT_DIR_LATEST"
            cp -r "$REPORT_DIR_BUILD"/* "$REPORT_DIR_LATEST/"

            # Save build info
            date -u > "$REPORT_DIR_BUILD/build-info.txt"
            date -u > "$REPORT_DIR_LATEST/build-info.txt"
          done

      - name: Fix Allure Paths
        shell: bash
        run: |
          find site -type f \( -path "*/latest/*" -o -path "*/${{ github.run_number }}/*" \) -name 'index.html' | while read FILE_PATH; do
            perl -pi -e 's|src="/|src="./|g' "$FILE_PATH"
            perl -pi -e 's|href="/|href="./|g' "$FILE_PATH"
          done

      - name: Rebuild index.html (History & PDT Fix)
        shell: bash
        run: |
          SITE_DIR="site"
          CURRENT_LA_TIME=$(TZ='America/Los_Angeles' date)

          mkdir -p "$SITE_DIR"
          echo "<html><head><title>Allure Reports History</title>
          <style>
          body{font-family:sans-serif;margin:20px;}
          ul{list-style:none;padding:0;}
          li{margin:6px 0;}
          a{text-decoration:none;color:#0366d6;}
          a:hover{text-decoration:underline;}
          </style></head><body>
          <h1>🤖 Robotics BDD Simulation CI/CD Build History</h1>
          <h2>🧩 Latest Allure Reports</h2><hr><ul>" > "$SITE_DIR/index.html"

          for OS in ubuntu-latest windows-latest; do
            if [ -d "$SITE_DIR/latest/$OS" ]; then
              # This line now reads the build-info.txt updated in the current run (Build 274)
              TS_UTC=$(cat "$SITE_DIR/latest/$OS/build-info.txt" 2>/dev/null || echo "")
              TS_DISPLAY=$(TZ='America/Los_Angeles' date -d "$TS_UTC" '+%a %b %d %H:%M:%S %Z %Y' 2>/dev/null || echo "$TS_UTC")
              echo "<li><strong><a href='latest/$OS/'>Latest Report ($OS)</a></strong> - Last run: $TS_DISPLAY</li>" >> "$SITE_DIR/index.html"
            else
              echo "<li><strong>$OS:</strong> (No report found)</li>" >> "$SITE_DIR/index.html"
            fi
          done

          echo "</ul><hr><h2>📊 Report History</h2><ul>" >> "$SITE_DIR/index.html"
          # This now lists all build folders (274, 273, 272, etc.) that were integrated into $SITE_DIR
          BUILDS=$(find "$SITE_DIR" -mindepth 1 -maxdepth 1 -type d -printf "%f\n" | grep -E '^[0-9]+$' | sort -nr)
          if [ -z "$BUILDS" ]; then
            echo "<li>No previous builds found.</li>" >> "$SITE_DIR/index.html"
          else
            for BUILD in $BUILDS; do
              for OS in ubuntu-latest windows-latest; do
                if [ -d "$SITE_DIR/$BUILD/$OS" ]; then
                  TS_UTC=$(cat "$SITE_DIR/$BUILD/$OS/build-info.txt" 2>/dev/null || echo "")
                  TS_DISPLAY=$(TZ='America/Los_Angeles' date -d "$TS_UTC" '+%a %b %d %H:%M:%S %Z %Y' 2>/dev/null || echo "$TS_UTC")
                  echo "<li><a href='${BUILD}/${OS}/'>Build #${BUILD} ($OS)</a> - ${TS_DISPLAY}</li>" >> "$SITE_DIR/index.html"
                fi
              done
            done
          fi

          echo "</ul><hr><p><em>Generated automatically on $CURRENT_LA_TIME</em></p></body></html>" >> "$SITE_DIR/index.html"

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.SITE_DIR }}

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      # ⬇️ *** FIX: Upload the complete site as a dedicated history artifact for the next run ***
      - name: Upload Allure History Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: ${{ env.SITE_DIR }}
          retention-days: 7 # Keep history artifact for 7 days

      - name: Add Workflow Summary (Badges)
        run: |
          PAGE_URL=${{ steps.deployment.outputs.page_url }}
          BASE_URL="${PAGE_URL%/}"
          TEST_STATUS=${{ needs.test.outputs.test_outcome }}

          if [[ "$TEST_STATUS" == "FAILED" ]]; then
            STATUS_ICON="❌"
            STATUS_TEXT="Failed (setup/config error)"
          elif [[ "$TEST_STATUS" == "UNSTABLE" ]]; then
            STATUS_ICON="⚠️"
            STATUS_TEXT="Unstable (some tests failed)"
          else
            STATUS_ICON="✅"
            STATUS_TEXT="All tests passed"
          fi

          echo "### 🤖 Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest_Build-blue)](${BASE_URL}/latest/ubuntu-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest_Build-blue)](${BASE_URL}/latest/windows-latest/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](${BASE_URL}/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build #${{ github.run_number }} | Status: $STATUS_ICON $STATUS_TEXT" >> $GITHUB_STEP_SUMMARY
