@echo off
setlocal enabledelayedexpansion

echo Running Kubernetes Pipelines for Robotics BDD Simulation Tests...
echo Author: Bang Thien Nguyen, ontario1998@gmail.com
echo.

:: -----------------------------------------------------------
:: DOCKER CREDENTIAL CHECK
:: -----------------------------------------------------------
set DOCKER_USER_VAR=%DOCKER_USER%
set DOCKER_PASS_VAR=%DOCKER_PASS%

:: Check for required Docker credentials
if "%DOCKER_USER_VAR%"=="" (
echo.
echo CRITICAL ERROR: Environment variable DOCKER_USER is not set.
echo Please set DOCKER_USER and DOCKER_PASS environment variables before running the pipeline.
exit /b 1
)

:: -----------------------------------------------------------
:: ARGUMENT CHECKING & SETUP
:: -----------------------------------------------------------

:: Check for required BUILD_NUMBER (%1)
if "%1"=="" (
echo.
echo ERROR: Missing required argument BUILD_NUMBER.
echo Usage: %~n0 <BUILD_NUMBER> [SUITE_MARKER]
echo Example: %~n0 1 pick
exit /b 1
)

set BUILD_NUMBER=%1
set SUITE_MARKER=%2
set IMAGE_ID_FILE=python_image_id.tmp

:: Define image tags using the DOCKER_USER variable
set BDD_REPO_NAME=robotics-bdd-local
set REPORT_REPO_NAME=robotics-bdd-report
set BDD_IMAGE_TAG=%DOCKER_USER_VAR%/%BDD_REPO_NAME%:latest
set REPORT_IMAGE_TAG=%DOCKER_USER_VAR%/%REPORT_REPO_NAME%

:: NOTE: The Python script handles the report generation and publishing,
:: using 'allure-report' in the project root. This variable is kept for
:: output messages, but the build step is removed.
set ALLURE_REPORT_DIR=allure-report

:: Set default SUITE_MARKER if not provided
if "%SUITE_MARKER%"=="" (
set SUITE_MARKER=all
echo Defaulting SUITE_MARKER to '%SUITE_MARKER%'.
)

echo.
echo =======================================================
echo STARTING ORCHESTRATION PIPELINE
echo Build Number: %BUILD_NUMBER%
echo Test Suite:   %SUITE_MARKER%
echo Docker User:  %DOCKER_USER_VAR%
echo =======================================================

:: -----------------------------------------------------------
:: STEP 1: Skipping local image tag removal
:: -----------------------------------------------------------
echo.
echo [STEP 1/9] Skipping local image tag removal for performance.

:: -----------------------------------------------------------
:: STEP 2: Run Python workflow (Build BDD image, Run Tests, Generate Reports, PUBLISH REPORT IMAGE)
:: -----------------------------------------------------------
echo.
echo [STEP 2/9] Running Python workflow (Build Docker image, execute Docker image, generate, and publish reports)...
echo Executing command: python run_kubernestes.py %BUILD_NUMBER% %SUITE_MARKER%
python run_kubernestes.py %BUILD_NUMBER% %SUITE_MARKER%
if %ERRORLEVEL% neq 0 goto python_error

:: Retrieve the image ID generated by the Python script
set LOCAL_IMAGE_ID=
if exist %IMAGE_ID_FILE% (
set /p LOCAL_IMAGE_ID=< %IMAGE_ID_FILE%
del %IMAGE_ID_FILE%
)

echo Python script completed successfully. All Docker images (BDD runner and Allure report) are handled.
goto continue_pipeline

:python_error
echo.
echo CRITICAL ERROR: Python script failed during image build or test run. Exiting.
:: Clean up temp file if it exists
if exist %IMAGE_ID_FILE% del %IMAGE_ID_FILE%
exit /b %ERRORLEVEL%

:continue_pipeline
:: -----------------------------------------------------------
:: OLD STEP 3 REMOVED: Report image build and push is handled by Python script.
:: -----------------------------------------------------------

:: -----------------------------------------------------------
:: STEP 3: Delete any previous running Kubernetes Job. (WAS Step 4)
:: -----------------------------------------------------------
echo.
echo [STEP 3/9] Deleting previous Kubernetes Job (if found)...
echo Executing command: kubectl delete job robotics-bdd-test-run --ignore-not-found=true
kubectl delete job robotics-bdd-test-run --ignore-not-found=true
echo Previous job deleted (or was not found).

:: -----------------------------------------------------------
:: STEP 4: Apply the Kubernetes Job definition. (WAS Step 5)
:: -----------------------------------------------------------
echo.
echo [STEP 4/9] Applying new Kubernetes Job definition (robotics-bdd-job.yaml)...
echo Executing command: kubectl apply -f robotics-bdd-job.yaml
kubectl apply -f robotics-bdd-job.yaml
if %ERRORLEVEL% neq 0 (
echo.
echo CRITICAL ERROR: kubectl apply failed. Is Kubernetes running? Exiting.
exit /b %ERRORLEVEL%
)
echo Kubernetes Job applied successfully.

:: -----------------------------------------------------------
:: STEP 5: Check the status of the new Pods created by the Job. (WAS Step 6)
:: -----------------------------------------------------------
echo.
echo [STEP 5/9] Checking status of robotics-bdd Pods...
echo Executing command: kubectl get pods -l app=robotics-bdd
kubectl get pods -l app=robotics-bdd

:: -----------------------------------------------------------
:: STEP 6: Tag the local image with the fully qualified name. (WAS Step 7)
:: -----------------------------------------------------------
echo.
echo [STEP 6/9] Ensuring BDD Test image is tagged for push...
echo Executing command: docker tag %BDD_REPO_NAME%:latest %BDD_IMAGE_TAG%
docker tag %BDD_REPO_NAME%:latest %BDD_IMAGE_TAG%
if %ERRORLEVEL% neq 0 (
echo CRITICAL ERROR: Docker tagging failed. Exiting.
exit /b %ERRORLEVEL%
)
echo Image tagged correctly as %BDD_IMAGE_TAG%.

:: -----------------------------------------------------------
:: STEP 7: Conditional Push the updated BDD image to Docker Hub. (WAS Step 8)
:: -----------------------------------------------------------
echo.
echo [STEP 7/9] Pushing BDD Test Image to Docker Hub (Conditional)...

set LAST_ID_FILE=last_pushed_id.txt
set LAST_PUSHED_ID=

:: Get last pushed ID from file
if exist %LAST_ID_FILE% (
set /p LAST_PUSHED_ID=< %LAST_ID_FILE%
) else (
set LAST_PUSHED_ID=
)

if "!LOCAL_IMAGE_ID!"=="" (
echo.
echo WARNING: Could not retrieve local image ID. Proceeding with push just in case.
goto forced_push
)

if "!LOCAL_IMAGE_ID!"=="!LAST_PUSHED_ID!" (
echo.
echo âœ… Local image ID matches last pushed ID. Skipping Docker Hub push for performance.
goto skip_push
)

:forced_push
echo.
echo Local image ID has changed or file not found. Pushing image...
echo Executing command: docker push %BDD_IMAGE_TAG%
docker push %BDD_IMAGE_TAG%
if %ERRORLEVEL% neq 0 (
echo CRITICAL ERROR: Docker push failed. Check 'docker login' status. Exiting.
exit /b %ERRORLEVEL%
)

:: Save the new ID
echo !LOCAL_IMAGE_ID!> %LAST_ID_FILE%
echo Image pushed successfully to Docker Hub and new ID saved.
goto push_complete

:skip_push
echo.
echo Push skipped.

:push_complete
:: -----------------------------------------------------------
:: STEP 8: Monitor Test Execution (Automation Improvement) (WAS Step 9)
:: -----------------------------------------------------------
echo.
echo [STEP 8/9] Streaming Kubernetes Job Logs... (Press Ctrl+C to stop stream)
echo Executing command: Dynamically finding and streaming logs from latest Pod...
FOR /F "tokens=*" %%p IN ('kubectl get pods -l app=robotics-bdd --sort-by=.metadata.creationTimestamp -o jsonpath="{.items[0].metadata.name}" 2^>NUL') DO kubectl logs -f %%p

:: -----------------------------------------------------------
:: FINAL STATUS
:: -----------------------------------------------------------
echo.
echo ====================================================================
echo PIPELINE COMPLETE.
echo Kubernetes Job execution has finished.
echo Use 'debug_job.bat' to inspect final Pod status if the logs above did not appear.
echo ====================================================================
echo.
echo.
echo BDD Test Image Location: https://hub.docker.com/r/luckyjoy/robotics-bdd-local/tags
echo Report Artifact Tag: %REPORT_FULL_TAG%
echo Report Hub Link: https://hub.docker.com/r/%REPORT_IMAGE_TAG%/tags
echo Report Artifact FQDN: docker.io/%REPORT_FULL_TAG%
echo.
echo --- Deployment for Remote Viewing ---
echo The report is packaged in a lightweight web server image pushed to Docker Hub.
echo To view it remotely, you must run this image on a publicly accessible server (VM or cloud service)
echo and ensure port 80 is publicly exposed through the server's firewall.
echo.
echo 1. SSH into your remote server/VM.
echo 2. Run the image, mapping the port:
echo    docker run -d -p 80:80 docker.io/%REPORT_FULL_TAG%
echo 3. Access the report via your server's public IP address or DNS name.
echo ---------------------------------------------------------------------
echo.


:: -----------------------------------------------------------
:: STEP 9: Docker Cleanup (WAS Step 10)
:: -----------------------------------------------------------
echo.
echo [STEP 9/9] Starting Docker resource cleanup...
echo Executing command: docker container prune -f
docker container prune -f
echo Executing command: docker network prune -f
docker network prune -f

echo Image '%BDD_IMAGE_TAG%' is intentionally kept locally for performance on next run.

endlocal